-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calcHelix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LRHLS_settings_chosenRofPhi_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LRHLS_HTParameter_qOverPt_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LRHLS_HTParameter_phiT_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LRHLS_stubMap_size_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LRHLS_stubMap_data_second_size_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    LRHLS_stubMap_data_second_size_s_ce0 : OUT STD_LOGIC;
    LRHLS_stubMap_data_second_size_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    LRHLS_stubMap_data_second_data_r_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    LRHLS_stubMap_data_second_data_r_s_ce0 : OUT STD_LOGIC;
    LRHLS_stubMap_data_second_data_r_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    LRHLS_stubMap_data_second_data_phi_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    LRHLS_stubMap_data_second_data_phi_s_ce0 : OUT STD_LOGIC;
    LRHLS_stubMap_data_second_data_phi_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    guard_variable_for_f_i : IN STD_LOGIC_VECTOR (0 downto 0);
    guard_variable_for_f_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    guard_variable_for_f_o_ap_vld : OUT STD_LOGIC;
    n : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_ap_vld : OUT STD_LOGIC );
end;


architecture behav of calcHelix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_3E22F983 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001000101111100110000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_40490FDB : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_cast3_fu_169_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast3_reg_354 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln106_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln106_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln106_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal LRHLS_stubMap_data_57_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln162_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal LRHLS_stubMap_data_58_reg_381 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal LRHLS_stubMap_data_59_reg_386 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln111_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln111_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal LRHLS_stubMap_data_60_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal LRHLS_stubMap_data_61_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal select_ln32_fu_271_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln40_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_430 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln40_3_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_3_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal guard_variable_for_f_3_load_fu_318_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_f_3_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_begin_0_rec_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln111_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_begin2_0_rec_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln106_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_148_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal trunc_ln106_fu_165_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_194_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_20_fu_198_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln32_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_234_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_8_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln32_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln33_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_292_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln40_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_148_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);

    component LR_top_fsub_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LR_top_fmul_32ns_32ns_32_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LR_top_fcmp_32ns_32ns_1_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134 : component LR_top_fsub_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_135_p0,
        din1 => grp_fu_135_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135 : component LR_top_fsub_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => LRHLS_stubMap_data_61_reg_404,
        din1 => LRHLS_HTParameter_phiT_read,
        ce => ap_const_logic_1,
        dout => grp_fu_139_p2);

    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136 : component LR_top_fmul_32ns_32ns_32_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_154,
        din1 => grp_fu_143_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);

    LR_top_fcmp_32ns_32ns_1_3_1_U1137 : component LR_top_fcmp_32ns_32ns_1_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_148_p0,
        din1 => grp_fu_148_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_148_opcode,
        dout => grp_fu_148_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_begin2_0_rec_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln162_fu_188_p2 = ap_const_lv1_0))) then 
                p_begin2_0_rec_reg_124 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                p_begin2_0_rec_reg_124 <= add_ln111_reg_394;
            end if; 
        end if;
    end process;

    p_begin_0_rec_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln111_fu_209_p2 = ap_const_lv1_1) or (icmp_ln162_reg_377 = ap_const_lv1_1)))) then 
                p_begin_0_rec_reg_113 <= add_ln106_reg_362;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_begin_0_rec_reg_113 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                LRHLS_stubMap_data_57_reg_372 <= LRHLS_stubMap_data_second_size_s_q0;
                icmp_ln162_reg_377 <= icmp_ln162_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln162_reg_377 = ap_const_lv1_0))) then
                LRHLS_stubMap_data_58_reg_381 <= p_cast_fu_203_p1(9 - 1 downto 0);
                LRHLS_stubMap_data_59_reg_386 <= p_cast_fu_203_p1(9 - 1 downto 0);
                add_ln111_reg_394 <= add_ln111_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                LRHLS_stubMap_data_60_reg_399 <= LRHLS_stubMap_data_second_data_r_s_q0;
                LRHLS_stubMap_data_61_reg_404 <= LRHLS_stubMap_data_second_data_phi_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln106_reg_362 <= add_ln106_fu_182_p2;
                    p_cast3_reg_354(9 downto 4) <= p_cast3_fu_169_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                and_ln40_reg_440 <= and_ln40_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_0 = and_ln40_fu_312_p2))) then
                guard_variable_for_f_3_reg_444 <= guard_variable_for_f_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                icmp_ln40_3_reg_435 <= icmp_ln40_3_fu_302_p2;
                icmp_ln40_reg_430 <= icmp_ln40_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_154 <= grp_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                select_ln32_reg_424 <= select_ln32_fu_271_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_14_reg_414 <= grp_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_19_reg_419 <= grp_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_s_reg_409 <= grp_fu_139_p2;
            end if;
        end if;
    end process;
    p_cast3_reg_354(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln106_fu_177_p2, icmp_ln162_reg_377, ap_CS_fsm_state4, and_ln40_fu_312_p2, ap_CS_fsm_state39, guard_variable_for_f_3_load_fu_318_p1, icmp_ln111_fu_209_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln106_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln111_fu_209_p2 = ap_const_lv1_1) or (icmp_ln162_reg_377 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (guard_variable_for_f_3_load_fu_318_p1 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_fu_312_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LRHLS_stubMap_data_second_data_phi_s_address0 <= LRHLS_stubMap_data_59_reg_386;

    LRHLS_stubMap_data_second_data_phi_s_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LRHLS_stubMap_data_second_data_phi_s_ce0 <= ap_const_logic_1;
        else 
            LRHLS_stubMap_data_second_data_phi_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LRHLS_stubMap_data_second_data_r_s_address0 <= LRHLS_stubMap_data_58_reg_381;

    LRHLS_stubMap_data_second_data_r_s_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LRHLS_stubMap_data_second_data_r_s_ce0 <= ap_const_logic_1;
        else 
            LRHLS_stubMap_data_second_data_r_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LRHLS_stubMap_data_second_size_s_address0 <= zext_ln106_fu_160_p1(5 - 1 downto 0);

    LRHLS_stubMap_data_second_size_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            LRHLS_stubMap_data_second_size_s_ce0 <= ap_const_logic_1;
        else 
            LRHLS_stubMap_data_second_size_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln106_fu_182_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_begin_0_rec_reg_113));
    add_ln111_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_begin2_0_rec_reg_124));
    and_ln32_fu_256_p2 <= (tmp_19_reg_419 and or_ln32_fu_250_p2);
    and_ln40_fu_312_p2 <= (or_ln40_fu_308_p2 and grp_fu_148_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln106_fu_177_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln106_fu_177_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln106_fu_177_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln106_fu_177_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_fu_220_p1 <= reg_154;
    bitcast_ln33_fu_267_p1 <= xor_ln33_fu_261_p2;
    bitcast_ln40_fu_279_p1 <= select_ln32_reg_424;
    empty_20_fu_198_p2 <= std_logic_vector(unsigned(p_cast3_reg_354) + unsigned(empty_fu_194_p1));
    empty_fu_194_p1 <= p_begin2_0_rec_reg_124(10 - 1 downto 0);

    grp_fu_135_p0_assign_proc : process(LRHLS_stubMap_data_60_reg_399, tmp_s_reg_409, ap_CS_fsm_state7, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_135_p0 <= tmp_s_reg_409;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_135_p0 <= LRHLS_stubMap_data_60_reg_399;
        else 
            grp_fu_135_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_135_p1_assign_proc : process(LRHLS_settings_chosenRofPhi_read, tmp_14_reg_414, ap_CS_fsm_state7, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_135_p1 <= tmp_14_reg_414;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_135_p1 <= LRHLS_settings_chosenRofPhi_read;
        else 
            grp_fu_135_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p1_assign_proc : process(LRHLS_HTParameter_qOverPt_read, ap_CS_fsm_state39, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_143_p1 <= ap_const_lv32_3E22F983;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_143_p1 <= LRHLS_HTParameter_qOverPt_read;
        else 
            grp_fu_143_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_148_opcode_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_148_opcode <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_148_opcode <= ap_const_lv5_4;
        else 
            grp_fu_148_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_148_p0_assign_proc : process(reg_154, select_ln32_reg_424, ap_CS_fsm_state37, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_148_p0 <= select_ln32_reg_424;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_148_p0 <= reg_154;
        else 
            grp_fu_148_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_148_p1_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_148_p1 <= ap_const_lv32_40490FDB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_148_p1 <= ap_const_lv32_0;
        else 
            grp_fu_148_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    guard_variable_for_f_3_load_fu_318_p1 <= guard_variable_for_f_i;

    guard_variable_for_f_o_assign_proc : process(guard_variable_for_f_i, and_ln40_fu_312_p2, ap_CS_fsm_state39, guard_variable_for_f_3_load_fu_318_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (guard_variable_for_f_3_load_fu_318_p1 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_fu_312_p2))) then 
            guard_variable_for_f_o <= ap_const_lv1_1;
        else 
            guard_variable_for_f_o <= guard_variable_for_f_i;
        end if; 
    end process;


    guard_variable_for_f_o_ap_vld_assign_proc : process(and_ln40_fu_312_p2, ap_CS_fsm_state39, guard_variable_for_f_3_load_fu_318_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (guard_variable_for_f_3_load_fu_318_p1 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_fu_312_p2))) then 
            guard_variable_for_f_o_ap_vld <= ap_const_logic_1;
        else 
            guard_variable_for_f_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln106_fu_177_p2 <= "1" when (p_begin_0_rec_reg_113 = LRHLS_stubMap_size_read) else "0";
    icmp_ln111_fu_209_p2 <= "1" when (p_begin2_0_rec_reg_124 = LRHLS_stubMap_data_57_reg_372) else "0";
    icmp_ln162_fu_188_p2 <= "1" when (LRHLS_stubMap_data_second_size_s_q0 = ap_const_lv32_0) else "0";
    icmp_ln32_8_fu_244_p2 <= "1" when (trunc_ln32_fu_234_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_238_p2 <= "0" when (tmp_fu_224_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_3_fu_302_p2 <= "1" when (trunc_ln40_fu_292_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_296_p2 <= "0" when (tmp_20_fu_282_p4 = ap_const_lv8_FF) else "1";
    n <= grp_fu_143_p2;

    n_ap_vld_assign_proc : process(and_ln40_reg_440, guard_variable_for_f_3_reg_444, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (guard_variable_for_f_3_reg_444 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_reg_440))) then 
            n_ap_vld <= ap_const_logic_1;
        else 
            n_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln32_fu_250_p2 <= (icmp_ln32_fu_238_p2 or icmp_ln32_8_fu_244_p2);
    or_ln40_fu_308_p2 <= (icmp_ln40_reg_430 or icmp_ln40_3_reg_435);
    p_cast3_fu_169_p3 <= (trunc_ln106_fu_165_p1 & ap_const_lv4_0);
    p_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_fu_198_p2),64));
    select_ln32_fu_271_p3 <= 
        bitcast_ln33_fu_267_p1 when (and_ln32_fu_256_p2(0) = '1') else 
        reg_154;
    tmp_20_fu_282_p4 <= bitcast_ln40_fu_279_p1(30 downto 23);
    tmp_fu_224_p4 <= bitcast_ln32_fu_220_p1(30 downto 23);
    trunc_ln106_fu_165_p1 <= p_begin_0_rec_reg_113(6 - 1 downto 0);
    trunc_ln32_fu_234_p1 <= bitcast_ln32_fu_220_p1(23 - 1 downto 0);
    trunc_ln40_fu_292_p1 <= bitcast_ln40_fu_279_p1(23 - 1 downto 0);
    xor_ln33_fu_261_p2 <= (bitcast_ln32_fu_220_p1 xor ap_const_lv32_80000000);
    zext_ln106_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_begin_0_rec_reg_113),64));
end behav;
