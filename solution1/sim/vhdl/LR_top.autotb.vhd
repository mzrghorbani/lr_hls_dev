-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;


entity apatb_LR_top_top is
  generic (
       AUTOTB_CLOCK_PERIOD_DIV2 :   TIME := 1.56 ns;
       AUTOTB_TVIN_lrhls_settings_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_settings_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_settings_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_settings_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_settings_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_settings_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_secEta_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_secEta_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_secPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_secPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_qOverPt_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_qOverPt_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_cot_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_cot_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_secEta_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_secEta_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_secPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_secPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_qOverPt_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_qOverPt_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_cot_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_data_tracksLRHLS_data_cot_s.dat";
       AUTOTB_TVIN_lrhls_numLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_numLayers_s.dat";
       AUTOTB_TVIN_lrhls_minLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_minLayers_s.dat";
       AUTOTB_TVIN_lrhls_minLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_minLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_residPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residPhi_s.dat";
       AUTOTB_TVIN_lrhls_residZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residZ2S_s.dat";
       AUTOTB_TVIN_lrhls_residZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residZPS_s.dat";
       AUTOTB_TVIN_lrhls_maxIteartions_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_maxIteartions_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_r_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_stubsHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_track_secEta_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_secEta_s.dat";
       AUTOTB_TVIN_lrhls_track_secPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_secPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_qOverPt_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_qOverPt_s.dat";
       AUTOTB_TVIN_lrhls_track_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_phi_s.dat";
       AUTOTB_TVIN_lrhls_track_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_z_s.dat";
       AUTOTB_TVIN_lrhls_track_cot_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_track_cot_s.dat";
       AUTOTB_TVIN_lrhls_HTParameter_qOverPt : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_HTParameter_qOverPt.dat";
       AUTOTB_TVIN_lrhls_HTParameter_phiT : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_HTParameter_phiT.dat";
       AUTOTB_TVIN_lrhls_HTParameter_cotTheta : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_HTParameter_cotTheta.dat";
       AUTOTB_TVIN_lrhls_HTParameter_zT : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_HTParameter_zT.dat";
       AUTOTB_TVIN_lrhls_LRParameter_qOverPt : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_LRParameter_qOverPt.dat";
       AUTOTB_TVIN_lrhls_LRParameter_phiT : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_LRParameter_phiT.dat";
       AUTOTB_TVIN_lrhls_LRParameter_cotTheta : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_LRParameter_cotTheta.dat";
       AUTOTB_TVIN_lrhls_LRParameter_zT : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_LRParameter_zT.dat";
       AUTOTB_TVIN_lrhls_stubs_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_size_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_r_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubs_data_z_s.dat";
       AUTOTB_TVIN_lrhls_valid_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_valid_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_size_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_first : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_first.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_size_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_r_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_stubMap_data_second_data_z_s.dat";
       AUTOTB_TVIN_lrhls_layerPopulation_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_layerPopulation_size_s.dat";
       AUTOTB_TVIN_lrhls_layerPopulation_data_first : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_layerPopulation_data_first.dat";
       AUTOTB_TVIN_lrhls_layerPopulation_data_second : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_layerPopulation_data_second.dat";
       AUTOTB_TVIN_lrhls_residuals_data_first : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_first.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_second_size_s.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_phi : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_second_data_phi.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_z : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_second_data_z.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_layerId : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_second_data_layerId.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_stubId : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_second_data_stubId.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_ps : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_residuals_data_second_data_ps.dat";
       AUTOTB_TVIN_lrhls_nIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvin_lrhls_nIterations_s.dat";
       AUTOTB_TVIN_lrhls_settings_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_settings_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_settings_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_settings_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_settings_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_settings_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_secEta_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_secEta_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_secPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_secPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_qOverPt_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_qOverPt_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksMHTHLS_data_cot_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksMHTHLS_data_cot_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_secEta_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_secEta_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_secPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_secPhi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_qOverPt_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_qOverPt_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_data_tracksLRHLS_data_cot_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_data_tracksLRHLS_data_cot_s.dat";
       AUTOTB_TVIN_lrhls_numLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_numLayers_s.dat";
       AUTOTB_TVIN_lrhls_minLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_minLayers_s.dat";
       AUTOTB_TVIN_lrhls_minLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_minLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_residPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residPhi_s.dat";
       AUTOTB_TVIN_lrhls_residZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residZ2S_s.dat";
       AUTOTB_TVIN_lrhls_residZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residZPS_s.dat";
       AUTOTB_TVIN_lrhls_maxIteartions_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_maxIteartions_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_track_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_size_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_r_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_track_stubsHLS_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_stubsHLS_data_z_s.dat";
       AUTOTB_TVIN_lrhls_track_secEta_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_secEta_s.dat";
       AUTOTB_TVIN_lrhls_track_secPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_secPhi_s.dat";
       AUTOTB_TVIN_lrhls_track_qOverPt_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_qOverPt_s.dat";
       AUTOTB_TVIN_lrhls_track_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_phi_s.dat";
       AUTOTB_TVIN_lrhls_track_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_z_s.dat";
       AUTOTB_TVIN_lrhls_track_cot_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_track_cot_s.dat";
       AUTOTB_TVIN_lrhls_HTParameter_qOverPt_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_HTParameter_qOverPt.dat";
       AUTOTB_TVIN_lrhls_HTParameter_phiT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_HTParameter_phiT.dat";
       AUTOTB_TVIN_lrhls_HTParameter_cotTheta_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_HTParameter_cotTheta.dat";
       AUTOTB_TVIN_lrhls_HTParameter_zT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_HTParameter_zT.dat";
       AUTOTB_TVIN_lrhls_LRParameter_qOverPt_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_LRParameter_qOverPt.dat";
       AUTOTB_TVIN_lrhls_LRParameter_phiT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_LRParameter_phiT.dat";
       AUTOTB_TVIN_lrhls_LRParameter_cotTheta_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_LRParameter_cotTheta.dat";
       AUTOTB_TVIN_lrhls_LRParameter_zT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_LRParameter_zT.dat";
       AUTOTB_TVIN_lrhls_stubs_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_size_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_r_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_stubs_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubs_data_z_s.dat";
       AUTOTB_TVIN_lrhls_valid_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_valid_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_size_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_first_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_first.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_size_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_r_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_phi_s.dat";
       AUTOTB_TVIN_lrhls_stubMap_data_second_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_stubMap_data_second_data_z_s.dat";
       AUTOTB_TVIN_lrhls_layerPopulation_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_layerPopulation_size_s.dat";
       AUTOTB_TVIN_lrhls_layerPopulation_data_first_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_layerPopulation_data_first.dat";
       AUTOTB_TVIN_lrhls_layerPopulation_data_second_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_layerPopulation_data_second.dat";
       AUTOTB_TVIN_lrhls_residuals_data_first_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_first.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_second_size_s.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_phi_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_second_data_phi.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_z_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_second_data_z.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_layerId_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_second_data_layerId.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_stubId_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_second_data_stubId.dat";
       AUTOTB_TVIN_lrhls_residuals_data_second_data_ps_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_residuals_data_second_data_ps.dat";
       AUTOTB_TVIN_lrhls_nIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvin_lrhls_nIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_size_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_r_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_phi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_stubsHLS_data_z_s.dat";
       AUTOTB_TVOUT_lrhls_track_secEta_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_secEta_s.dat";
       AUTOTB_TVOUT_lrhls_track_secPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_secPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_qOverPt_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_qOverPt_s.dat";
       AUTOTB_TVOUT_lrhls_track_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_phi_s.dat";
       AUTOTB_TVOUT_lrhls_track_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_z_s.dat";
       AUTOTB_TVOUT_lrhls_track_cot_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_track_cot_s.dat";
       AUTOTB_TVOUT_lrhls_secPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_secPhi_s.dat";
       AUTOTB_TVOUT_lrhls_secEta_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_secEta_s.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_qOverPt : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_HTParameter_qOverPt.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_phiT : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_HTParameter_phiT.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_cotTheta : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_HTParameter_cotTheta.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_zT : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_HTParameter_zT.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_qOverPt : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_LRParameter_qOverPt.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_phiT : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_LRParameter_phiT.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_cotTheta : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_LRParameter_cotTheta.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_zT : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_LRParameter_zT.dat";
       AUTOTB_TVOUT_lrhls_stubs_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_size_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_r_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_phi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubs_data_z_s.dat";
       AUTOTB_TVOUT_lrhls_valid_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_valid_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_size_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_first : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_first.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_size_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_barrel_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_psModule_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_layerId_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_r_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_r_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_phi_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_phi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_z_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_stubMap_data_second_data_z_s.dat";
       AUTOTB_TVOUT_lrhls_layerPopulation_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_layerPopulation_size_s.dat";
       AUTOTB_TVOUT_lrhls_layerPopulation_data_first : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_layerPopulation_data_first.dat";
       AUTOTB_TVOUT_lrhls_layerPopulation_data_second : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_layerPopulation_data_second.dat";
       AUTOTB_TVOUT_lrhls_residuals_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_size_s.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_first : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_first.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_size_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_second_size_s.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_phi : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_second_data_phi.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_z : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_second_data_z.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_layerId : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_second_data_layerId.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_stubId : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_second_data_stubId.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_ps : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_residuals_data_second_data_ps.dat";
       AUTOTB_TVOUT_lrhls_largestResid_phi : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_largestResid_phi.dat";
       AUTOTB_TVOUT_lrhls_largestResid_z : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_largestResid_z.dat";
       AUTOTB_TVOUT_lrhls_largestResid_layerId : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_largestResid_layerId.dat";
       AUTOTB_TVOUT_lrhls_largestResid_stubId : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_largestResid_stubId.dat";
       AUTOTB_TVOUT_lrhls_largestResid_ps : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_largestResid_ps.dat";
       AUTOTB_TVOUT_lrhls_nIterations_s : STRING := "../tv/cdatafile/c.LR_top.autotvout_lrhls_nIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_track_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_size_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_r_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_phi_s.dat";
       AUTOTB_TVOUT_lrhls_track_stubsHLS_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_stubsHLS_data_z_s.dat";
       AUTOTB_TVOUT_lrhls_track_secEta_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_secEta_s.dat";
       AUTOTB_TVOUT_lrhls_track_secPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_secPhi_s.dat";
       AUTOTB_TVOUT_lrhls_track_qOverPt_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_qOverPt_s.dat";
       AUTOTB_TVOUT_lrhls_track_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_phi_s.dat";
       AUTOTB_TVOUT_lrhls_track_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_z_s.dat";
       AUTOTB_TVOUT_lrhls_track_cot_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_track_cot_s.dat";
       AUTOTB_TVOUT_lrhls_secPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_secPhi_s.dat";
       AUTOTB_TVOUT_lrhls_secEta_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_secEta_s.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_qOverPt_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_HTParameter_qOverPt.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_phiT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_HTParameter_phiT.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_cotTheta_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_HTParameter_cotTheta.dat";
       AUTOTB_TVOUT_lrhls_HTParameter_zT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_HTParameter_zT.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_qOverPt_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_LRParameter_qOverPt.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_phiT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_LRParameter_phiT.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_cotTheta_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_LRParameter_cotTheta.dat";
       AUTOTB_TVOUT_lrhls_LRParameter_zT_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_LRParameter_zT.dat";
       AUTOTB_TVOUT_lrhls_stubs_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_size_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_r_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_phi_s.dat";
       AUTOTB_TVOUT_lrhls_stubs_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubs_data_z_s.dat";
       AUTOTB_TVOUT_lrhls_valid_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_valid_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_size_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_first_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_first.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_size_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_barrel_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_psModule_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_moduleHLS_layerId_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_r_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_r_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_phi_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_phi_s.dat";
       AUTOTB_TVOUT_lrhls_stubMap_data_second_data_z_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_stubMap_data_second_data_z_s.dat";
       AUTOTB_TVOUT_lrhls_layerPopulation_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_layerPopulation_size_s.dat";
       AUTOTB_TVOUT_lrhls_layerPopulation_data_first_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_layerPopulation_data_first.dat";
       AUTOTB_TVOUT_lrhls_layerPopulation_data_second_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_layerPopulation_data_second.dat";
       AUTOTB_TVOUT_lrhls_residuals_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_size_s.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_first_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_first.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_size_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_second_size_s.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_phi_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_second_data_phi.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_z_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_second_data_z.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_layerId_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_second_data_layerId.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_stubId_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_second_data_stubId.dat";
       AUTOTB_TVOUT_lrhls_residuals_data_second_data_ps_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_residuals_data_second_data_ps.dat";
       AUTOTB_TVOUT_lrhls_largestResid_phi_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_largestResid_phi.dat";
       AUTOTB_TVOUT_lrhls_largestResid_z_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_largestResid_z.dat";
       AUTOTB_TVOUT_lrhls_largestResid_layerId_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_largestResid_layerId.dat";
       AUTOTB_TVOUT_lrhls_largestResid_stubId_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_largestResid_stubId.dat";
       AUTOTB_TVOUT_lrhls_largestResid_ps_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_largestResid_ps.dat";
       AUTOTB_TVOUT_lrhls_nIterations_s_out_wrapc : STRING := "../tv/rtldatafile/rtl.LR_top.autotvout_lrhls_nIterations_s.dat";
      AUTOTB_LAT_RESULT_FILE    : STRING  := "LR_top.result.lat.rb";
      AUTOTB_PER_RESULT_TRANS_FILE    : STRING  := "LR_top.performance.result.transaction.xml";
      LENGTH_lrhls_settings_chosenRofPhi_s     : INTEGER := 1;
      LENGTH_lrhls_settings_chosenRofZ_s     : INTEGER := 1;
      LENGTH_lrhls_settings_invPtToDphi_s     : INTEGER := 1;
      LENGTH_lrhls_data_tracksMHTHLS_size_s     : INTEGER := 1;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksMHTHLS_data_secEta_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_secPhi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_qOverPt_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_phi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_z_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksMHTHLS_data_cot_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_size_s     : INTEGER := 1;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_size_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s     : INTEGER := 256;
      LENGTH_lrhls_data_tracksLRHLS_data_secEta_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_secPhi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_qOverPt_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_phi_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_z_s     : INTEGER := 16;
      LENGTH_lrhls_data_tracksLRHLS_data_cot_s     : INTEGER := 16;
      LENGTH_lrhls_numLayers_s     : INTEGER := 1;
      LENGTH_lrhls_minLayers_s     : INTEGER := 1;
      LENGTH_lrhls_minLayersPS_s     : INTEGER := 1;
      LENGTH_lrhls_residPhi_s     : INTEGER := 1;
      LENGTH_lrhls_residZ2S_s     : INTEGER := 1;
      LENGTH_lrhls_residZPS_s     : INTEGER := 1;
      LENGTH_lrhls_maxIteartions_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_lrNumIterations_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_lrMinLayers_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_lrMinLayersPS_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_lrResidPhi_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_lrResidZ2S_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_lrResidZPS_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_chosenRofPhi_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_chosenRofZ_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_invPtToDphi_s     : INTEGER := 1;
      LENGTH_lrhls_track_settingsHLS_trackerNumLayers_s     : INTEGER := 1;
      LENGTH_lrhls_track_stubsHLS_size_s     : INTEGER := 1;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_barrel_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_psModule_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_moduleHLS_layerId_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_r_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_phi_s     : INTEGER := 16;
      LENGTH_lrhls_track_stubsHLS_data_z_s     : INTEGER := 16;
      LENGTH_lrhls_track_secEta_s     : INTEGER := 1;
      LENGTH_lrhls_track_secPhi_s     : INTEGER := 1;
      LENGTH_lrhls_track_qOverPt_s     : INTEGER := 1;
      LENGTH_lrhls_track_phi_s     : INTEGER := 1;
      LENGTH_lrhls_track_z_s     : INTEGER := 1;
      LENGTH_lrhls_track_cot_s     : INTEGER := 1;
      LENGTH_lrhls_secPhi_s     : INTEGER := 1;
      LENGTH_lrhls_secEta_s     : INTEGER := 1;
      LENGTH_lrhls_HTParameter_qOverPt     : INTEGER := 1;
      LENGTH_lrhls_HTParameter_phiT     : INTEGER := 1;
      LENGTH_lrhls_HTParameter_cotTheta     : INTEGER := 1;
      LENGTH_lrhls_HTParameter_zT     : INTEGER := 1;
      LENGTH_lrhls_LRParameter_qOverPt     : INTEGER := 1;
      LENGTH_lrhls_LRParameter_phiT     : INTEGER := 1;
      LENGTH_lrhls_LRParameter_cotTheta     : INTEGER := 1;
      LENGTH_lrhls_LRParameter_zT     : INTEGER := 1;
      LENGTH_lrhls_stubs_size_s     : INTEGER := 1;
      LENGTH_lrhls_stubs_data_settingsHLS_lrNumIterations_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_lrMinLayers_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_lrResidPhi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_lrResidZ2S_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_lrResidZPS_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_chosenRofPhi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_chosenRofZ_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_invPtToDphi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_settingsHLS_trackerNumLayers_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_barrel_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_psModule_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_moduleHLS_layerId_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_r_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_phi_s     : INTEGER := 16;
      LENGTH_lrhls_stubs_data_z_s     : INTEGER := 16;
      LENGTH_lrhls_valid_s     : INTEGER := 1;
      LENGTH_lrhls_stubMap_size_s     : INTEGER := 1;
      LENGTH_lrhls_stubMap_data_first     : INTEGER := 30;
      LENGTH_lrhls_stubMap_data_second_size_s     : INTEGER := 30;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_barrel_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_psModule_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_moduleHLS_layerId_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_r_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_phi_s     : INTEGER := 480;
      LENGTH_lrhls_stubMap_data_second_data_z_s     : INTEGER := 480;
      LENGTH_lrhls_layerPopulation_size_s     : INTEGER := 1;
      LENGTH_lrhls_layerPopulation_data_first     : INTEGER := 30;
      LENGTH_lrhls_layerPopulation_data_second     : INTEGER := 30;
      LENGTH_lrhls_residuals_size_s     : INTEGER := 1;
      LENGTH_lrhls_residuals_data_first     : INTEGER := 30;
      LENGTH_lrhls_residuals_data_second_size_s     : INTEGER := 30;
      LENGTH_lrhls_residuals_data_second_data_phi     : INTEGER := 480;
      LENGTH_lrhls_residuals_data_second_data_z     : INTEGER := 480;
      LENGTH_lrhls_residuals_data_second_data_layerId     : INTEGER := 480;
      LENGTH_lrhls_residuals_data_second_data_stubId     : INTEGER := 480;
      LENGTH_lrhls_residuals_data_second_data_ps     : INTEGER := 480;
      LENGTH_lrhls_largestResid_phi     : INTEGER := 1;
      LENGTH_lrhls_largestResid_z     : INTEGER := 1;
      LENGTH_lrhls_largestResid_layerId     : INTEGER := 1;
      LENGTH_lrhls_largestResid_stubId     : INTEGER := 1;
      LENGTH_lrhls_largestResid_ps     : INTEGER := 1;
      LENGTH_lrhls_nIterations_s     : INTEGER := 1;
	    AUTOTB_TRANSACTION_NUM    : INTEGER := 1
);

end apatb_LR_top_top;

architecture behav of apatb_LR_top_top is 
  signal AESL_clock	:   STD_LOGIC := '0';
  signal rst  :   STD_LOGIC;
  signal start    :   STD_LOGIC := '0';
  signal ce       :   STD_LOGIC;
  signal continue :   STD_LOGIC := '0';
  signal AESL_reset :   STD_LOGIC := '0';
  signal AESL_start :   STD_LOGIC := '0';
  signal AESL_ce :   STD_LOGIC := '0';
  signal AESL_continue :   STD_LOGIC := '0';
  signal AESL_ready :   STD_LOGIC := '0';
  signal AESL_idle :   STD_LOGIC := '0';
  signal AESL_done :   STD_LOGIC := '0';
  signal AESL_done_delay :   STD_LOGIC := '0';
  signal AESL_done_delay2 :   STD_LOGIC := '0';
  signal AESL_ready_delay :   STD_LOGIC := '0';
  signal ready :   STD_LOGIC := '0';
  signal ready_wire :   STD_LOGIC := '0';

  signal ap_clk :  STD_LOGIC;
  signal ap_rst :  STD_LOGIC;
  signal ap_start :  STD_LOGIC;
  signal ap_done :  STD_LOGIC;
  signal ap_idle :  STD_LOGIC;
  signal ap_ready :  STD_LOGIC;
  signal lrhls_settings_lrNumIterations_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_lrMinLayers_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_lrMinLayersPS_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_lrResidPhi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_lrResidZ2S_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_lrResidZPS_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_chosenRofPhi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_chosenRofZ_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_invPtToDphi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_settings_trackerNumLayers_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_lrNumIterations_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_lrMinLayers_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_lrMinLayersPS_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_lrResidPhi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_lrResidZ2S_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_lrResidZPS_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_chosenRofPhi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_chosenRofZ_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_invPtToDphi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_settingsHLS_trackerNumLayers_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_size_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secEta_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secEta_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_secEta_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secEta_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secEta_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_secEta_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_secPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_secPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_secPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_qOverPt_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_qOverPt_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_qOverPt_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_qOverPt_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_qOverPt_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_qOverPt_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_phi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_phi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_phi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_z_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_z_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_z_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_cot_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_cot_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_cot_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_cot_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksMHTHLS_data_cot_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksMHTHLS_data_cot_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_size_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1 :  STD_LOGIC_VECTOR (7 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secEta_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secEta_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_secEta_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secEta_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secEta_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_secEta_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_secPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_secPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_secPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_qOverPt_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_qOverPt_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_qOverPt_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_qOverPt_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_qOverPt_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_qOverPt_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_phi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_phi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_phi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_z_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_z_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_z_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_cot_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_cot_s_ce0 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_cot_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_cot_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_data_tracksLRHLS_data_cot_s_ce1 :  STD_LOGIC;
  signal lrhls_data_tracksLRHLS_data_cot_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_numLayers_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_minLayers_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_minLayersPS_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residPhi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residZ2S_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residZPS_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_maxIteartions_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrNumIterations_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrNumIterations_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_lrMinLayers_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrMinLayers_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_lrMinLayersPS_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrMinLayersPS_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_lrResidPhi_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrResidPhi_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_lrResidZ2S_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrResidZ2S_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_lrResidZPS_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrResidZPS_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_chosenRofPhi_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_chosenRofPhi_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_chosenRofZ_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_chosenRofZ_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_invPtToDphi_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_invPtToDphi_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_settingsHLS_trackerNumLayers_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_trackerNumLayers_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_stubsHLS_size_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_size_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_size_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_r_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_r_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_r_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_r_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_r_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_r_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_r_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_r_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_r_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_r_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_phi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_phi_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_phi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_phi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_phi_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_phi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_phi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_z_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_z_s_we0 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_z_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_z_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_z_s_we1 :  STD_LOGIC;
  signal lrhls_track_stubsHLS_data_z_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_stubsHLS_data_z_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_secEta_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_secEta_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_secEta_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_secPhi_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_secPhi_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_secPhi_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_qOverPt_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_qOverPt_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_qOverPt_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_phi_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_phi_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_phi_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_z_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_z_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_z_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_track_cot_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_cot_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_track_cot_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_secPhi_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_secPhi_s_ap_vld :  STD_LOGIC;
  signal lrhls_secEta_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_secEta_s_ap_vld :  STD_LOGIC;
  signal lrhls_HTParameter_qOverPt_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_qOverPt_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_qOverPt_o_ap_vld :  STD_LOGIC;
  signal lrhls_HTParameter_phiT_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_phiT_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_phiT_o_ap_vld :  STD_LOGIC;
  signal lrhls_HTParameter_cotTheta_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_cotTheta_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_cotTheta_o_ap_vld :  STD_LOGIC;
  signal lrhls_HTParameter_zT_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_zT_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_HTParameter_zT_o_ap_vld :  STD_LOGIC;
  signal lrhls_LRParameter_qOverPt_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_qOverPt_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_qOverPt_o_ap_vld :  STD_LOGIC;
  signal lrhls_LRParameter_phiT_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_phiT_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_phiT_o_ap_vld :  STD_LOGIC;
  signal lrhls_LRParameter_cotTheta_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_cotTheta_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_cotTheta_o_ap_vld :  STD_LOGIC;
  signal lrhls_LRParameter_zT_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_zT_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_LRParameter_zT_o_ap_vld :  STD_LOGIC;
  signal lrhls_stubs_size_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_size_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_size_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_barrel_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_barrel_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_barrel_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_barrel_s_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_barrel_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_barrel_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_barrel_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_barrel_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_barrel_s_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_barrel_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_psModule_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_psModule_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_psModule_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_psModule_s_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_psModule_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_psModule_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_psModule_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_psModule_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_psModule_s_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_psModule_s_q1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_layerId_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_layerId_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_layerId_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_layerId_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_layerId_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_layerId_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_layerId_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_layerId_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_moduleHLS_layerId_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_moduleHLS_layerId_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_r_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_r_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_r_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_r_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_r_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_r_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_r_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_r_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_r_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_r_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_phi_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_phi_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_phi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_phi_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_phi_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_phi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_phi_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_z_s_address0 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_stubs_data_z_s_we0 :  STD_LOGIC;
  signal lrhls_stubs_data_z_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_z_s_address1 :  STD_LOGIC_VECTOR (3 DOWNTO 0);
  signal lrhls_stubs_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_stubs_data_z_s_we1 :  STD_LOGIC;
  signal lrhls_stubs_data_z_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubs_data_z_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_valid_s_i :  STD_LOGIC;
  signal lrhls_valid_s_o :  STD_LOGIC;
  signal lrhls_valid_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_stubMap_size_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_size_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_size_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_stubMap_data_first_address0 :  STD_LOGIC_VECTOR (4 DOWNTO 0);
  signal lrhls_stubMap_data_first_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_first_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_first_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_first_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_size_s_address0 :  STD_LOGIC_VECTOR (4 DOWNTO 0);
  signal lrhls_stubMap_data_second_size_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_size_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_size_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_size_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_r_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_r_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_r_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_r_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_r_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_r_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_r_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_r_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_r_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_r_s_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_phi_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_phi_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_phi_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_phi_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_phi_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_phi_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_phi_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_phi_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_phi_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_z_s_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_z_s_ce0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_z_s_we0 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_z_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_z_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_z_s_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_stubMap_data_second_data_z_s_ce1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_z_s_we1 :  STD_LOGIC;
  signal lrhls_stubMap_data_second_data_z_s_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_layerPopulation_size_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_layerPopulation_size_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_layerPopulation_size_s_o_ap_vld :  STD_LOGIC;
  signal lrhls_layerPopulation_data_first_address0 :  STD_LOGIC_VECTOR (4 DOWNTO 0);
  signal lrhls_layerPopulation_data_first_ce0 :  STD_LOGIC;
  signal lrhls_layerPopulation_data_first_we0 :  STD_LOGIC;
  signal lrhls_layerPopulation_data_first_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_layerPopulation_data_first_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_layerPopulation_data_second_address0 :  STD_LOGIC_VECTOR (4 DOWNTO 0);
  signal lrhls_layerPopulation_data_second_ce0 :  STD_LOGIC;
  signal lrhls_layerPopulation_data_second_we0 :  STD_LOGIC;
  signal lrhls_layerPopulation_data_second_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_layerPopulation_data_second_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_size_s :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_size_s_ap_vld :  STD_LOGIC;
  signal lrhls_residuals_data_first_address0 :  STD_LOGIC_VECTOR (4 DOWNTO 0);
  signal lrhls_residuals_data_first_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_first_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_first_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_first_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_size_s_address0 :  STD_LOGIC_VECTOR (4 DOWNTO 0);
  signal lrhls_residuals_data_second_size_s_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_size_s_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_size_s_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_size_s_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_phi_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_phi_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_phi_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_phi_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_phi_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_phi_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_phi_ce1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_phi_we1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_phi_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_z_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_z_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_z_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_z_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_z_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_z_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_z_ce1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_z_we1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_z_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_layerId_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_layerId_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_layerId_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_layerId_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_layerId_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_layerId_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_layerId_ce1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_layerId_we1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_layerId_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_stubId_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_stubId_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_stubId_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_stubId_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_stubId_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_stubId_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_stubId_ce1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_stubId_we1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_stubId_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_residuals_data_second_data_ps_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_ps_ce0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_ps_we0 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_ps_d0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_residuals_data_second_data_ps_q0 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_residuals_data_second_data_ps_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal lrhls_residuals_data_second_data_ps_ce1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_ps_we1 :  STD_LOGIC;
  signal lrhls_residuals_data_second_data_ps_d1 :  STD_LOGIC_VECTOR (0 DOWNTO 0);
  signal lrhls_largestResid_phi :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_largestResid_phi_ap_vld :  STD_LOGIC;
  signal lrhls_largestResid_z :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_largestResid_z_ap_vld :  STD_LOGIC;
  signal lrhls_largestResid_layerId :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_largestResid_layerId_ap_vld :  STD_LOGIC;
  signal lrhls_largestResid_stubId :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_largestResid_stubId_ap_vld :  STD_LOGIC;
  signal lrhls_largestResid_ps :  STD_LOGIC;
  signal lrhls_largestResid_ps_ap_vld :  STD_LOGIC;
  signal lrhls_nIterations_s_i :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_nIterations_s_o :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal lrhls_nIterations_s_o_ap_vld :  STD_LOGIC;

  signal ready_cnt : STD_LOGIC_VECTOR(31 DOWNTO 0);
  signal done_cnt	: STD_LOGIC_VECTOR(31 DOWNTO 0);
  signal ready_initial  :	STD_LOGIC;
  signal ready_initial_n	:   STD_LOGIC;
  signal ready_last_n   :	STD_LOGIC;
  signal ready_delay_last_n	:   STD_LOGIC;
  signal done_delay_last_n	:   STD_LOGIC;
  signal interface_done :	STD_LOGIC := '0';
  -- Subtype for random state number, to prevent confusing it with true integers
  -- Top of range should be (2**31)-1 but this literal calculation causes overflow on 32-bit machines
  subtype T_RANDINT is integer range 1 to integer'high;

  type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
  shared variable AESL_mLatCnterIn : latency_record;
  shared variable AESL_mLatCnterOut : latency_record;
  shared variable AESL_mLatCnterIn_addr : INTEGER;
  shared variable AESL_mLatCnterOut_addr : INTEGER;
  shared variable AESL_clk_counter : INTEGER;
  signal reported_stuck : STD_LOGIC   := '0';
  shared variable reported_stuck_cnt : INTEGER := 0;
component LR_top is
port (
    ap_clk :  IN STD_LOGIC;
    ap_rst :  IN STD_LOGIC;
    ap_start :  IN STD_LOGIC;
    ap_done :  OUT STD_LOGIC;
    ap_idle :  OUT STD_LOGIC;
    ap_ready :  OUT STD_LOGIC;
    lrhls_settings_lrNumIterations_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_lrMinLayers_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_lrMinLayersPS_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_lrResidPhi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_lrResidZ2S_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_lrResidZPS_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_chosenRofPhi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_chosenRofZ_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_invPtToDphi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_settings_trackerNumLayers_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_lrNumIterations_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_lrMinLayers_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_lrMinLayersPS_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_lrResidPhi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_lrResidZ2S_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_lrResidZPS_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_chosenRofPhi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_chosenRofZ_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_invPtToDphi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_settingsHLS_trackerNumLayers_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_size_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secEta_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secEta_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_secEta_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secEta_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secEta_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_secEta_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_secPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_secPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_secPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_qOverPt_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_qOverPt_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_qOverPt_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_qOverPt_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_qOverPt_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_qOverPt_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_phi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_z_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_cot_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_cot_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_cot_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_cot_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksMHTHLS_data_cot_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksMHTHLS_data_cot_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_size_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secEta_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secEta_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_secEta_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secEta_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secEta_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_secEta_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_secPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_secPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_secPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_qOverPt_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_qOverPt_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_qOverPt_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_qOverPt_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_qOverPt_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_qOverPt_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_phi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_z_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_cot_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_cot_s_ce0 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_cot_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_cot_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_data_tracksLRHLS_data_cot_s_ce1 :  OUT STD_LOGIC;
    lrhls_data_tracksLRHLS_data_cot_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_numLayers_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_minLayers_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_minLayersPS_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residPhi_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residZ2S_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residZPS_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_maxIteartions_s :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrNumIterations_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrNumIterations_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_lrMinLayers_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrMinLayers_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_lrMinLayersPS_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrMinLayersPS_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_lrResidPhi_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrResidPhi_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_lrResidZ2S_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrResidZ2S_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_lrResidZPS_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrResidZPS_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_chosenRofPhi_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_chosenRofPhi_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_chosenRofZ_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_chosenRofZ_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_invPtToDphi_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_invPtToDphi_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_settingsHLS_trackerNumLayers_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_trackerNumLayers_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_size_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_size_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_size_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_r_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_r_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_r_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_r_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_r_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_r_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_r_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_r_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_r_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_r_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_phi_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_phi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_phi_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_phi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_phi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_z_s_we0 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_z_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_track_stubsHLS_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_z_s_we1 :  OUT STD_LOGIC;
    lrhls_track_stubsHLS_data_z_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_stubsHLS_data_z_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_secEta_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_secEta_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_secEta_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_secPhi_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_secPhi_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_secPhi_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_qOverPt_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_qOverPt_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_qOverPt_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_phi_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_phi_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_phi_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_z_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_z_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_z_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_track_cot_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_cot_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_track_cot_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_secPhi_s :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_secPhi_s_ap_vld :  OUT STD_LOGIC;
    lrhls_secEta_s :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_secEta_s_ap_vld :  OUT STD_LOGIC;
    lrhls_HTParameter_qOverPt_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_qOverPt_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_qOverPt_o_ap_vld :  OUT STD_LOGIC;
    lrhls_HTParameter_phiT_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_phiT_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_phiT_o_ap_vld :  OUT STD_LOGIC;
    lrhls_HTParameter_cotTheta_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_cotTheta_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_cotTheta_o_ap_vld :  OUT STD_LOGIC;
    lrhls_HTParameter_zT_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_zT_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_HTParameter_zT_o_ap_vld :  OUT STD_LOGIC;
    lrhls_LRParameter_qOverPt_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_qOverPt_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_qOverPt_o_ap_vld :  OUT STD_LOGIC;
    lrhls_LRParameter_phiT_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_phiT_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_phiT_o_ap_vld :  OUT STD_LOGIC;
    lrhls_LRParameter_cotTheta_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_cotTheta_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_cotTheta_o_ap_vld :  OUT STD_LOGIC;
    lrhls_LRParameter_zT_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_zT_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_LRParameter_zT_o_ap_vld :  OUT STD_LOGIC;
    lrhls_stubs_size_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_size_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_size_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_barrel_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_barrel_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_barrel_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_barrel_s_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_barrel_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_barrel_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_barrel_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_barrel_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_barrel_s_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_barrel_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_psModule_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_psModule_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_psModule_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_psModule_s_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_psModule_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_psModule_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_psModule_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_psModule_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_psModule_s_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_psModule_s_q1 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_layerId_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_layerId_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_layerId_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_layerId_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_layerId_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_layerId_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_layerId_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_layerId_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_moduleHLS_layerId_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_moduleHLS_layerId_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_r_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_r_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_r_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_r_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_r_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_r_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_r_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_r_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_r_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_r_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_phi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_phi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_phi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_phi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_phi_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubs_data_z_s_we0 :  OUT STD_LOGIC;
    lrhls_stubs_data_z_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    lrhls_stubs_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubs_data_z_s_we1 :  OUT STD_LOGIC;
    lrhls_stubs_data_z_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubs_data_z_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_valid_s_i :  IN STD_LOGIC;
    lrhls_valid_s_o :  OUT STD_LOGIC;
    lrhls_valid_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_stubMap_size_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_size_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_size_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_stubMap_data_first_address0 :  OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    lrhls_stubMap_data_first_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_first_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_first_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_first_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_size_s_address0 :  OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    lrhls_stubMap_data_second_size_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_size_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_size_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_size_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_r_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_r_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_r_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_r_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_r_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_r_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_r_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_r_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_r_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_r_s_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_phi_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_phi_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_phi_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_phi_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_phi_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_phi_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_phi_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_phi_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_phi_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_z_s_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_z_s_ce0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_z_s_we0 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_z_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_z_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_stubMap_data_second_data_z_s_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_stubMap_data_second_data_z_s_ce1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_z_s_we1 :  OUT STD_LOGIC;
    lrhls_stubMap_data_second_data_z_s_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_layerPopulation_size_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_layerPopulation_size_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_layerPopulation_size_s_o_ap_vld :  OUT STD_LOGIC;
    lrhls_layerPopulation_data_first_address0 :  OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    lrhls_layerPopulation_data_first_ce0 :  OUT STD_LOGIC;
    lrhls_layerPopulation_data_first_we0 :  OUT STD_LOGIC;
    lrhls_layerPopulation_data_first_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_layerPopulation_data_first_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_layerPopulation_data_second_address0 :  OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    lrhls_layerPopulation_data_second_ce0 :  OUT STD_LOGIC;
    lrhls_layerPopulation_data_second_we0 :  OUT STD_LOGIC;
    lrhls_layerPopulation_data_second_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_layerPopulation_data_second_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_size_s :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_size_s_ap_vld :  OUT STD_LOGIC;
    lrhls_residuals_data_first_address0 :  OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    lrhls_residuals_data_first_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_first_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_first_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_first_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_size_s_address0 :  OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    lrhls_residuals_data_second_size_s_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_size_s_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_size_s_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_size_s_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_phi_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_phi_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_phi_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_phi_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_phi_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_phi_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_phi_ce1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_phi_we1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_phi_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_z_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_z_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_z_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_z_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_z_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_z_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_z_ce1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_z_we1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_z_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_layerId_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_layerId_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_layerId_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_layerId_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_layerId_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_layerId_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_layerId_ce1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_layerId_we1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_layerId_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_stubId_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_stubId_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_stubId_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_stubId_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_stubId_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_stubId_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_stubId_ce1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_stubId_we1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_stubId_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_residuals_data_second_data_ps_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_ps_ce0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_ps_we0 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_ps_d0 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_residuals_data_second_data_ps_q0 :  IN STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_residuals_data_second_data_ps_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    lrhls_residuals_data_second_data_ps_ce1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_ps_we1 :  OUT STD_LOGIC;
    lrhls_residuals_data_second_data_ps_d1 :  OUT STD_LOGIC_VECTOR (0 DOWNTO 0);
    lrhls_largestResid_phi :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_largestResid_phi_ap_vld :  OUT STD_LOGIC;
    lrhls_largestResid_z :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_largestResid_z_ap_vld :  OUT STD_LOGIC;
    lrhls_largestResid_layerId :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_largestResid_layerId_ap_vld :  OUT STD_LOGIC;
    lrhls_largestResid_stubId :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_largestResid_stubId_ap_vld :  OUT STD_LOGIC;
    lrhls_largestResid_ps :  OUT STD_LOGIC;
    lrhls_largestResid_ps_ap_vld :  OUT STD_LOGIC;
    lrhls_nIterations_s_i :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_nIterations_s_o :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    lrhls_nIterations_s_o_ap_vld :  OUT STD_LOGIC);
end component;

-- The signal of port lrhls_settings_lrNumIterations_s
shared variable AESL_REG_lrhls_settings_lrNumIterations_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_lrMinLayers_s
shared variable AESL_REG_lrhls_settings_lrMinLayers_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_lrMinLayersPS_s
shared variable AESL_REG_lrhls_settings_lrMinLayersPS_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_lrResidPhi_s
shared variable AESL_REG_lrhls_settings_lrResidPhi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_lrResidZ2S_s
shared variable AESL_REG_lrhls_settings_lrResidZ2S_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_lrResidZPS_s
shared variable AESL_REG_lrhls_settings_lrResidZPS_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_chosenRofPhi_s
shared variable AESL_REG_lrhls_settings_chosenRofPhi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_chosenRofZ_s
shared variable AESL_REG_lrhls_settings_chosenRofZ_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_invPtToDphi_s
shared variable AESL_REG_lrhls_settings_invPtToDphi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_settings_trackerNumLayers_s
shared variable AESL_REG_lrhls_settings_trackerNumLayers_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_lrNumIterations_s
shared variable AESL_REG_lrhls_data_settingsHLS_lrNumIterations_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_lrMinLayers_s
shared variable AESL_REG_lrhls_data_settingsHLS_lrMinLayers_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_lrMinLayersPS_s
shared variable AESL_REG_lrhls_data_settingsHLS_lrMinLayersPS_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_lrResidPhi_s
shared variable AESL_REG_lrhls_data_settingsHLS_lrResidPhi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_lrResidZ2S_s
shared variable AESL_REG_lrhls_data_settingsHLS_lrResidZ2S_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_lrResidZPS_s
shared variable AESL_REG_lrhls_data_settingsHLS_lrResidZPS_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_chosenRofPhi_s
shared variable AESL_REG_lrhls_data_settingsHLS_chosenRofPhi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_chosenRofZ_s
shared variable AESL_REG_lrhls_data_settingsHLS_chosenRofZ_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_invPtToDphi_s
shared variable AESL_REG_lrhls_data_settingsHLS_invPtToDphi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_settingsHLS_trackerNumLayers_s
shared variable AESL_REG_lrhls_data_settingsHLS_trackerNumLayers_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_data_tracksMHTHLS_size_s
shared variable AESL_REG_lrhls_data_tracksMHTHLS_size_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_we0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_din0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_dout0, arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_secEta_s_ce0, arraylrhls_data_tracksMHTHLS_data_secEta_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_secEta_s_we0, arraylrhls_data_tracksMHTHLS_data_secEta_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_secEta_s_address0, arraylrhls_data_tracksMHTHLS_data_secEta_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_secEta_s_din0, arraylrhls_data_tracksMHTHLS_data_secEta_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_secEta_s_dout0, arraylrhls_data_tracksMHTHLS_data_secEta_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_secEta_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_secEta_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_secEta_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_ce0, arraylrhls_data_tracksMHTHLS_data_secPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_we0, arraylrhls_data_tracksMHTHLS_data_secPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_address0, arraylrhls_data_tracksMHTHLS_data_secPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_din0, arraylrhls_data_tracksMHTHLS_data_secPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_dout0, arraylrhls_data_tracksMHTHLS_data_secPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_secPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_secPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ce0, arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_we0, arraylrhls_data_tracksMHTHLS_data_qOverPt_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_address0, arraylrhls_data_tracksMHTHLS_data_qOverPt_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_din0, arraylrhls_data_tracksMHTHLS_data_qOverPt_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_dout0, arraylrhls_data_tracksMHTHLS_data_qOverPt_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_qOverPt_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_qOverPt_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_phi_s_ce0, arraylrhls_data_tracksMHTHLS_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_phi_s_we0, arraylrhls_data_tracksMHTHLS_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_phi_s_address0, arraylrhls_data_tracksMHTHLS_data_phi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_phi_s_din0, arraylrhls_data_tracksMHTHLS_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_phi_s_dout0, arraylrhls_data_tracksMHTHLS_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_z_s_ce0, arraylrhls_data_tracksMHTHLS_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_z_s_we0, arraylrhls_data_tracksMHTHLS_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_z_s_address0, arraylrhls_data_tracksMHTHLS_data_z_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_z_s_din0, arraylrhls_data_tracksMHTHLS_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_z_s_dout0, arraylrhls_data_tracksMHTHLS_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_z_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksMHTHLS_data_cot_s_ce0, arraylrhls_data_tracksMHTHLS_data_cot_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_cot_s_we0, arraylrhls_data_tracksMHTHLS_data_cot_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_cot_s_address0, arraylrhls_data_tracksMHTHLS_data_cot_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_cot_s_din0, arraylrhls_data_tracksMHTHLS_data_cot_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_cot_s_dout0, arraylrhls_data_tracksMHTHLS_data_cot_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksMHTHLS_data_cot_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksMHTHLS_data_cot_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksMHTHLS_data_cot_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

-- The signal of port lrhls_data_tracksLRHLS_size_s
shared variable AESL_REG_lrhls_data_tracksLRHLS_size_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_size_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_we0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1 : STD_LOGIC_VECTOR(7 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_din0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_dout0, arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_secEta_s_ce0, arraylrhls_data_tracksLRHLS_data_secEta_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_secEta_s_we0, arraylrhls_data_tracksLRHLS_data_secEta_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_secEta_s_address0, arraylrhls_data_tracksLRHLS_data_secEta_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_secEta_s_din0, arraylrhls_data_tracksLRHLS_data_secEta_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_secEta_s_dout0, arraylrhls_data_tracksLRHLS_data_secEta_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_secEta_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_secEta_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_secEta_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_secPhi_s_ce0, arraylrhls_data_tracksLRHLS_data_secPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_secPhi_s_we0, arraylrhls_data_tracksLRHLS_data_secPhi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_secPhi_s_address0, arraylrhls_data_tracksLRHLS_data_secPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_secPhi_s_din0, arraylrhls_data_tracksLRHLS_data_secPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_secPhi_s_dout0, arraylrhls_data_tracksLRHLS_data_secPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_secPhi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_secPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_secPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_ce0, arraylrhls_data_tracksLRHLS_data_qOverPt_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_we0, arraylrhls_data_tracksLRHLS_data_qOverPt_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_address0, arraylrhls_data_tracksLRHLS_data_qOverPt_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_din0, arraylrhls_data_tracksLRHLS_data_qOverPt_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_dout0, arraylrhls_data_tracksLRHLS_data_qOverPt_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_qOverPt_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_qOverPt_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_phi_s_ce0, arraylrhls_data_tracksLRHLS_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_phi_s_we0, arraylrhls_data_tracksLRHLS_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_phi_s_address0, arraylrhls_data_tracksLRHLS_data_phi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_phi_s_din0, arraylrhls_data_tracksLRHLS_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_phi_s_dout0, arraylrhls_data_tracksLRHLS_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_z_s_ce0, arraylrhls_data_tracksLRHLS_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_z_s_we0, arraylrhls_data_tracksLRHLS_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_z_s_address0, arraylrhls_data_tracksLRHLS_data_z_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_z_s_din0, arraylrhls_data_tracksLRHLS_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_z_s_dout0, arraylrhls_data_tracksLRHLS_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_z_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_data_tracksLRHLS_data_cot_s_ce0, arraylrhls_data_tracksLRHLS_data_cot_s_ce1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_cot_s_we0, arraylrhls_data_tracksLRHLS_data_cot_s_we1 : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_cot_s_address0, arraylrhls_data_tracksLRHLS_data_cot_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_data_tracksLRHLS_data_cot_s_din0, arraylrhls_data_tracksLRHLS_data_cot_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_cot_s_dout0, arraylrhls_data_tracksLRHLS_data_cot_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_data_tracksLRHLS_data_cot_s_ready : STD_LOGIC;
signal arraylrhls_data_tracksLRHLS_data_cot_s_done : STD_LOGIC;

component AESL_automem_lrhls_data_tracksLRHLS_data_cot_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

-- The signal of port lrhls_numLayers_s
shared variable AESL_REG_lrhls_numLayers_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_minLayers_s
shared variable AESL_REG_lrhls_minLayers_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_minLayersPS_s
shared variable AESL_REG_lrhls_minLayersPS_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_residPhi_s
shared variable AESL_REG_lrhls_residPhi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_residZ2S_s
shared variable AESL_REG_lrhls_residZ2S_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_residZPS_s
shared variable AESL_REG_lrhls_residZPS_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_maxIteartions_s
shared variable AESL_REG_lrhls_maxIteartions_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_lrNumIterations_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_lrNumIterations_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_lrMinLayers_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_lrMinLayers_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_lrMinLayersPS_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_lrMinLayersPS_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_lrResidPhi_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_lrResidPhi_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_lrResidZ2S_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_lrResidZ2S_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_lrResidZPS_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_lrResidZPS_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_chosenRofPhi_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_chosenRofPhi_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_chosenRofZ_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_chosenRofZ_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_invPtToDphi_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_invPtToDphi_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_settingsHLS_trackerNumLayers_s_i
shared variable AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_settingsHLS_trackerNumLayers_s_o
shared variable AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_stubsHLS_size_s_i
shared variable AESL_REG_lrhls_track_stubsHLS_size_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_stubsHLS_size_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_stubsHLS_size_s_o
shared variable AESL_REG_lrhls_track_stubsHLS_size_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_barrel_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_psModule_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0, arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0, arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0, arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_din0, arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_dout0, arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_layerId_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_r_s_ce0, arraylrhls_track_stubsHLS_data_r_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_r_s_we0, arraylrhls_track_stubsHLS_data_r_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_r_s_address0, arraylrhls_track_stubsHLS_data_r_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_r_s_din0, arraylrhls_track_stubsHLS_data_r_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_r_s_dout0, arraylrhls_track_stubsHLS_data_r_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_r_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_r_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_r_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_phi_s_ce0, arraylrhls_track_stubsHLS_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_phi_s_we0, arraylrhls_track_stubsHLS_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_phi_s_address0, arraylrhls_track_stubsHLS_data_phi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_phi_s_din0, arraylrhls_track_stubsHLS_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_phi_s_dout0, arraylrhls_track_stubsHLS_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_track_stubsHLS_data_z_s_ce0, arraylrhls_track_stubsHLS_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_z_s_we0, arraylrhls_track_stubsHLS_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_z_s_address0, arraylrhls_track_stubsHLS_data_z_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_track_stubsHLS_data_z_s_din0, arraylrhls_track_stubsHLS_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_z_s_dout0, arraylrhls_track_stubsHLS_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_track_stubsHLS_data_z_s_ready : STD_LOGIC;
signal arraylrhls_track_stubsHLS_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_track_stubsHLS_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

-- The signal of port lrhls_track_secEta_s_i
shared variable AESL_REG_lrhls_track_secEta_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_secEta_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_secEta_s_o
shared variable AESL_REG_lrhls_track_secEta_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_secPhi_s_i
shared variable AESL_REG_lrhls_track_secPhi_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_secPhi_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_secPhi_s_o
shared variable AESL_REG_lrhls_track_secPhi_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_qOverPt_s_i
shared variable AESL_REG_lrhls_track_qOverPt_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_qOverPt_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_qOverPt_s_o
shared variable AESL_REG_lrhls_track_qOverPt_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_phi_s_i
shared variable AESL_REG_lrhls_track_phi_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_phi_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_phi_s_o
shared variable AESL_REG_lrhls_track_phi_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_z_s_i
shared variable AESL_REG_lrhls_track_z_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_z_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_z_s_o
shared variable AESL_REG_lrhls_track_z_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_track_cot_s_i
shared variable AESL_REG_lrhls_track_cot_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_track_cot_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_track_cot_s_o
shared variable AESL_REG_lrhls_track_cot_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_secPhi_s_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_secPhi_s
shared variable AESL_REG_lrhls_secPhi_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_secEta_s_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_secEta_s
shared variable AESL_REG_lrhls_secEta_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_HTParameter_qOverPt_i
shared variable AESL_REG_lrhls_HTParameter_qOverPt_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_HTParameter_qOverPt_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_HTParameter_qOverPt_o
shared variable AESL_REG_lrhls_HTParameter_qOverPt_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_HTParameter_phiT_i
shared variable AESL_REG_lrhls_HTParameter_phiT_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_HTParameter_phiT_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_HTParameter_phiT_o
shared variable AESL_REG_lrhls_HTParameter_phiT_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_HTParameter_cotTheta_i
shared variable AESL_REG_lrhls_HTParameter_cotTheta_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_HTParameter_cotTheta_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_HTParameter_cotTheta_o
shared variable AESL_REG_lrhls_HTParameter_cotTheta_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_HTParameter_zT_i
shared variable AESL_REG_lrhls_HTParameter_zT_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_HTParameter_zT_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_HTParameter_zT_o
shared variable AESL_REG_lrhls_HTParameter_zT_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_LRParameter_qOverPt_i
shared variable AESL_REG_lrhls_LRParameter_qOverPt_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_LRParameter_qOverPt_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_LRParameter_qOverPt_o
shared variable AESL_REG_lrhls_LRParameter_qOverPt_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_LRParameter_phiT_i
shared variable AESL_REG_lrhls_LRParameter_phiT_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_LRParameter_phiT_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_LRParameter_phiT_o
shared variable AESL_REG_lrhls_LRParameter_phiT_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_LRParameter_cotTheta_i
shared variable AESL_REG_lrhls_LRParameter_cotTheta_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_LRParameter_cotTheta_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_LRParameter_cotTheta_o
shared variable AESL_REG_lrhls_LRParameter_cotTheta_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_LRParameter_zT_i
shared variable AESL_REG_lrhls_LRParameter_zT_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_LRParameter_zT_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_LRParameter_zT_o
shared variable AESL_REG_lrhls_LRParameter_zT_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
-- The signal of port lrhls_stubs_size_s_i
shared variable AESL_REG_lrhls_stubs_size_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_stubs_size_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_stubs_size_s_o
shared variable AESL_REG_lrhls_stubs_size_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0, arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0, arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0, arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_barrel_s_ce0, arraylrhls_stubs_data_moduleHLS_barrel_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_barrel_s_we0, arraylrhls_stubs_data_moduleHLS_barrel_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_barrel_s_address0, arraylrhls_stubs_data_moduleHLS_barrel_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_barrel_s_din0, arraylrhls_stubs_data_moduleHLS_barrel_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubs_data_moduleHLS_barrel_s_dout0, arraylrhls_stubs_data_moduleHLS_barrel_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubs_data_moduleHLS_barrel_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_barrel_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_barrel_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_psModule_s_ce0, arraylrhls_stubs_data_moduleHLS_psModule_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_psModule_s_we0, arraylrhls_stubs_data_moduleHLS_psModule_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_psModule_s_address0, arraylrhls_stubs_data_moduleHLS_psModule_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_psModule_s_din0, arraylrhls_stubs_data_moduleHLS_psModule_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubs_data_moduleHLS_psModule_s_dout0, arraylrhls_stubs_data_moduleHLS_psModule_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubs_data_moduleHLS_psModule_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_psModule_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_psModule_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_moduleHLS_layerId_s_ce0, arraylrhls_stubs_data_moduleHLS_layerId_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_layerId_s_we0, arraylrhls_stubs_data_moduleHLS_layerId_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_layerId_s_address0, arraylrhls_stubs_data_moduleHLS_layerId_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_moduleHLS_layerId_s_din0, arraylrhls_stubs_data_moduleHLS_layerId_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_layerId_s_dout0, arraylrhls_stubs_data_moduleHLS_layerId_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_moduleHLS_layerId_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_moduleHLS_layerId_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_moduleHLS_layerId_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_r_s_ce0, arraylrhls_stubs_data_r_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_r_s_we0, arraylrhls_stubs_data_r_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_r_s_address0, arraylrhls_stubs_data_r_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_r_s_din0, arraylrhls_stubs_data_r_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_r_s_dout0, arraylrhls_stubs_data_r_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_r_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_r_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_r_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_phi_s_ce0, arraylrhls_stubs_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_phi_s_we0, arraylrhls_stubs_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_phi_s_address0, arraylrhls_stubs_data_phi_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_phi_s_din0, arraylrhls_stubs_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_phi_s_dout0, arraylrhls_stubs_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubs_data_z_s_ce0, arraylrhls_stubs_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_stubs_data_z_s_we0, arraylrhls_stubs_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_stubs_data_z_s_address0, arraylrhls_stubs_data_z_s_address1 : STD_LOGIC_VECTOR(3 downto 0);
signal arraylrhls_stubs_data_z_s_din0, arraylrhls_stubs_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_z_s_dout0, arraylrhls_stubs_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubs_data_z_s_ready : STD_LOGIC;
signal arraylrhls_stubs_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubs_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

-- The signal of port lrhls_valid_s_i
shared variable AESL_REG_lrhls_valid_s_i : STD_LOGIC_VECTOR(0 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_valid_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_valid_s_o
shared variable AESL_REG_lrhls_valid_s_o : STD_LOGIC_VECTOR(0 downto 0) := (others => '0');
-- The signal of port lrhls_stubMap_size_s_i
shared variable AESL_REG_lrhls_stubMap_size_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_stubMap_size_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_stubMap_size_s_o
shared variable AESL_REG_lrhls_stubMap_size_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_stubMap_data_first_ce0, arraylrhls_stubMap_data_first_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_first_we0, arraylrhls_stubMap_data_first_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_first_address0, arraylrhls_stubMap_data_first_address1 : STD_LOGIC_VECTOR(4 downto 0);
signal arraylrhls_stubMap_data_first_din0, arraylrhls_stubMap_data_first_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_first_dout0, arraylrhls_stubMap_data_first_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_first_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_first_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_first is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_size_s_ce0, arraylrhls_stubMap_data_second_size_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_size_s_we0, arraylrhls_stubMap_data_second_size_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_size_s_address0, arraylrhls_stubMap_data_second_size_s_address1 : STD_LOGIC_VECTOR(4 downto 0);
signal arraylrhls_stubMap_data_second_size_s_din0, arraylrhls_stubMap_data_second_size_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_size_s_dout0, arraylrhls_stubMap_data_second_size_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_size_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_size_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_size_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0, arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0, arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_din0, arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_barrel_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_psModule_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0, arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0, arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0, arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_din0, arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_dout0, arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_layerId_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_r_s_ce0, arraylrhls_stubMap_data_second_data_r_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_r_s_we0, arraylrhls_stubMap_data_second_data_r_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_r_s_address0, arraylrhls_stubMap_data_second_data_r_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_r_s_din0, arraylrhls_stubMap_data_second_data_r_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_r_s_dout0, arraylrhls_stubMap_data_second_data_r_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_r_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_r_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_r_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_phi_s_ce0, arraylrhls_stubMap_data_second_data_phi_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_phi_s_we0, arraylrhls_stubMap_data_second_data_phi_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_phi_s_address0, arraylrhls_stubMap_data_second_data_phi_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_phi_s_din0, arraylrhls_stubMap_data_second_data_phi_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_phi_s_dout0, arraylrhls_stubMap_data_second_data_phi_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_phi_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_phi_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_phi_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_stubMap_data_second_data_z_s_ce0, arraylrhls_stubMap_data_second_data_z_s_ce1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_z_s_we0, arraylrhls_stubMap_data_second_data_z_s_we1 : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_z_s_address0, arraylrhls_stubMap_data_second_data_z_s_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_stubMap_data_second_data_z_s_din0, arraylrhls_stubMap_data_second_data_z_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_z_s_dout0, arraylrhls_stubMap_data_second_data_z_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_stubMap_data_second_data_z_s_ready : STD_LOGIC;
signal arraylrhls_stubMap_data_second_data_z_s_done : STD_LOGIC;

component AESL_automem_lrhls_stubMap_data_second_data_z_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

-- The signal of port lrhls_layerPopulation_size_s_i
shared variable AESL_REG_lrhls_layerPopulation_size_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_layerPopulation_size_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_layerPopulation_size_s_o
shared variable AESL_REG_lrhls_layerPopulation_size_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_layerPopulation_data_first_ce0, arraylrhls_layerPopulation_data_first_ce1 : STD_LOGIC;
signal arraylrhls_layerPopulation_data_first_we0, arraylrhls_layerPopulation_data_first_we1 : STD_LOGIC;
signal arraylrhls_layerPopulation_data_first_address0, arraylrhls_layerPopulation_data_first_address1 : STD_LOGIC_VECTOR(4 downto 0);
signal arraylrhls_layerPopulation_data_first_din0, arraylrhls_layerPopulation_data_first_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_layerPopulation_data_first_dout0, arraylrhls_layerPopulation_data_first_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_layerPopulation_data_first_ready : STD_LOGIC;
signal arraylrhls_layerPopulation_data_first_done : STD_LOGIC;

component AESL_automem_lrhls_layerPopulation_data_first is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_layerPopulation_data_second_ce0, arraylrhls_layerPopulation_data_second_ce1 : STD_LOGIC;
signal arraylrhls_layerPopulation_data_second_we0, arraylrhls_layerPopulation_data_second_we1 : STD_LOGIC;
signal arraylrhls_layerPopulation_data_second_address0, arraylrhls_layerPopulation_data_second_address1 : STD_LOGIC_VECTOR(4 downto 0);
signal arraylrhls_layerPopulation_data_second_din0, arraylrhls_layerPopulation_data_second_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_layerPopulation_data_second_dout0, arraylrhls_layerPopulation_data_second_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_layerPopulation_data_second_ready : STD_LOGIC;
signal arraylrhls_layerPopulation_data_second_done : STD_LOGIC;

component AESL_automem_lrhls_layerPopulation_data_second is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

shared variable AESL_REG_lrhls_residuals_size_s_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_residuals_size_s
shared variable AESL_REG_lrhls_residuals_size_s : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
signal arraylrhls_residuals_data_first_ce0, arraylrhls_residuals_data_first_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_first_we0, arraylrhls_residuals_data_first_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_first_address0, arraylrhls_residuals_data_first_address1 : STD_LOGIC_VECTOR(4 downto 0);
signal arraylrhls_residuals_data_first_din0, arraylrhls_residuals_data_first_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_first_dout0, arraylrhls_residuals_data_first_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_first_ready : STD_LOGIC;
signal arraylrhls_residuals_data_first_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_first is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_residuals_data_second_size_s_ce0, arraylrhls_residuals_data_second_size_s_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_size_s_we0, arraylrhls_residuals_data_second_size_s_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_size_s_address0, arraylrhls_residuals_data_second_size_s_address1 : STD_LOGIC_VECTOR(4 downto 0);
signal arraylrhls_residuals_data_second_size_s_din0, arraylrhls_residuals_data_second_size_s_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_size_s_dout0, arraylrhls_residuals_data_second_size_s_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_size_s_ready : STD_LOGIC;
signal arraylrhls_residuals_data_second_size_s_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_second_size_s is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_residuals_data_second_data_phi_ce0, arraylrhls_residuals_data_second_data_phi_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_phi_we0, arraylrhls_residuals_data_second_data_phi_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_phi_address0, arraylrhls_residuals_data_second_data_phi_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_residuals_data_second_data_phi_din0, arraylrhls_residuals_data_second_data_phi_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_phi_dout0, arraylrhls_residuals_data_second_data_phi_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_phi_ready : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_phi_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_second_data_phi is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_residuals_data_second_data_z_ce0, arraylrhls_residuals_data_second_data_z_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_z_we0, arraylrhls_residuals_data_second_data_z_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_z_address0, arraylrhls_residuals_data_second_data_z_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_residuals_data_second_data_z_din0, arraylrhls_residuals_data_second_data_z_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_z_dout0, arraylrhls_residuals_data_second_data_z_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_z_ready : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_z_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_second_data_z is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_residuals_data_second_data_layerId_ce0, arraylrhls_residuals_data_second_data_layerId_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_layerId_we0, arraylrhls_residuals_data_second_data_layerId_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_layerId_address0, arraylrhls_residuals_data_second_data_layerId_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_residuals_data_second_data_layerId_din0, arraylrhls_residuals_data_second_data_layerId_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_layerId_dout0, arraylrhls_residuals_data_second_data_layerId_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_layerId_ready : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_layerId_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_second_data_layerId is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_residuals_data_second_data_stubId_ce0, arraylrhls_residuals_data_second_data_stubId_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_stubId_we0, arraylrhls_residuals_data_second_data_stubId_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_stubId_address0, arraylrhls_residuals_data_second_data_stubId_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_residuals_data_second_data_stubId_din0, arraylrhls_residuals_data_second_data_stubId_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_stubId_dout0, arraylrhls_residuals_data_second_data_stubId_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraylrhls_residuals_data_second_data_stubId_ready : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_stubId_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_second_data_stubId is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylrhls_residuals_data_second_data_ps_ce0, arraylrhls_residuals_data_second_data_ps_ce1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_ps_we0, arraylrhls_residuals_data_second_data_ps_we1 : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_ps_address0, arraylrhls_residuals_data_second_data_ps_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraylrhls_residuals_data_second_data_ps_din0, arraylrhls_residuals_data_second_data_ps_din1 : STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_residuals_data_second_data_ps_dout0, arraylrhls_residuals_data_second_data_ps_dout1 :  STD_LOGIC_VECTOR(0 downto 0);
signal arraylrhls_residuals_data_second_data_ps_ready : STD_LOGIC;
signal arraylrhls_residuals_data_second_data_ps_done : STD_LOGIC;

component AESL_automem_lrhls_residuals_data_second_data_ps is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

shared variable AESL_REG_lrhls_largestResid_phi_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_largestResid_phi
shared variable AESL_REG_lrhls_largestResid_phi : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_largestResid_z_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_largestResid_z
shared variable AESL_REG_lrhls_largestResid_z : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_largestResid_layerId_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_largestResid_layerId
shared variable AESL_REG_lrhls_largestResid_layerId : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_largestResid_stubId_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_largestResid_stubId
shared variable AESL_REG_lrhls_largestResid_stubId : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_largestResid_ps_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_largestResid_ps
shared variable AESL_REG_lrhls_largestResid_ps : STD_LOGIC_VECTOR(0 downto 0) := (others => '0');
-- The signal of port lrhls_nIterations_s_i
shared variable AESL_REG_lrhls_nIterations_s_i : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
shared variable AESL_REG_lrhls_nIterations_s_o_ap_vld : STD_LOGIC := '0';
-- The signal of port lrhls_nIterations_s_o
shared variable AESL_REG_lrhls_nIterations_s_o : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
      procedure esl_read_token (file textfile: TEXT; textline: inout LINE; token: out STRING; token_len: out INTEGER) is
          variable whitespace : CHARACTER;
          variable i : INTEGER;
          variable ok: BOOLEAN;
          variable buff: STRING(1 to token'length);
      begin
          ok := false;
          i := 1;
          loop_main: while not endfile(textfile) loop
              if textline = null or textline'length = 0 then
                  readline(textfile, textline);
              end if;
              loop_remove_whitespace: while textline'length > 0 loop
                  if textline(textline'left) = ' ' or
                      textline(textline'left) = HT or
                      textline(textline'left) = CR or
                      textline(textline'left) = LF then
                      read(textline, whitespace);
                  else
                      exit loop_remove_whitespace;
                  end if;
              end loop;
              loop_aesl_read_token: while textline'length > 0 and i <= buff'length loop
                  if textline(textline'left) = ' ' or
                     textline(textline'left) = HT or
                     textline(textline'left) = CR or
                     textline(textline'left) = LF then
                      exit loop_aesl_read_token;
                  else
                      read(textline, buff(i));
                      i := i + 1;
                  end if;
                  ok := true;
              end loop;
              if ok = true then
                  exit loop_main;
              end if;
          end loop;
          buff(i) := ' ';
          token := buff;
          token_len:= i-1;
      end procedure esl_read_token;

      procedure esl_read_token (file textfile: TEXT;
                                textline: inout LINE;
                                token: out STRING) is
          variable i : INTEGER;
      begin
          esl_read_token (textfile, textline, token, i);
      end procedure esl_read_token;

      function esl_str2lv_hex (RHS : STRING; data_width : INTEGER) return STD_LOGIC_VECTOR is
          variable	ret	:   STD_LOGIC_VECTOR(data_width - 1 downto 0);
          variable	idx	:   integer := 3;
      begin
          ret := (others => '0');
          if(RHS(1) /= '0' and (RHS(2) /= 'x' or RHS(2) /= 'X')) then
     	        report "Error! The format of hex number is not initialed by 0x";
          end if;
          while true loop
              if (data_width > 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := ret(data_width - 5 downto 0) & "0000";
     	                when '1'    =>  ret := ret(data_width - 5 downto 0) & "0001";
                      when '2'    =>  ret := ret(data_width - 5 downto 0) & "0010";
                      when '3'    =>  ret := ret(data_width - 5 downto 0) & "0011";
                      when '4'    =>  ret := ret(data_width - 5 downto 0) & "0100";
                      when '5'    =>  ret := ret(data_width - 5 downto 0) & "0101";
                      when '6'    =>  ret := ret(data_width - 5 downto 0) & "0110";
                      when '7'    =>  ret := ret(data_width - 5 downto 0) & "0111";
                      when '8'    =>  ret := ret(data_width - 5 downto 0) & "1000";
                      when '9'    =>  ret := ret(data_width - 5 downto 0) & "1001";
                      when 'a' | 'A'  =>  ret := ret(data_width - 5 downto 0) & "1010";
                      when 'b' | 'B'  =>  ret := ret(data_width - 5 downto 0) & "1011";
                      when 'c' | 'C'  =>  ret := ret(data_width - 5 downto 0) & "1100";
                      when 'd' | 'D'  =>  ret := ret(data_width - 5 downto 0) & "1101";
                      when 'e' | 'E'  =>  ret := ret(data_width - 5 downto 0) & "1110";
                      when 'f' | 'F'  =>  ret := ret(data_width - 5 downto 0) & "1111";
                      when 'x' | 'X'  =>  ret := ret(data_width - 5 downto 0) & "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0000";
     	                when '1'    =>  ret := "0001";
                      when '2'    =>  ret := "0010";
                      when '3'    =>  ret := "0011";
                      when '4'    =>  ret := "0100";
                      when '5'    =>  ret := "0101";
                      when '6'    =>  ret := "0110";
                      when '7'    =>  ret := "0111";
                      when '8'    =>  ret := "1000";
                      when '9'    =>  ret := "1001";
                      when 'a' | 'A'  =>  ret := "1010";
                      when 'b' | 'B'  =>  ret := "1011";
                      when 'c' | 'C'  =>  ret := "1100";
                      when 'd' | 'D'  =>  ret := "1101";
                      when 'e' | 'E'  =>  ret := "1110";
                      when 'f' | 'F'  =>  ret := "1111";
                      when 'x' | 'X'  =>  ret := "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 3) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "000";
     	                when '1'    =>  ret := "001";
                      when '2'    =>  ret := "010";
                      when '3'    =>  ret := "011";
                      when '4'    =>  ret := "100";
                      when '5'    =>  ret := "101";
                      when '6'    =>  ret := "110";
                      when '7'    =>  ret := "111";
                      when 'x' | 'X'  =>  ret := "XXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 2) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "00";
     	                when '1'    =>  ret := "01";
                      when '2'    =>  ret := "10";
                      when '3'    =>  ret := "11";
                      when 'x' | 'X'  =>  ret := "XX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 1) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0";
     	                when '1'    =>  ret := "1";
                      when 'x' | 'X'  =>  ret := "X";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              else
                  report string'("Wrong data_width.");
                  return ret;
              end if;
              idx := idx + 1;
          end loop;
          return ret;
      end function;

    function esl_str_dec2int (RHS : STRING) return INTEGER is
        variable	ret	:   integer;
        variable	idx	:   integer := 1;
    begin
        ret := 0;
        while true loop
            case RHS(idx)  is
                when '0'    =>  ret := ret * 10 + 0;
                when '1'    =>  ret := ret * 10 + 1;
                when '2'    =>  ret := ret * 10 + 2;
                when '3'    =>  ret := ret * 10 + 3;
                when '4'    =>  ret := ret * 10 + 4;
                when '5'    =>  ret := ret * 10 + 5;
                when '6'    =>  ret := ret * 10 + 6;
                when '7'    =>  ret := ret * 10 + 7;
                when '8'    =>  ret := ret * 10 + 8;
                when '9'    =>  ret := ret * 10 + 9;
                when ' '    =>  return ret;
                when others    =>  report "Wrong dec char " & RHS(idx);	return ret;
            end case;
            idx := idx + 1;
        end loop;
        return ret;
    end esl_str_dec2int;
      function esl_conv_string_hex (lv : STD_LOGIC_VECTOR) return STRING is
          constant str_len : integer := (lv'length + 3)/4;
          variable ret : STRING (1 to str_len);
          variable i, tmp: INTEGER;
          variable normal_lv : STD_LOGIC_VECTOR(lv'length - 1 downto 0);
          variable tmp_lv : STD_LOGIC_VECTOR(3 downto 0);
      begin
          normal_lv := lv;
          for i in 1 to str_len loop
              if(i = 1) then
                  if((lv'length mod 4) = 3) then
                      tmp_lv(2 downto 0) := normal_lv(lv'length - 1 downto lv'length - 3);
                      case tmp_lv(2 downto 0) is
                          when "000" => ret(i) := '0';
                          when "001" => ret(i) := '1';
                          when "010" => ret(i) := '2';
                          when "011" => ret(i) := '3';
                          when "100" => ret(i) := '4';
                          when "101" => ret(i) := '5';
                          when "110" => ret(i) := '6';
                          when "111" => ret(i) := '7';
                          when others  => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 2) then
                      tmp_lv(1 downto 0) := normal_lv(lv'length - 1 downto lv'length - 2);
                      case tmp_lv(1 downto 0) is
                          when "00" => ret(i) := '0';
                          when "01" => ret(i) := '1';
                          when "10" => ret(i) := '2';
                          when "11" => ret(i) := '3';
                          when others => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 1) then
                      tmp_lv(0 downto 0) := normal_lv(lv'length - 1 downto lv'length - 1);
                      case tmp_lv(0 downto 0) is
                          when "0" => ret(i) := '0';
                          when "1" => ret(i) := '1';
                          when others=> ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 0) then
                      tmp_lv(3 downto 0) := normal_lv(lv'length - 1 downto lv'length - 4);
                      case tmp_lv(3 downto 0) is
                          when "0000" => ret(i) := '0';
                          when "0001" => ret(i) := '1';
                          when "0010" => ret(i) := '2';
                          when "0011" => ret(i) := '3';
                          when "0100" => ret(i) := '4';
                          when "0101" => ret(i) := '5';
                          when "0110" => ret(i) := '6';
                          when "0111" => ret(i) := '7';
                          when "1000" => ret(i) := '8';
                          when "1001" => ret(i) := '9';
                          when "1010" => ret(i) := 'a';
                          when "1011" => ret(i) := 'b';
                          when "1100" => ret(i) := 'c';
                          when "1101" => ret(i) := 'd';
                          when "1110" => ret(i) := 'e';
                          when "1111" => ret(i) := 'f';
                          when others   => ret(i) := 'X';
                      end case;
                  end if;
              else
                  tmp_lv(3 downto 0) := normal_lv((str_len - i) * 4 + 3 downto (str_len - i) * 4);
                  case tmp_lv(3 downto 0) is
                      when "0000" => ret(i) := '0';
                      when "0001" => ret(i) := '1';
                      when "0010" => ret(i) := '2';
                      when "0011" => ret(i) := '3';
                      when "0100" => ret(i) := '4';
                      when "0101" => ret(i) := '5';
                      when "0110" => ret(i) := '6';
                      when "0111" => ret(i) := '7';
                      when "1000" => ret(i) := '8';
                      when "1001" => ret(i) := '9';
                      when "1010" => ret(i) := 'a';
                      when "1011" => ret(i) := 'b';
                      when "1100" => ret(i) := 'c';
                      when "1101" => ret(i) := 'd';
                      when "1110" => ret(i) := 'e';
                      when "1111" => ret(i) := 'f';
                      when others   => ret(i) := 'X';
                  end case;
              end if;
          end loop;
          return ret;
      end function;

  -- purpose: initialise the random state variable based on an integer seed
  function init_rand(seed : integer) return T_RANDINT is
    variable result : T_RANDINT;
  begin
    -- If the seed is smaller than the minimum value of the random state variable, use the minimum value
    if seed < T_RANDINT'low then
      result := T_RANDINT'low;
      -- If the seed is larger than the maximum value of the random state variable, use the maximum value
    elsif seed > T_RANDINT'high then
      result := T_RANDINT'high;
      -- If the seed is within the range of the random state variable, just use the seed
    else
      result := seed;
    end if;
    -- Return the result
    return result;
  end init_rand;


  -- purpose: generate a random integer between min and max limits
  procedure rand_int(variable rand   : inout T_RANDINT;
                     constant minval : in    integer;
                     constant maxval : in    integer;
                     variable result : out   integer
                     ) is

    variable k, q      : integer;
    variable real_rand : real;
    variable res       : integer;

  begin
    -- Create a new random integer in the range 1 to 2**31-1 and put it back into rand VARIABLE
    -- Based on an example from Numerical Recipes in C, 2nd Edition, page 279
    k   := rand/127773;
    q   := 16807*(rand-k*127773)-2836*k;
    if q < 0 then
      q := q + 2147483647;
    end if;
    rand := init_rand(q);

    -- Convert this integer to a real number in the range 0 to 1
    real_rand := (real(rand - T_RANDINT'low)) / real(T_RANDINT'high - T_RANDINT'low);
    -- Convert this real number to an integer in the range minval to maxval
    -- The +1 and -0.5 are to get equal probability of minval and maxval as other values
    res    := integer((real_rand * real(maxval+1-minval)) - 0.5) + minval;
    -- VHDL real to integer conversion doesn't define what happens for x.5 so deal with this
    if res < minval then
      res  := minval;
    elsif res > maxval then
      res  := maxval;
    end if;
    -- assign output
    result := res;

  end rand_int;

begin
AESL_inst_LR_top    :   LR_top port map (
   ap_clk  =>  ap_clk,
   ap_rst  =>  ap_rst,
   ap_start  =>  ap_start,
   ap_done  =>  ap_done,
   ap_idle  =>  ap_idle,
   ap_ready  =>  ap_ready,
   lrhls_settings_lrNumIterations_s  =>  lrhls_settings_lrNumIterations_s,
   lrhls_settings_lrMinLayers_s  =>  lrhls_settings_lrMinLayers_s,
   lrhls_settings_lrMinLayersPS_s  =>  lrhls_settings_lrMinLayersPS_s,
   lrhls_settings_lrResidPhi_s  =>  lrhls_settings_lrResidPhi_s,
   lrhls_settings_lrResidZ2S_s  =>  lrhls_settings_lrResidZ2S_s,
   lrhls_settings_lrResidZPS_s  =>  lrhls_settings_lrResidZPS_s,
   lrhls_settings_chosenRofPhi_s  =>  lrhls_settings_chosenRofPhi_s,
   lrhls_settings_chosenRofZ_s  =>  lrhls_settings_chosenRofZ_s,
   lrhls_settings_invPtToDphi_s  =>  lrhls_settings_invPtToDphi_s,
   lrhls_settings_trackerNumLayers_s  =>  lrhls_settings_trackerNumLayers_s,
   lrhls_data_settingsHLS_lrNumIterations_s  =>  lrhls_data_settingsHLS_lrNumIterations_s,
   lrhls_data_settingsHLS_lrMinLayers_s  =>  lrhls_data_settingsHLS_lrMinLayers_s,
   lrhls_data_settingsHLS_lrMinLayersPS_s  =>  lrhls_data_settingsHLS_lrMinLayersPS_s,
   lrhls_data_settingsHLS_lrResidPhi_s  =>  lrhls_data_settingsHLS_lrResidPhi_s,
   lrhls_data_settingsHLS_lrResidZ2S_s  =>  lrhls_data_settingsHLS_lrResidZ2S_s,
   lrhls_data_settingsHLS_lrResidZPS_s  =>  lrhls_data_settingsHLS_lrResidZPS_s,
   lrhls_data_settingsHLS_chosenRofPhi_s  =>  lrhls_data_settingsHLS_chosenRofPhi_s,
   lrhls_data_settingsHLS_chosenRofZ_s  =>  lrhls_data_settingsHLS_chosenRofZ_s,
   lrhls_data_settingsHLS_invPtToDphi_s  =>  lrhls_data_settingsHLS_invPtToDphi_s,
   lrhls_data_settingsHLS_trackerNumLayers_s  =>  lrhls_data_settingsHLS_trackerNumLayers_s,
   lrhls_data_tracksMHTHLS_size_s  =>  lrhls_data_tracksMHTHLS_size_s,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q0  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q0,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1,
   lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q1  =>  lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q1,
   lrhls_data_tracksMHTHLS_data_secEta_s_address0  =>  lrhls_data_tracksMHTHLS_data_secEta_s_address0,
   lrhls_data_tracksMHTHLS_data_secEta_s_ce0  =>  lrhls_data_tracksMHTHLS_data_secEta_s_ce0,
   lrhls_data_tracksMHTHLS_data_secEta_s_q0  =>  lrhls_data_tracksMHTHLS_data_secEta_s_q0,
   lrhls_data_tracksMHTHLS_data_secEta_s_address1  =>  lrhls_data_tracksMHTHLS_data_secEta_s_address1,
   lrhls_data_tracksMHTHLS_data_secEta_s_ce1  =>  lrhls_data_tracksMHTHLS_data_secEta_s_ce1,
   lrhls_data_tracksMHTHLS_data_secEta_s_q1  =>  lrhls_data_tracksMHTHLS_data_secEta_s_q1,
   lrhls_data_tracksMHTHLS_data_secPhi_s_address0  =>  lrhls_data_tracksMHTHLS_data_secPhi_s_address0,
   lrhls_data_tracksMHTHLS_data_secPhi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_secPhi_s_ce0,
   lrhls_data_tracksMHTHLS_data_secPhi_s_q0  =>  lrhls_data_tracksMHTHLS_data_secPhi_s_q0,
   lrhls_data_tracksMHTHLS_data_secPhi_s_address1  =>  lrhls_data_tracksMHTHLS_data_secPhi_s_address1,
   lrhls_data_tracksMHTHLS_data_secPhi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_secPhi_s_ce1,
   lrhls_data_tracksMHTHLS_data_secPhi_s_q1  =>  lrhls_data_tracksMHTHLS_data_secPhi_s_q1,
   lrhls_data_tracksMHTHLS_data_qOverPt_s_address0  =>  lrhls_data_tracksMHTHLS_data_qOverPt_s_address0,
   lrhls_data_tracksMHTHLS_data_qOverPt_s_ce0  =>  lrhls_data_tracksMHTHLS_data_qOverPt_s_ce0,
   lrhls_data_tracksMHTHLS_data_qOverPt_s_q0  =>  lrhls_data_tracksMHTHLS_data_qOverPt_s_q0,
   lrhls_data_tracksMHTHLS_data_qOverPt_s_address1  =>  lrhls_data_tracksMHTHLS_data_qOverPt_s_address1,
   lrhls_data_tracksMHTHLS_data_qOverPt_s_ce1  =>  lrhls_data_tracksMHTHLS_data_qOverPt_s_ce1,
   lrhls_data_tracksMHTHLS_data_qOverPt_s_q1  =>  lrhls_data_tracksMHTHLS_data_qOverPt_s_q1,
   lrhls_data_tracksMHTHLS_data_phi_s_address0  =>  lrhls_data_tracksMHTHLS_data_phi_s_address0,
   lrhls_data_tracksMHTHLS_data_phi_s_ce0  =>  lrhls_data_tracksMHTHLS_data_phi_s_ce0,
   lrhls_data_tracksMHTHLS_data_phi_s_q0  =>  lrhls_data_tracksMHTHLS_data_phi_s_q0,
   lrhls_data_tracksMHTHLS_data_phi_s_address1  =>  lrhls_data_tracksMHTHLS_data_phi_s_address1,
   lrhls_data_tracksMHTHLS_data_phi_s_ce1  =>  lrhls_data_tracksMHTHLS_data_phi_s_ce1,
   lrhls_data_tracksMHTHLS_data_phi_s_q1  =>  lrhls_data_tracksMHTHLS_data_phi_s_q1,
   lrhls_data_tracksMHTHLS_data_z_s_address0  =>  lrhls_data_tracksMHTHLS_data_z_s_address0,
   lrhls_data_tracksMHTHLS_data_z_s_ce0  =>  lrhls_data_tracksMHTHLS_data_z_s_ce0,
   lrhls_data_tracksMHTHLS_data_z_s_q0  =>  lrhls_data_tracksMHTHLS_data_z_s_q0,
   lrhls_data_tracksMHTHLS_data_z_s_address1  =>  lrhls_data_tracksMHTHLS_data_z_s_address1,
   lrhls_data_tracksMHTHLS_data_z_s_ce1  =>  lrhls_data_tracksMHTHLS_data_z_s_ce1,
   lrhls_data_tracksMHTHLS_data_z_s_q1  =>  lrhls_data_tracksMHTHLS_data_z_s_q1,
   lrhls_data_tracksMHTHLS_data_cot_s_address0  =>  lrhls_data_tracksMHTHLS_data_cot_s_address0,
   lrhls_data_tracksMHTHLS_data_cot_s_ce0  =>  lrhls_data_tracksMHTHLS_data_cot_s_ce0,
   lrhls_data_tracksMHTHLS_data_cot_s_q0  =>  lrhls_data_tracksMHTHLS_data_cot_s_q0,
   lrhls_data_tracksMHTHLS_data_cot_s_address1  =>  lrhls_data_tracksMHTHLS_data_cot_s_address1,
   lrhls_data_tracksMHTHLS_data_cot_s_ce1  =>  lrhls_data_tracksMHTHLS_data_cot_s_ce1,
   lrhls_data_tracksMHTHLS_data_cot_s_q1  =>  lrhls_data_tracksMHTHLS_data_cot_s_q1,
   lrhls_data_tracksLRHLS_size_s  =>  lrhls_data_tracksLRHLS_size_s,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q1,
   lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q0  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q0,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1,
   lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q1  =>  lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q1,
   lrhls_data_tracksLRHLS_data_secEta_s_address0  =>  lrhls_data_tracksLRHLS_data_secEta_s_address0,
   lrhls_data_tracksLRHLS_data_secEta_s_ce0  =>  lrhls_data_tracksLRHLS_data_secEta_s_ce0,
   lrhls_data_tracksLRHLS_data_secEta_s_q0  =>  lrhls_data_tracksLRHLS_data_secEta_s_q0,
   lrhls_data_tracksLRHLS_data_secEta_s_address1  =>  lrhls_data_tracksLRHLS_data_secEta_s_address1,
   lrhls_data_tracksLRHLS_data_secEta_s_ce1  =>  lrhls_data_tracksLRHLS_data_secEta_s_ce1,
   lrhls_data_tracksLRHLS_data_secEta_s_q1  =>  lrhls_data_tracksLRHLS_data_secEta_s_q1,
   lrhls_data_tracksLRHLS_data_secPhi_s_address0  =>  lrhls_data_tracksLRHLS_data_secPhi_s_address0,
   lrhls_data_tracksLRHLS_data_secPhi_s_ce0  =>  lrhls_data_tracksLRHLS_data_secPhi_s_ce0,
   lrhls_data_tracksLRHLS_data_secPhi_s_q0  =>  lrhls_data_tracksLRHLS_data_secPhi_s_q0,
   lrhls_data_tracksLRHLS_data_secPhi_s_address1  =>  lrhls_data_tracksLRHLS_data_secPhi_s_address1,
   lrhls_data_tracksLRHLS_data_secPhi_s_ce1  =>  lrhls_data_tracksLRHLS_data_secPhi_s_ce1,
   lrhls_data_tracksLRHLS_data_secPhi_s_q1  =>  lrhls_data_tracksLRHLS_data_secPhi_s_q1,
   lrhls_data_tracksLRHLS_data_qOverPt_s_address0  =>  lrhls_data_tracksLRHLS_data_qOverPt_s_address0,
   lrhls_data_tracksLRHLS_data_qOverPt_s_ce0  =>  lrhls_data_tracksLRHLS_data_qOverPt_s_ce0,
   lrhls_data_tracksLRHLS_data_qOverPt_s_q0  =>  lrhls_data_tracksLRHLS_data_qOverPt_s_q0,
   lrhls_data_tracksLRHLS_data_qOverPt_s_address1  =>  lrhls_data_tracksLRHLS_data_qOverPt_s_address1,
   lrhls_data_tracksLRHLS_data_qOverPt_s_ce1  =>  lrhls_data_tracksLRHLS_data_qOverPt_s_ce1,
   lrhls_data_tracksLRHLS_data_qOverPt_s_q1  =>  lrhls_data_tracksLRHLS_data_qOverPt_s_q1,
   lrhls_data_tracksLRHLS_data_phi_s_address0  =>  lrhls_data_tracksLRHLS_data_phi_s_address0,
   lrhls_data_tracksLRHLS_data_phi_s_ce0  =>  lrhls_data_tracksLRHLS_data_phi_s_ce0,
   lrhls_data_tracksLRHLS_data_phi_s_q0  =>  lrhls_data_tracksLRHLS_data_phi_s_q0,
   lrhls_data_tracksLRHLS_data_phi_s_address1  =>  lrhls_data_tracksLRHLS_data_phi_s_address1,
   lrhls_data_tracksLRHLS_data_phi_s_ce1  =>  lrhls_data_tracksLRHLS_data_phi_s_ce1,
   lrhls_data_tracksLRHLS_data_phi_s_q1  =>  lrhls_data_tracksLRHLS_data_phi_s_q1,
   lrhls_data_tracksLRHLS_data_z_s_address0  =>  lrhls_data_tracksLRHLS_data_z_s_address0,
   lrhls_data_tracksLRHLS_data_z_s_ce0  =>  lrhls_data_tracksLRHLS_data_z_s_ce0,
   lrhls_data_tracksLRHLS_data_z_s_q0  =>  lrhls_data_tracksLRHLS_data_z_s_q0,
   lrhls_data_tracksLRHLS_data_z_s_address1  =>  lrhls_data_tracksLRHLS_data_z_s_address1,
   lrhls_data_tracksLRHLS_data_z_s_ce1  =>  lrhls_data_tracksLRHLS_data_z_s_ce1,
   lrhls_data_tracksLRHLS_data_z_s_q1  =>  lrhls_data_tracksLRHLS_data_z_s_q1,
   lrhls_data_tracksLRHLS_data_cot_s_address0  =>  lrhls_data_tracksLRHLS_data_cot_s_address0,
   lrhls_data_tracksLRHLS_data_cot_s_ce0  =>  lrhls_data_tracksLRHLS_data_cot_s_ce0,
   lrhls_data_tracksLRHLS_data_cot_s_q0  =>  lrhls_data_tracksLRHLS_data_cot_s_q0,
   lrhls_data_tracksLRHLS_data_cot_s_address1  =>  lrhls_data_tracksLRHLS_data_cot_s_address1,
   lrhls_data_tracksLRHLS_data_cot_s_ce1  =>  lrhls_data_tracksLRHLS_data_cot_s_ce1,
   lrhls_data_tracksLRHLS_data_cot_s_q1  =>  lrhls_data_tracksLRHLS_data_cot_s_q1,
   lrhls_numLayers_s  =>  lrhls_numLayers_s,
   lrhls_minLayers_s  =>  lrhls_minLayers_s,
   lrhls_minLayersPS_s  =>  lrhls_minLayersPS_s,
   lrhls_residPhi_s  =>  lrhls_residPhi_s,
   lrhls_residZ2S_s  =>  lrhls_residZ2S_s,
   lrhls_residZPS_s  =>  lrhls_residZPS_s,
   lrhls_maxIteartions_s  =>  lrhls_maxIteartions_s,
   lrhls_track_settingsHLS_lrNumIterations_s_i  =>  lrhls_track_settingsHLS_lrNumIterations_s_i,
   lrhls_track_settingsHLS_lrNumIterations_s_o  =>  lrhls_track_settingsHLS_lrNumIterations_s_o,
   lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld  =>  lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld,
   lrhls_track_settingsHLS_lrMinLayers_s_i  =>  lrhls_track_settingsHLS_lrMinLayers_s_i,
   lrhls_track_settingsHLS_lrMinLayers_s_o  =>  lrhls_track_settingsHLS_lrMinLayers_s_o,
   lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld  =>  lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld,
   lrhls_track_settingsHLS_lrMinLayersPS_s_i  =>  lrhls_track_settingsHLS_lrMinLayersPS_s_i,
   lrhls_track_settingsHLS_lrMinLayersPS_s_o  =>  lrhls_track_settingsHLS_lrMinLayersPS_s_o,
   lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld  =>  lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld,
   lrhls_track_settingsHLS_lrResidPhi_s_i  =>  lrhls_track_settingsHLS_lrResidPhi_s_i,
   lrhls_track_settingsHLS_lrResidPhi_s_o  =>  lrhls_track_settingsHLS_lrResidPhi_s_o,
   lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld  =>  lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld,
   lrhls_track_settingsHLS_lrResidZ2S_s_i  =>  lrhls_track_settingsHLS_lrResidZ2S_s_i,
   lrhls_track_settingsHLS_lrResidZ2S_s_o  =>  lrhls_track_settingsHLS_lrResidZ2S_s_o,
   lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld  =>  lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld,
   lrhls_track_settingsHLS_lrResidZPS_s_i  =>  lrhls_track_settingsHLS_lrResidZPS_s_i,
   lrhls_track_settingsHLS_lrResidZPS_s_o  =>  lrhls_track_settingsHLS_lrResidZPS_s_o,
   lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld  =>  lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld,
   lrhls_track_settingsHLS_chosenRofPhi_s_i  =>  lrhls_track_settingsHLS_chosenRofPhi_s_i,
   lrhls_track_settingsHLS_chosenRofPhi_s_o  =>  lrhls_track_settingsHLS_chosenRofPhi_s_o,
   lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld  =>  lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld,
   lrhls_track_settingsHLS_chosenRofZ_s_i  =>  lrhls_track_settingsHLS_chosenRofZ_s_i,
   lrhls_track_settingsHLS_chosenRofZ_s_o  =>  lrhls_track_settingsHLS_chosenRofZ_s_o,
   lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld  =>  lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld,
   lrhls_track_settingsHLS_invPtToDphi_s_i  =>  lrhls_track_settingsHLS_invPtToDphi_s_i,
   lrhls_track_settingsHLS_invPtToDphi_s_o  =>  lrhls_track_settingsHLS_invPtToDphi_s_o,
   lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld  =>  lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld,
   lrhls_track_settingsHLS_trackerNumLayers_s_i  =>  lrhls_track_settingsHLS_trackerNumLayers_s_i,
   lrhls_track_settingsHLS_trackerNumLayers_s_o  =>  lrhls_track_settingsHLS_trackerNumLayers_s_o,
   lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld  =>  lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld,
   lrhls_track_stubsHLS_size_s_i  =>  lrhls_track_stubsHLS_size_s_i,
   lrhls_track_stubsHLS_size_s_o  =>  lrhls_track_stubsHLS_size_s_o,
   lrhls_track_stubsHLS_size_s_o_ap_vld  =>  lrhls_track_stubsHLS_size_s_o_ap_vld,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q1,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d0  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d0,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d1  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d1,
   lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q1,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d0  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d0,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q0  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q0,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d1  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d1,
   lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q1  =>  lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q1,
   lrhls_track_stubsHLS_data_r_s_address0  =>  lrhls_track_stubsHLS_data_r_s_address0,
   lrhls_track_stubsHLS_data_r_s_ce0  =>  lrhls_track_stubsHLS_data_r_s_ce0,
   lrhls_track_stubsHLS_data_r_s_we0  =>  lrhls_track_stubsHLS_data_r_s_we0,
   lrhls_track_stubsHLS_data_r_s_d0  =>  lrhls_track_stubsHLS_data_r_s_d0,
   lrhls_track_stubsHLS_data_r_s_q0  =>  lrhls_track_stubsHLS_data_r_s_q0,
   lrhls_track_stubsHLS_data_r_s_address1  =>  lrhls_track_stubsHLS_data_r_s_address1,
   lrhls_track_stubsHLS_data_r_s_ce1  =>  lrhls_track_stubsHLS_data_r_s_ce1,
   lrhls_track_stubsHLS_data_r_s_we1  =>  lrhls_track_stubsHLS_data_r_s_we1,
   lrhls_track_stubsHLS_data_r_s_d1  =>  lrhls_track_stubsHLS_data_r_s_d1,
   lrhls_track_stubsHLS_data_r_s_q1  =>  lrhls_track_stubsHLS_data_r_s_q1,
   lrhls_track_stubsHLS_data_phi_s_address0  =>  lrhls_track_stubsHLS_data_phi_s_address0,
   lrhls_track_stubsHLS_data_phi_s_ce0  =>  lrhls_track_stubsHLS_data_phi_s_ce0,
   lrhls_track_stubsHLS_data_phi_s_we0  =>  lrhls_track_stubsHLS_data_phi_s_we0,
   lrhls_track_stubsHLS_data_phi_s_d0  =>  lrhls_track_stubsHLS_data_phi_s_d0,
   lrhls_track_stubsHLS_data_phi_s_q0  =>  lrhls_track_stubsHLS_data_phi_s_q0,
   lrhls_track_stubsHLS_data_phi_s_address1  =>  lrhls_track_stubsHLS_data_phi_s_address1,
   lrhls_track_stubsHLS_data_phi_s_ce1  =>  lrhls_track_stubsHLS_data_phi_s_ce1,
   lrhls_track_stubsHLS_data_phi_s_we1  =>  lrhls_track_stubsHLS_data_phi_s_we1,
   lrhls_track_stubsHLS_data_phi_s_d1  =>  lrhls_track_stubsHLS_data_phi_s_d1,
   lrhls_track_stubsHLS_data_phi_s_q1  =>  lrhls_track_stubsHLS_data_phi_s_q1,
   lrhls_track_stubsHLS_data_z_s_address0  =>  lrhls_track_stubsHLS_data_z_s_address0,
   lrhls_track_stubsHLS_data_z_s_ce0  =>  lrhls_track_stubsHLS_data_z_s_ce0,
   lrhls_track_stubsHLS_data_z_s_we0  =>  lrhls_track_stubsHLS_data_z_s_we0,
   lrhls_track_stubsHLS_data_z_s_d0  =>  lrhls_track_stubsHLS_data_z_s_d0,
   lrhls_track_stubsHLS_data_z_s_q0  =>  lrhls_track_stubsHLS_data_z_s_q0,
   lrhls_track_stubsHLS_data_z_s_address1  =>  lrhls_track_stubsHLS_data_z_s_address1,
   lrhls_track_stubsHLS_data_z_s_ce1  =>  lrhls_track_stubsHLS_data_z_s_ce1,
   lrhls_track_stubsHLS_data_z_s_we1  =>  lrhls_track_stubsHLS_data_z_s_we1,
   lrhls_track_stubsHLS_data_z_s_d1  =>  lrhls_track_stubsHLS_data_z_s_d1,
   lrhls_track_stubsHLS_data_z_s_q1  =>  lrhls_track_stubsHLS_data_z_s_q1,
   lrhls_track_secEta_s_i  =>  lrhls_track_secEta_s_i,
   lrhls_track_secEta_s_o  =>  lrhls_track_secEta_s_o,
   lrhls_track_secEta_s_o_ap_vld  =>  lrhls_track_secEta_s_o_ap_vld,
   lrhls_track_secPhi_s_i  =>  lrhls_track_secPhi_s_i,
   lrhls_track_secPhi_s_o  =>  lrhls_track_secPhi_s_o,
   lrhls_track_secPhi_s_o_ap_vld  =>  lrhls_track_secPhi_s_o_ap_vld,
   lrhls_track_qOverPt_s_i  =>  lrhls_track_qOverPt_s_i,
   lrhls_track_qOverPt_s_o  =>  lrhls_track_qOverPt_s_o,
   lrhls_track_qOverPt_s_o_ap_vld  =>  lrhls_track_qOverPt_s_o_ap_vld,
   lrhls_track_phi_s_i  =>  lrhls_track_phi_s_i,
   lrhls_track_phi_s_o  =>  lrhls_track_phi_s_o,
   lrhls_track_phi_s_o_ap_vld  =>  lrhls_track_phi_s_o_ap_vld,
   lrhls_track_z_s_i  =>  lrhls_track_z_s_i,
   lrhls_track_z_s_o  =>  lrhls_track_z_s_o,
   lrhls_track_z_s_o_ap_vld  =>  lrhls_track_z_s_o_ap_vld,
   lrhls_track_cot_s_i  =>  lrhls_track_cot_s_i,
   lrhls_track_cot_s_o  =>  lrhls_track_cot_s_o,
   lrhls_track_cot_s_o_ap_vld  =>  lrhls_track_cot_s_o_ap_vld,
   lrhls_secPhi_s  =>  lrhls_secPhi_s,
   lrhls_secPhi_s_ap_vld  =>  lrhls_secPhi_s_ap_vld,
   lrhls_secEta_s  =>  lrhls_secEta_s,
   lrhls_secEta_s_ap_vld  =>  lrhls_secEta_s_ap_vld,
   lrhls_HTParameter_qOverPt_i  =>  lrhls_HTParameter_qOverPt_i,
   lrhls_HTParameter_qOverPt_o  =>  lrhls_HTParameter_qOverPt_o,
   lrhls_HTParameter_qOverPt_o_ap_vld  =>  lrhls_HTParameter_qOverPt_o_ap_vld,
   lrhls_HTParameter_phiT_i  =>  lrhls_HTParameter_phiT_i,
   lrhls_HTParameter_phiT_o  =>  lrhls_HTParameter_phiT_o,
   lrhls_HTParameter_phiT_o_ap_vld  =>  lrhls_HTParameter_phiT_o_ap_vld,
   lrhls_HTParameter_cotTheta_i  =>  lrhls_HTParameter_cotTheta_i,
   lrhls_HTParameter_cotTheta_o  =>  lrhls_HTParameter_cotTheta_o,
   lrhls_HTParameter_cotTheta_o_ap_vld  =>  lrhls_HTParameter_cotTheta_o_ap_vld,
   lrhls_HTParameter_zT_i  =>  lrhls_HTParameter_zT_i,
   lrhls_HTParameter_zT_o  =>  lrhls_HTParameter_zT_o,
   lrhls_HTParameter_zT_o_ap_vld  =>  lrhls_HTParameter_zT_o_ap_vld,
   lrhls_LRParameter_qOverPt_i  =>  lrhls_LRParameter_qOverPt_i,
   lrhls_LRParameter_qOverPt_o  =>  lrhls_LRParameter_qOverPt_o,
   lrhls_LRParameter_qOverPt_o_ap_vld  =>  lrhls_LRParameter_qOverPt_o_ap_vld,
   lrhls_LRParameter_phiT_i  =>  lrhls_LRParameter_phiT_i,
   lrhls_LRParameter_phiT_o  =>  lrhls_LRParameter_phiT_o,
   lrhls_LRParameter_phiT_o_ap_vld  =>  lrhls_LRParameter_phiT_o_ap_vld,
   lrhls_LRParameter_cotTheta_i  =>  lrhls_LRParameter_cotTheta_i,
   lrhls_LRParameter_cotTheta_o  =>  lrhls_LRParameter_cotTheta_o,
   lrhls_LRParameter_cotTheta_o_ap_vld  =>  lrhls_LRParameter_cotTheta_o_ap_vld,
   lrhls_LRParameter_zT_i  =>  lrhls_LRParameter_zT_i,
   lrhls_LRParameter_zT_o  =>  lrhls_LRParameter_zT_o,
   lrhls_LRParameter_zT_o_ap_vld  =>  lrhls_LRParameter_zT_o_ap_vld,
   lrhls_stubs_size_s_i  =>  lrhls_stubs_size_s_i,
   lrhls_stubs_size_s_o  =>  lrhls_stubs_size_s_o,
   lrhls_stubs_size_s_o_ap_vld  =>  lrhls_stubs_size_s_o_ap_vld,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_we0  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_we0,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_d0  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_d0,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_we1  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_we1,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_d1  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_d1,
   lrhls_stubs_data_settingsHLS_lrNumIterations_s_q1  =>  lrhls_stubs_data_settingsHLS_lrNumIterations_s_q1,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_we0  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_we0,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_d0  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_d0,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_we1  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_we1,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_d1  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_d1,
   lrhls_stubs_data_settingsHLS_lrMinLayers_s_q1  =>  lrhls_stubs_data_settingsHLS_lrMinLayers_s_q1,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d0  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d0,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d1  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d1,
   lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_we0  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_we0,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_d0  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_d0,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_we1  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_we1,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_d1  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_d1,
   lrhls_stubs_data_settingsHLS_lrResidPhi_s_q1  =>  lrhls_stubs_data_settingsHLS_lrResidPhi_s_q1,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d0  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d0,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d1  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d1,
   lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q1,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_we0  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_we0,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_d0  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_d0,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_we1  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_we1,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_d1  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_d1,
   lrhls_stubs_data_settingsHLS_lrResidZPS_s_q1  =>  lrhls_stubs_data_settingsHLS_lrResidZPS_s_q1,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d0  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d0,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d1  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d1,
   lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q1,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_we0  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_we0,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_d0  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_d0,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_we1  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_we1,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_d1  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_d1,
   lrhls_stubs_data_settingsHLS_chosenRofZ_s_q1  =>  lrhls_stubs_data_settingsHLS_chosenRofZ_s_q1,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_we0  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_we0,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_d0  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_d0,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_we1  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_we1,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_d1  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_d1,
   lrhls_stubs_data_settingsHLS_invPtToDphi_s_q1  =>  lrhls_stubs_data_settingsHLS_invPtToDphi_s_q1,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d0  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d0,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d1  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d1,
   lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q1,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1,
   lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1  =>  lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1,
   lrhls_stubs_data_moduleHLS_barrel_s_address0  =>  lrhls_stubs_data_moduleHLS_barrel_s_address0,
   lrhls_stubs_data_moduleHLS_barrel_s_ce0  =>  lrhls_stubs_data_moduleHLS_barrel_s_ce0,
   lrhls_stubs_data_moduleHLS_barrel_s_we0  =>  lrhls_stubs_data_moduleHLS_barrel_s_we0,
   lrhls_stubs_data_moduleHLS_barrel_s_d0  =>  lrhls_stubs_data_moduleHLS_barrel_s_d0,
   lrhls_stubs_data_moduleHLS_barrel_s_q0  =>  lrhls_stubs_data_moduleHLS_barrel_s_q0,
   lrhls_stubs_data_moduleHLS_barrel_s_address1  =>  lrhls_stubs_data_moduleHLS_barrel_s_address1,
   lrhls_stubs_data_moduleHLS_barrel_s_ce1  =>  lrhls_stubs_data_moduleHLS_barrel_s_ce1,
   lrhls_stubs_data_moduleHLS_barrel_s_we1  =>  lrhls_stubs_data_moduleHLS_barrel_s_we1,
   lrhls_stubs_data_moduleHLS_barrel_s_d1  =>  lrhls_stubs_data_moduleHLS_barrel_s_d1,
   lrhls_stubs_data_moduleHLS_barrel_s_q1  =>  lrhls_stubs_data_moduleHLS_barrel_s_q1,
   lrhls_stubs_data_moduleHLS_psModule_s_address0  =>  lrhls_stubs_data_moduleHLS_psModule_s_address0,
   lrhls_stubs_data_moduleHLS_psModule_s_ce0  =>  lrhls_stubs_data_moduleHLS_psModule_s_ce0,
   lrhls_stubs_data_moduleHLS_psModule_s_we0  =>  lrhls_stubs_data_moduleHLS_psModule_s_we0,
   lrhls_stubs_data_moduleHLS_psModule_s_d0  =>  lrhls_stubs_data_moduleHLS_psModule_s_d0,
   lrhls_stubs_data_moduleHLS_psModule_s_q0  =>  lrhls_stubs_data_moduleHLS_psModule_s_q0,
   lrhls_stubs_data_moduleHLS_psModule_s_address1  =>  lrhls_stubs_data_moduleHLS_psModule_s_address1,
   lrhls_stubs_data_moduleHLS_psModule_s_ce1  =>  lrhls_stubs_data_moduleHLS_psModule_s_ce1,
   lrhls_stubs_data_moduleHLS_psModule_s_we1  =>  lrhls_stubs_data_moduleHLS_psModule_s_we1,
   lrhls_stubs_data_moduleHLS_psModule_s_d1  =>  lrhls_stubs_data_moduleHLS_psModule_s_d1,
   lrhls_stubs_data_moduleHLS_psModule_s_q1  =>  lrhls_stubs_data_moduleHLS_psModule_s_q1,
   lrhls_stubs_data_moduleHLS_layerId_s_address0  =>  lrhls_stubs_data_moduleHLS_layerId_s_address0,
   lrhls_stubs_data_moduleHLS_layerId_s_ce0  =>  lrhls_stubs_data_moduleHLS_layerId_s_ce0,
   lrhls_stubs_data_moduleHLS_layerId_s_we0  =>  lrhls_stubs_data_moduleHLS_layerId_s_we0,
   lrhls_stubs_data_moduleHLS_layerId_s_d0  =>  lrhls_stubs_data_moduleHLS_layerId_s_d0,
   lrhls_stubs_data_moduleHLS_layerId_s_q0  =>  lrhls_stubs_data_moduleHLS_layerId_s_q0,
   lrhls_stubs_data_moduleHLS_layerId_s_address1  =>  lrhls_stubs_data_moduleHLS_layerId_s_address1,
   lrhls_stubs_data_moduleHLS_layerId_s_ce1  =>  lrhls_stubs_data_moduleHLS_layerId_s_ce1,
   lrhls_stubs_data_moduleHLS_layerId_s_we1  =>  lrhls_stubs_data_moduleHLS_layerId_s_we1,
   lrhls_stubs_data_moduleHLS_layerId_s_d1  =>  lrhls_stubs_data_moduleHLS_layerId_s_d1,
   lrhls_stubs_data_moduleHLS_layerId_s_q1  =>  lrhls_stubs_data_moduleHLS_layerId_s_q1,
   lrhls_stubs_data_r_s_address0  =>  lrhls_stubs_data_r_s_address0,
   lrhls_stubs_data_r_s_ce0  =>  lrhls_stubs_data_r_s_ce0,
   lrhls_stubs_data_r_s_we0  =>  lrhls_stubs_data_r_s_we0,
   lrhls_stubs_data_r_s_d0  =>  lrhls_stubs_data_r_s_d0,
   lrhls_stubs_data_r_s_q0  =>  lrhls_stubs_data_r_s_q0,
   lrhls_stubs_data_r_s_address1  =>  lrhls_stubs_data_r_s_address1,
   lrhls_stubs_data_r_s_ce1  =>  lrhls_stubs_data_r_s_ce1,
   lrhls_stubs_data_r_s_we1  =>  lrhls_stubs_data_r_s_we1,
   lrhls_stubs_data_r_s_d1  =>  lrhls_stubs_data_r_s_d1,
   lrhls_stubs_data_r_s_q1  =>  lrhls_stubs_data_r_s_q1,
   lrhls_stubs_data_phi_s_address0  =>  lrhls_stubs_data_phi_s_address0,
   lrhls_stubs_data_phi_s_ce0  =>  lrhls_stubs_data_phi_s_ce0,
   lrhls_stubs_data_phi_s_we0  =>  lrhls_stubs_data_phi_s_we0,
   lrhls_stubs_data_phi_s_d0  =>  lrhls_stubs_data_phi_s_d0,
   lrhls_stubs_data_phi_s_q0  =>  lrhls_stubs_data_phi_s_q0,
   lrhls_stubs_data_phi_s_address1  =>  lrhls_stubs_data_phi_s_address1,
   lrhls_stubs_data_phi_s_ce1  =>  lrhls_stubs_data_phi_s_ce1,
   lrhls_stubs_data_phi_s_we1  =>  lrhls_stubs_data_phi_s_we1,
   lrhls_stubs_data_phi_s_d1  =>  lrhls_stubs_data_phi_s_d1,
   lrhls_stubs_data_phi_s_q1  =>  lrhls_stubs_data_phi_s_q1,
   lrhls_stubs_data_z_s_address0  =>  lrhls_stubs_data_z_s_address0,
   lrhls_stubs_data_z_s_ce0  =>  lrhls_stubs_data_z_s_ce0,
   lrhls_stubs_data_z_s_we0  =>  lrhls_stubs_data_z_s_we0,
   lrhls_stubs_data_z_s_d0  =>  lrhls_stubs_data_z_s_d0,
   lrhls_stubs_data_z_s_q0  =>  lrhls_stubs_data_z_s_q0,
   lrhls_stubs_data_z_s_address1  =>  lrhls_stubs_data_z_s_address1,
   lrhls_stubs_data_z_s_ce1  =>  lrhls_stubs_data_z_s_ce1,
   lrhls_stubs_data_z_s_we1  =>  lrhls_stubs_data_z_s_we1,
   lrhls_stubs_data_z_s_d1  =>  lrhls_stubs_data_z_s_d1,
   lrhls_stubs_data_z_s_q1  =>  lrhls_stubs_data_z_s_q1,
   lrhls_valid_s_i  =>  lrhls_valid_s_i,
   lrhls_valid_s_o  =>  lrhls_valid_s_o,
   lrhls_valid_s_o_ap_vld  =>  lrhls_valid_s_o_ap_vld,
   lrhls_stubMap_size_s_i  =>  lrhls_stubMap_size_s_i,
   lrhls_stubMap_size_s_o  =>  lrhls_stubMap_size_s_o,
   lrhls_stubMap_size_s_o_ap_vld  =>  lrhls_stubMap_size_s_o_ap_vld,
   lrhls_stubMap_data_first_address0  =>  lrhls_stubMap_data_first_address0,
   lrhls_stubMap_data_first_ce0  =>  lrhls_stubMap_data_first_ce0,
   lrhls_stubMap_data_first_we0  =>  lrhls_stubMap_data_first_we0,
   lrhls_stubMap_data_first_d0  =>  lrhls_stubMap_data_first_d0,
   lrhls_stubMap_data_first_q0  =>  lrhls_stubMap_data_first_q0,
   lrhls_stubMap_data_second_size_s_address0  =>  lrhls_stubMap_data_second_size_s_address0,
   lrhls_stubMap_data_second_size_s_ce0  =>  lrhls_stubMap_data_second_size_s_ce0,
   lrhls_stubMap_data_second_size_s_we0  =>  lrhls_stubMap_data_second_size_s_we0,
   lrhls_stubMap_data_second_size_s_d0  =>  lrhls_stubMap_data_second_size_s_d0,
   lrhls_stubMap_data_second_size_s_q0  =>  lrhls_stubMap_data_second_size_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d1,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d0  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d0,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_q0,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1,
   lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d1  =>  lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d1,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d0  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d0,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_q0  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_q0,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1,
   lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d1  =>  lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d1,
   lrhls_stubMap_data_second_data_r_s_address0  =>  lrhls_stubMap_data_second_data_r_s_address0,
   lrhls_stubMap_data_second_data_r_s_ce0  =>  lrhls_stubMap_data_second_data_r_s_ce0,
   lrhls_stubMap_data_second_data_r_s_we0  =>  lrhls_stubMap_data_second_data_r_s_we0,
   lrhls_stubMap_data_second_data_r_s_d0  =>  lrhls_stubMap_data_second_data_r_s_d0,
   lrhls_stubMap_data_second_data_r_s_q0  =>  lrhls_stubMap_data_second_data_r_s_q0,
   lrhls_stubMap_data_second_data_r_s_address1  =>  lrhls_stubMap_data_second_data_r_s_address1,
   lrhls_stubMap_data_second_data_r_s_ce1  =>  lrhls_stubMap_data_second_data_r_s_ce1,
   lrhls_stubMap_data_second_data_r_s_we1  =>  lrhls_stubMap_data_second_data_r_s_we1,
   lrhls_stubMap_data_second_data_r_s_d1  =>  lrhls_stubMap_data_second_data_r_s_d1,
   lrhls_stubMap_data_second_data_r_s_q1  =>  lrhls_stubMap_data_second_data_r_s_q1,
   lrhls_stubMap_data_second_data_phi_s_address0  =>  lrhls_stubMap_data_second_data_phi_s_address0,
   lrhls_stubMap_data_second_data_phi_s_ce0  =>  lrhls_stubMap_data_second_data_phi_s_ce0,
   lrhls_stubMap_data_second_data_phi_s_we0  =>  lrhls_stubMap_data_second_data_phi_s_we0,
   lrhls_stubMap_data_second_data_phi_s_d0  =>  lrhls_stubMap_data_second_data_phi_s_d0,
   lrhls_stubMap_data_second_data_phi_s_q0  =>  lrhls_stubMap_data_second_data_phi_s_q0,
   lrhls_stubMap_data_second_data_phi_s_address1  =>  lrhls_stubMap_data_second_data_phi_s_address1,
   lrhls_stubMap_data_second_data_phi_s_ce1  =>  lrhls_stubMap_data_second_data_phi_s_ce1,
   lrhls_stubMap_data_second_data_phi_s_we1  =>  lrhls_stubMap_data_second_data_phi_s_we1,
   lrhls_stubMap_data_second_data_phi_s_d1  =>  lrhls_stubMap_data_second_data_phi_s_d1,
   lrhls_stubMap_data_second_data_z_s_address0  =>  lrhls_stubMap_data_second_data_z_s_address0,
   lrhls_stubMap_data_second_data_z_s_ce0  =>  lrhls_stubMap_data_second_data_z_s_ce0,
   lrhls_stubMap_data_second_data_z_s_we0  =>  lrhls_stubMap_data_second_data_z_s_we0,
   lrhls_stubMap_data_second_data_z_s_d0  =>  lrhls_stubMap_data_second_data_z_s_d0,
   lrhls_stubMap_data_second_data_z_s_q0  =>  lrhls_stubMap_data_second_data_z_s_q0,
   lrhls_stubMap_data_second_data_z_s_address1  =>  lrhls_stubMap_data_second_data_z_s_address1,
   lrhls_stubMap_data_second_data_z_s_ce1  =>  lrhls_stubMap_data_second_data_z_s_ce1,
   lrhls_stubMap_data_second_data_z_s_we1  =>  lrhls_stubMap_data_second_data_z_s_we1,
   lrhls_stubMap_data_second_data_z_s_d1  =>  lrhls_stubMap_data_second_data_z_s_d1,
   lrhls_layerPopulation_size_s_i  =>  lrhls_layerPopulation_size_s_i,
   lrhls_layerPopulation_size_s_o  =>  lrhls_layerPopulation_size_s_o,
   lrhls_layerPopulation_size_s_o_ap_vld  =>  lrhls_layerPopulation_size_s_o_ap_vld,
   lrhls_layerPopulation_data_first_address0  =>  lrhls_layerPopulation_data_first_address0,
   lrhls_layerPopulation_data_first_ce0  =>  lrhls_layerPopulation_data_first_ce0,
   lrhls_layerPopulation_data_first_we0  =>  lrhls_layerPopulation_data_first_we0,
   lrhls_layerPopulation_data_first_d0  =>  lrhls_layerPopulation_data_first_d0,
   lrhls_layerPopulation_data_first_q0  =>  lrhls_layerPopulation_data_first_q0,
   lrhls_layerPopulation_data_second_address0  =>  lrhls_layerPopulation_data_second_address0,
   lrhls_layerPopulation_data_second_ce0  =>  lrhls_layerPopulation_data_second_ce0,
   lrhls_layerPopulation_data_second_we0  =>  lrhls_layerPopulation_data_second_we0,
   lrhls_layerPopulation_data_second_d0  =>  lrhls_layerPopulation_data_second_d0,
   lrhls_layerPopulation_data_second_q0  =>  lrhls_layerPopulation_data_second_q0,
   lrhls_residuals_size_s  =>  lrhls_residuals_size_s,
   lrhls_residuals_size_s_ap_vld  =>  lrhls_residuals_size_s_ap_vld,
   lrhls_residuals_data_first_address0  =>  lrhls_residuals_data_first_address0,
   lrhls_residuals_data_first_ce0  =>  lrhls_residuals_data_first_ce0,
   lrhls_residuals_data_first_we0  =>  lrhls_residuals_data_first_we0,
   lrhls_residuals_data_first_d0  =>  lrhls_residuals_data_first_d0,
   lrhls_residuals_data_first_q0  =>  lrhls_residuals_data_first_q0,
   lrhls_residuals_data_second_size_s_address0  =>  lrhls_residuals_data_second_size_s_address0,
   lrhls_residuals_data_second_size_s_ce0  =>  lrhls_residuals_data_second_size_s_ce0,
   lrhls_residuals_data_second_size_s_we0  =>  lrhls_residuals_data_second_size_s_we0,
   lrhls_residuals_data_second_size_s_d0  =>  lrhls_residuals_data_second_size_s_d0,
   lrhls_residuals_data_second_size_s_q0  =>  lrhls_residuals_data_second_size_s_q0,
   lrhls_residuals_data_second_data_phi_address0  =>  lrhls_residuals_data_second_data_phi_address0,
   lrhls_residuals_data_second_data_phi_ce0  =>  lrhls_residuals_data_second_data_phi_ce0,
   lrhls_residuals_data_second_data_phi_we0  =>  lrhls_residuals_data_second_data_phi_we0,
   lrhls_residuals_data_second_data_phi_d0  =>  lrhls_residuals_data_second_data_phi_d0,
   lrhls_residuals_data_second_data_phi_q0  =>  lrhls_residuals_data_second_data_phi_q0,
   lrhls_residuals_data_second_data_phi_address1  =>  lrhls_residuals_data_second_data_phi_address1,
   lrhls_residuals_data_second_data_phi_ce1  =>  lrhls_residuals_data_second_data_phi_ce1,
   lrhls_residuals_data_second_data_phi_we1  =>  lrhls_residuals_data_second_data_phi_we1,
   lrhls_residuals_data_second_data_phi_d1  =>  lrhls_residuals_data_second_data_phi_d1,
   lrhls_residuals_data_second_data_z_address0  =>  lrhls_residuals_data_second_data_z_address0,
   lrhls_residuals_data_second_data_z_ce0  =>  lrhls_residuals_data_second_data_z_ce0,
   lrhls_residuals_data_second_data_z_we0  =>  lrhls_residuals_data_second_data_z_we0,
   lrhls_residuals_data_second_data_z_d0  =>  lrhls_residuals_data_second_data_z_d0,
   lrhls_residuals_data_second_data_z_q0  =>  lrhls_residuals_data_second_data_z_q0,
   lrhls_residuals_data_second_data_z_address1  =>  lrhls_residuals_data_second_data_z_address1,
   lrhls_residuals_data_second_data_z_ce1  =>  lrhls_residuals_data_second_data_z_ce1,
   lrhls_residuals_data_second_data_z_we1  =>  lrhls_residuals_data_second_data_z_we1,
   lrhls_residuals_data_second_data_z_d1  =>  lrhls_residuals_data_second_data_z_d1,
   lrhls_residuals_data_second_data_layerId_address0  =>  lrhls_residuals_data_second_data_layerId_address0,
   lrhls_residuals_data_second_data_layerId_ce0  =>  lrhls_residuals_data_second_data_layerId_ce0,
   lrhls_residuals_data_second_data_layerId_we0  =>  lrhls_residuals_data_second_data_layerId_we0,
   lrhls_residuals_data_second_data_layerId_d0  =>  lrhls_residuals_data_second_data_layerId_d0,
   lrhls_residuals_data_second_data_layerId_q0  =>  lrhls_residuals_data_second_data_layerId_q0,
   lrhls_residuals_data_second_data_layerId_address1  =>  lrhls_residuals_data_second_data_layerId_address1,
   lrhls_residuals_data_second_data_layerId_ce1  =>  lrhls_residuals_data_second_data_layerId_ce1,
   lrhls_residuals_data_second_data_layerId_we1  =>  lrhls_residuals_data_second_data_layerId_we1,
   lrhls_residuals_data_second_data_layerId_d1  =>  lrhls_residuals_data_second_data_layerId_d1,
   lrhls_residuals_data_second_data_stubId_address0  =>  lrhls_residuals_data_second_data_stubId_address0,
   lrhls_residuals_data_second_data_stubId_ce0  =>  lrhls_residuals_data_second_data_stubId_ce0,
   lrhls_residuals_data_second_data_stubId_we0  =>  lrhls_residuals_data_second_data_stubId_we0,
   lrhls_residuals_data_second_data_stubId_d0  =>  lrhls_residuals_data_second_data_stubId_d0,
   lrhls_residuals_data_second_data_stubId_q0  =>  lrhls_residuals_data_second_data_stubId_q0,
   lrhls_residuals_data_second_data_stubId_address1  =>  lrhls_residuals_data_second_data_stubId_address1,
   lrhls_residuals_data_second_data_stubId_ce1  =>  lrhls_residuals_data_second_data_stubId_ce1,
   lrhls_residuals_data_second_data_stubId_we1  =>  lrhls_residuals_data_second_data_stubId_we1,
   lrhls_residuals_data_second_data_stubId_d1  =>  lrhls_residuals_data_second_data_stubId_d1,
   lrhls_residuals_data_second_data_ps_address0  =>  lrhls_residuals_data_second_data_ps_address0,
   lrhls_residuals_data_second_data_ps_ce0  =>  lrhls_residuals_data_second_data_ps_ce0,
   lrhls_residuals_data_second_data_ps_we0  =>  lrhls_residuals_data_second_data_ps_we0,
   lrhls_residuals_data_second_data_ps_d0  =>  lrhls_residuals_data_second_data_ps_d0,
   lrhls_residuals_data_second_data_ps_q0  =>  lrhls_residuals_data_second_data_ps_q0,
   lrhls_residuals_data_second_data_ps_address1  =>  lrhls_residuals_data_second_data_ps_address1,
   lrhls_residuals_data_second_data_ps_ce1  =>  lrhls_residuals_data_second_data_ps_ce1,
   lrhls_residuals_data_second_data_ps_we1  =>  lrhls_residuals_data_second_data_ps_we1,
   lrhls_residuals_data_second_data_ps_d1  =>  lrhls_residuals_data_second_data_ps_d1,
   lrhls_largestResid_phi  =>  lrhls_largestResid_phi,
   lrhls_largestResid_phi_ap_vld  =>  lrhls_largestResid_phi_ap_vld,
   lrhls_largestResid_z  =>  lrhls_largestResid_z,
   lrhls_largestResid_z_ap_vld  =>  lrhls_largestResid_z_ap_vld,
   lrhls_largestResid_layerId  =>  lrhls_largestResid_layerId,
   lrhls_largestResid_layerId_ap_vld  =>  lrhls_largestResid_layerId_ap_vld,
   lrhls_largestResid_stubId  =>  lrhls_largestResid_stubId,
   lrhls_largestResid_stubId_ap_vld  =>  lrhls_largestResid_stubId_ap_vld,
   lrhls_largestResid_ps  =>  lrhls_largestResid_ps,
   lrhls_largestResid_ps_ap_vld  =>  lrhls_largestResid_ps_ap_vld,
   lrhls_nIterations_s_i  =>  lrhls_nIterations_s_i,
   lrhls_nIterations_s_o  =>  lrhls_nIterations_s_o,
   lrhls_nIterations_s_o_ap_vld  =>  lrhls_nIterations_s_o_ap_vld
);

-- Assignment for control signal
  ap_clk <= AESL_clock;
  ap_rst <= AESL_reset;
  AESL_reset <= rst;
  ap_start <= AESL_start;
  AESL_start <= start;
  AESL_done <= ap_done;
  AESL_idle <= ap_idle;
  AESL_ready <= ap_ready;
  AESL_ce <= ce;
  AESL_continue <= continue;
gen_check_strlSignal_AESL_done_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
      NULL;
    else
        if ( AESL_done /= '1' and AESL_done /= '0' ) then
            assert false report "Control signal AESL_done is invalid!" severity failure;
        end if;
    end if;
  end if;
end process;
gen_check_strlSignal_AESL_ready_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
      NULL;
    else
        if ( AESL_ready /= '1' and AESL_ready /= '0' ) then
            assert false report "Control signal AESL_ready is invalid!" severity failure;
        end if;
    end if;
  end if;
end process;
gen_assign_lrhls_settings_lrNumIterations_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_lrNumIterations_s <= AESL_REG_lrhls_settings_lrNumIterations_s;
end process;
gen_assign_lrhls_settings_lrMinLayers_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_lrMinLayers_s <= AESL_REG_lrhls_settings_lrMinLayers_s;
end process;
gen_assign_lrhls_settings_lrMinLayersPS_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_lrMinLayersPS_s <= AESL_REG_lrhls_settings_lrMinLayersPS_s;
end process;
gen_assign_lrhls_settings_lrResidPhi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_lrResidPhi_s <= AESL_REG_lrhls_settings_lrResidPhi_s;
end process;
gen_assign_lrhls_settings_lrResidZ2S_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_lrResidZ2S_s <= AESL_REG_lrhls_settings_lrResidZ2S_s;
end process;
gen_assign_lrhls_settings_lrResidZPS_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_lrResidZPS_s <= AESL_REG_lrhls_settings_lrResidZPS_s;
end process;
gen_assign_lrhls_settings_chosenRofPhi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_chosenRofPhi_s <= AESL_REG_lrhls_settings_chosenRofPhi_s;
end process;
read_file_process_lrhls_settings_chosenRofPhi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_settings_chosenRofPhi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_settings_chosenRofPhi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_settings_chosenRofPhi_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_settings_chosenRofZ_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_chosenRofZ_s <= AESL_REG_lrhls_settings_chosenRofZ_s;
end process;
read_file_process_lrhls_settings_chosenRofZ_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_settings_chosenRofZ_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_settings_chosenRofZ_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_settings_chosenRofZ_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_settings_invPtToDphi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_invPtToDphi_s <= AESL_REG_lrhls_settings_invPtToDphi_s;
end process;
read_file_process_lrhls_settings_invPtToDphi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_settings_invPtToDphi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_settings_invPtToDphi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_settings_invPtToDphi_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_settings_trackerNumLayers_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_settings_trackerNumLayers_s <= AESL_REG_lrhls_settings_trackerNumLayers_s;
end process;
gen_assign_lrhls_data_settingsHLS_lrNumIterations_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_lrNumIterations_s <= AESL_REG_lrhls_data_settingsHLS_lrNumIterations_s;
end process;
gen_assign_lrhls_data_settingsHLS_lrMinLayers_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_lrMinLayers_s <= AESL_REG_lrhls_data_settingsHLS_lrMinLayers_s;
end process;
gen_assign_lrhls_data_settingsHLS_lrMinLayersPS_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_lrMinLayersPS_s <= AESL_REG_lrhls_data_settingsHLS_lrMinLayersPS_s;
end process;
gen_assign_lrhls_data_settingsHLS_lrResidPhi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_lrResidPhi_s <= AESL_REG_lrhls_data_settingsHLS_lrResidPhi_s;
end process;
gen_assign_lrhls_data_settingsHLS_lrResidZ2S_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_lrResidZ2S_s <= AESL_REG_lrhls_data_settingsHLS_lrResidZ2S_s;
end process;
gen_assign_lrhls_data_settingsHLS_lrResidZPS_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_lrResidZPS_s <= AESL_REG_lrhls_data_settingsHLS_lrResidZPS_s;
end process;
gen_assign_lrhls_data_settingsHLS_chosenRofPhi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_chosenRofPhi_s <= AESL_REG_lrhls_data_settingsHLS_chosenRofPhi_s;
end process;
gen_assign_lrhls_data_settingsHLS_chosenRofZ_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_chosenRofZ_s <= AESL_REG_lrhls_data_settingsHLS_chosenRofZ_s;
end process;
gen_assign_lrhls_data_settingsHLS_invPtToDphi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_invPtToDphi_s <= AESL_REG_lrhls_data_settingsHLS_invPtToDphi_s;
end process;
gen_assign_lrhls_data_settingsHLS_trackerNumLayers_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_settingsHLS_trackerNumLayers_s <= AESL_REG_lrhls_data_settingsHLS_trackerNumLayers_s;
end process;
gen_assign_lrhls_data_tracksMHTHLS_size_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_tracksMHTHLS_size_s <= AESL_REG_lrhls_data_tracksMHTHLS_size_s;
end process;
read_file_process_lrhls_data_tracksMHTHLS_size_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_data_tracksMHTHLS_size_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_data_tracksMHTHLS_size_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_data_tracksMHTHLS_size_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrNumIterations_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrMinLayersPS_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZ2S_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_lrResidZPS_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_chosenRofZ_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_invPtToDphi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ce1;
lrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_settingsHLS_trackerNumLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_size_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_size_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_size_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_barrel_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_psModule_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_moduleHLS_layerId_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_r_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_phi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s : AESL_automem_lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce0;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q0 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_dout0;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_address1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1 <= lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ce1;
lrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_q1 <= arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_dout1;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_stubsHLS_data_z_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_secEta_s : AESL_automem_lrhls_data_tracksMHTHLS_data_secEta_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_secEta_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_secEta_s
arraylrhls_data_tracksMHTHLS_data_secEta_s_address0 <= lrhls_data_tracksMHTHLS_data_secEta_s_address0;
arraylrhls_data_tracksMHTHLS_data_secEta_s_ce0 <= lrhls_data_tracksMHTHLS_data_secEta_s_ce0;
lrhls_data_tracksMHTHLS_data_secEta_s_q0 <= arraylrhls_data_tracksMHTHLS_data_secEta_s_dout0;
arraylrhls_data_tracksMHTHLS_data_secEta_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_secEta_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_secEta_s_address1 <= lrhls_data_tracksMHTHLS_data_secEta_s_address1;
arraylrhls_data_tracksMHTHLS_data_secEta_s_ce1 <= lrhls_data_tracksMHTHLS_data_secEta_s_ce1;
lrhls_data_tracksMHTHLS_data_secEta_s_q1 <= arraylrhls_data_tracksMHTHLS_data_secEta_s_dout1;
arraylrhls_data_tracksMHTHLS_data_secEta_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_secEta_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_secEta_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_secEta_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_secPhi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_secPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_secPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_secPhi_s
arraylrhls_data_tracksMHTHLS_data_secPhi_s_address0 <= lrhls_data_tracksMHTHLS_data_secPhi_s_address0;
arraylrhls_data_tracksMHTHLS_data_secPhi_s_ce0 <= lrhls_data_tracksMHTHLS_data_secPhi_s_ce0;
lrhls_data_tracksMHTHLS_data_secPhi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_secPhi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_secPhi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_secPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_secPhi_s_address1 <= lrhls_data_tracksMHTHLS_data_secPhi_s_address1;
arraylrhls_data_tracksMHTHLS_data_secPhi_s_ce1 <= lrhls_data_tracksMHTHLS_data_secPhi_s_ce1;
lrhls_data_tracksMHTHLS_data_secPhi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_secPhi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_secPhi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_secPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_secPhi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_secPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_qOverPt_s : AESL_automem_lrhls_data_tracksMHTHLS_data_qOverPt_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_qOverPt_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_qOverPt_s
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_address0 <= lrhls_data_tracksMHTHLS_data_qOverPt_s_address0;
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ce0 <= lrhls_data_tracksMHTHLS_data_qOverPt_s_ce0;
lrhls_data_tracksMHTHLS_data_qOverPt_s_q0 <= arraylrhls_data_tracksMHTHLS_data_qOverPt_s_dout0;
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_address1 <= lrhls_data_tracksMHTHLS_data_qOverPt_s_address1;
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ce1 <= lrhls_data_tracksMHTHLS_data_qOverPt_s_ce1;
lrhls_data_tracksMHTHLS_data_qOverPt_s_q1 <= arraylrhls_data_tracksMHTHLS_data_qOverPt_s_dout1;
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_qOverPt_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_phi_s : AESL_automem_lrhls_data_tracksMHTHLS_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_phi_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_phi_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_phi_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_phi_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_phi_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_phi_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_phi_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_phi_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_phi_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_phi_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_phi_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_phi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_phi_s
arraylrhls_data_tracksMHTHLS_data_phi_s_address0 <= lrhls_data_tracksMHTHLS_data_phi_s_address0;
arraylrhls_data_tracksMHTHLS_data_phi_s_ce0 <= lrhls_data_tracksMHTHLS_data_phi_s_ce0;
lrhls_data_tracksMHTHLS_data_phi_s_q0 <= arraylrhls_data_tracksMHTHLS_data_phi_s_dout0;
arraylrhls_data_tracksMHTHLS_data_phi_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_phi_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_phi_s_address1 <= lrhls_data_tracksMHTHLS_data_phi_s_address1;
arraylrhls_data_tracksMHTHLS_data_phi_s_ce1 <= lrhls_data_tracksMHTHLS_data_phi_s_ce1;
lrhls_data_tracksMHTHLS_data_phi_s_q1 <= arraylrhls_data_tracksMHTHLS_data_phi_s_dout1;
arraylrhls_data_tracksMHTHLS_data_phi_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_phi_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_phi_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_phi_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_z_s : AESL_automem_lrhls_data_tracksMHTHLS_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_z_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_z_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_z_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_z_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_z_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_z_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_z_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_z_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_z_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_z_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_z_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_z_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_z_s
arraylrhls_data_tracksMHTHLS_data_z_s_address0 <= lrhls_data_tracksMHTHLS_data_z_s_address0;
arraylrhls_data_tracksMHTHLS_data_z_s_ce0 <= lrhls_data_tracksMHTHLS_data_z_s_ce0;
lrhls_data_tracksMHTHLS_data_z_s_q0 <= arraylrhls_data_tracksMHTHLS_data_z_s_dout0;
arraylrhls_data_tracksMHTHLS_data_z_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_z_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_z_s_address1 <= lrhls_data_tracksMHTHLS_data_z_s_address1;
arraylrhls_data_tracksMHTHLS_data_z_s_ce1 <= lrhls_data_tracksMHTHLS_data_z_s_ce1;
lrhls_data_tracksMHTHLS_data_z_s_q1 <= arraylrhls_data_tracksMHTHLS_data_z_s_dout1;
arraylrhls_data_tracksMHTHLS_data_z_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_z_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_z_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_z_s_done <= '0';

AESL_inst_lrhls_data_tracksMHTHLS_data_cot_s : AESL_automem_lrhls_data_tracksMHTHLS_data_cot_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksMHTHLS_data_cot_s_ce0,
    we0       =>  arraylrhls_data_tracksMHTHLS_data_cot_s_we0,
    address0  =>  arraylrhls_data_tracksMHTHLS_data_cot_s_address0,
    din0      =>  arraylrhls_data_tracksMHTHLS_data_cot_s_din0,
    dout0     =>  arraylrhls_data_tracksMHTHLS_data_cot_s_dout0,
    ce1       =>  arraylrhls_data_tracksMHTHLS_data_cot_s_ce1,
    we1       =>  arraylrhls_data_tracksMHTHLS_data_cot_s_we1,
    address1  =>  arraylrhls_data_tracksMHTHLS_data_cot_s_address1,
    din1      =>  arraylrhls_data_tracksMHTHLS_data_cot_s_din1,
    dout1     =>  arraylrhls_data_tracksMHTHLS_data_cot_s_dout1,
    ready	    =>  arraylrhls_data_tracksMHTHLS_data_cot_s_ready,
    done	    =>  arraylrhls_data_tracksMHTHLS_data_cot_s_done
);

-- Assignment between dut and arraylrhls_data_tracksMHTHLS_data_cot_s
arraylrhls_data_tracksMHTHLS_data_cot_s_address0 <= lrhls_data_tracksMHTHLS_data_cot_s_address0;
arraylrhls_data_tracksMHTHLS_data_cot_s_ce0 <= lrhls_data_tracksMHTHLS_data_cot_s_ce0;
lrhls_data_tracksMHTHLS_data_cot_s_q0 <= arraylrhls_data_tracksMHTHLS_data_cot_s_dout0;
arraylrhls_data_tracksMHTHLS_data_cot_s_we0 <= '0';
arraylrhls_data_tracksMHTHLS_data_cot_s_din0 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_cot_s_address1 <= lrhls_data_tracksMHTHLS_data_cot_s_address1;
arraylrhls_data_tracksMHTHLS_data_cot_s_ce1 <= lrhls_data_tracksMHTHLS_data_cot_s_ce1;
lrhls_data_tracksMHTHLS_data_cot_s_q1 <= arraylrhls_data_tracksMHTHLS_data_cot_s_dout1;
arraylrhls_data_tracksMHTHLS_data_cot_s_we1 <= '0';
arraylrhls_data_tracksMHTHLS_data_cot_s_din1 <= (others => '0');
arraylrhls_data_tracksMHTHLS_data_cot_s_ready <=	ready;
arraylrhls_data_tracksMHTHLS_data_cot_s_done <= '0';

gen_assign_lrhls_data_tracksLRHLS_size_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_data_tracksLRHLS_size_s <= AESL_REG_lrhls_data_tracksLRHLS_size_s;
end process;
read_file_process_lrhls_data_tracksLRHLS_size_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_data_tracksLRHLS_size_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_data_tracksLRHLS_size_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_data_tracksLRHLS_size_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrNumIterations_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrMinLayersPS_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZ2S_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_lrResidZPS_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_chosenRofZ_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_invPtToDphi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ce1;
lrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_settingsHLS_trackerNumLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_size_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_size_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_size_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_size_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_size_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_size_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrNumIterations_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZ2S_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_lrResidZPS_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_chosenRofZ_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_invPtToDphi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_settingsHLS_trackerNumLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_barrel_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_psModule_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_moduleHLS_layerId_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_r_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_phi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s : AESL_automem_lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce0;
lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q0 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_dout0;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_address1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1 <= lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ce1;
lrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_q1 <= arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_dout1;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_stubsHLS_data_z_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_secEta_s : AESL_automem_lrhls_data_tracksLRHLS_data_secEta_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_secEta_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_secEta_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_secEta_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_secEta_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_secEta_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_secEta_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_secEta_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_secEta_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_secEta_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_secEta_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_secEta_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_secEta_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_secEta_s
arraylrhls_data_tracksLRHLS_data_secEta_s_address0 <= lrhls_data_tracksLRHLS_data_secEta_s_address0;
arraylrhls_data_tracksLRHLS_data_secEta_s_ce0 <= lrhls_data_tracksLRHLS_data_secEta_s_ce0;
lrhls_data_tracksLRHLS_data_secEta_s_q0 <= arraylrhls_data_tracksLRHLS_data_secEta_s_dout0;
arraylrhls_data_tracksLRHLS_data_secEta_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_secEta_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_secEta_s_address1 <= lrhls_data_tracksLRHLS_data_secEta_s_address1;
arraylrhls_data_tracksLRHLS_data_secEta_s_ce1 <= lrhls_data_tracksLRHLS_data_secEta_s_ce1;
lrhls_data_tracksLRHLS_data_secEta_s_q1 <= arraylrhls_data_tracksLRHLS_data_secEta_s_dout1;
arraylrhls_data_tracksLRHLS_data_secEta_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_secEta_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_secEta_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_secEta_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_secPhi_s : AESL_automem_lrhls_data_tracksLRHLS_data_secPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_secPhi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_secPhi_s
arraylrhls_data_tracksLRHLS_data_secPhi_s_address0 <= lrhls_data_tracksLRHLS_data_secPhi_s_address0;
arraylrhls_data_tracksLRHLS_data_secPhi_s_ce0 <= lrhls_data_tracksLRHLS_data_secPhi_s_ce0;
lrhls_data_tracksLRHLS_data_secPhi_s_q0 <= arraylrhls_data_tracksLRHLS_data_secPhi_s_dout0;
arraylrhls_data_tracksLRHLS_data_secPhi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_secPhi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_secPhi_s_address1 <= lrhls_data_tracksLRHLS_data_secPhi_s_address1;
arraylrhls_data_tracksLRHLS_data_secPhi_s_ce1 <= lrhls_data_tracksLRHLS_data_secPhi_s_ce1;
lrhls_data_tracksLRHLS_data_secPhi_s_q1 <= arraylrhls_data_tracksLRHLS_data_secPhi_s_dout1;
arraylrhls_data_tracksLRHLS_data_secPhi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_secPhi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_secPhi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_secPhi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_qOverPt_s : AESL_automem_lrhls_data_tracksLRHLS_data_qOverPt_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_qOverPt_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_qOverPt_s
arraylrhls_data_tracksLRHLS_data_qOverPt_s_address0 <= lrhls_data_tracksLRHLS_data_qOverPt_s_address0;
arraylrhls_data_tracksLRHLS_data_qOverPt_s_ce0 <= lrhls_data_tracksLRHLS_data_qOverPt_s_ce0;
lrhls_data_tracksLRHLS_data_qOverPt_s_q0 <= arraylrhls_data_tracksLRHLS_data_qOverPt_s_dout0;
arraylrhls_data_tracksLRHLS_data_qOverPt_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_qOverPt_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_qOverPt_s_address1 <= lrhls_data_tracksLRHLS_data_qOverPt_s_address1;
arraylrhls_data_tracksLRHLS_data_qOverPt_s_ce1 <= lrhls_data_tracksLRHLS_data_qOverPt_s_ce1;
lrhls_data_tracksLRHLS_data_qOverPt_s_q1 <= arraylrhls_data_tracksLRHLS_data_qOverPt_s_dout1;
arraylrhls_data_tracksLRHLS_data_qOverPt_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_qOverPt_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_qOverPt_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_qOverPt_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_phi_s : AESL_automem_lrhls_data_tracksLRHLS_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_phi_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_phi_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_phi_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_phi_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_phi_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_phi_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_phi_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_phi_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_phi_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_phi_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_phi_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_phi_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_phi_s
arraylrhls_data_tracksLRHLS_data_phi_s_address0 <= lrhls_data_tracksLRHLS_data_phi_s_address0;
arraylrhls_data_tracksLRHLS_data_phi_s_ce0 <= lrhls_data_tracksLRHLS_data_phi_s_ce0;
lrhls_data_tracksLRHLS_data_phi_s_q0 <= arraylrhls_data_tracksLRHLS_data_phi_s_dout0;
arraylrhls_data_tracksLRHLS_data_phi_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_phi_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_phi_s_address1 <= lrhls_data_tracksLRHLS_data_phi_s_address1;
arraylrhls_data_tracksLRHLS_data_phi_s_ce1 <= lrhls_data_tracksLRHLS_data_phi_s_ce1;
lrhls_data_tracksLRHLS_data_phi_s_q1 <= arraylrhls_data_tracksLRHLS_data_phi_s_dout1;
arraylrhls_data_tracksLRHLS_data_phi_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_phi_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_phi_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_phi_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_z_s : AESL_automem_lrhls_data_tracksLRHLS_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_z_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_z_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_z_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_z_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_z_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_z_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_z_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_z_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_z_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_z_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_z_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_z_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_z_s
arraylrhls_data_tracksLRHLS_data_z_s_address0 <= lrhls_data_tracksLRHLS_data_z_s_address0;
arraylrhls_data_tracksLRHLS_data_z_s_ce0 <= lrhls_data_tracksLRHLS_data_z_s_ce0;
lrhls_data_tracksLRHLS_data_z_s_q0 <= arraylrhls_data_tracksLRHLS_data_z_s_dout0;
arraylrhls_data_tracksLRHLS_data_z_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_z_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_z_s_address1 <= lrhls_data_tracksLRHLS_data_z_s_address1;
arraylrhls_data_tracksLRHLS_data_z_s_ce1 <= lrhls_data_tracksLRHLS_data_z_s_ce1;
lrhls_data_tracksLRHLS_data_z_s_q1 <= arraylrhls_data_tracksLRHLS_data_z_s_dout1;
arraylrhls_data_tracksLRHLS_data_z_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_z_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_z_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_z_s_done <= '0';

AESL_inst_lrhls_data_tracksLRHLS_data_cot_s : AESL_automem_lrhls_data_tracksLRHLS_data_cot_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_data_tracksLRHLS_data_cot_s_ce0,
    we0       =>  arraylrhls_data_tracksLRHLS_data_cot_s_we0,
    address0  =>  arraylrhls_data_tracksLRHLS_data_cot_s_address0,
    din0      =>  arraylrhls_data_tracksLRHLS_data_cot_s_din0,
    dout0     =>  arraylrhls_data_tracksLRHLS_data_cot_s_dout0,
    ce1       =>  arraylrhls_data_tracksLRHLS_data_cot_s_ce1,
    we1       =>  arraylrhls_data_tracksLRHLS_data_cot_s_we1,
    address1  =>  arraylrhls_data_tracksLRHLS_data_cot_s_address1,
    din1      =>  arraylrhls_data_tracksLRHLS_data_cot_s_din1,
    dout1     =>  arraylrhls_data_tracksLRHLS_data_cot_s_dout1,
    ready	    =>  arraylrhls_data_tracksLRHLS_data_cot_s_ready,
    done	    =>  arraylrhls_data_tracksLRHLS_data_cot_s_done
);

-- Assignment between dut and arraylrhls_data_tracksLRHLS_data_cot_s
arraylrhls_data_tracksLRHLS_data_cot_s_address0 <= lrhls_data_tracksLRHLS_data_cot_s_address0;
arraylrhls_data_tracksLRHLS_data_cot_s_ce0 <= lrhls_data_tracksLRHLS_data_cot_s_ce0;
lrhls_data_tracksLRHLS_data_cot_s_q0 <= arraylrhls_data_tracksLRHLS_data_cot_s_dout0;
arraylrhls_data_tracksLRHLS_data_cot_s_we0 <= '0';
arraylrhls_data_tracksLRHLS_data_cot_s_din0 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_cot_s_address1 <= lrhls_data_tracksLRHLS_data_cot_s_address1;
arraylrhls_data_tracksLRHLS_data_cot_s_ce1 <= lrhls_data_tracksLRHLS_data_cot_s_ce1;
lrhls_data_tracksLRHLS_data_cot_s_q1 <= arraylrhls_data_tracksLRHLS_data_cot_s_dout1;
arraylrhls_data_tracksLRHLS_data_cot_s_we1 <= '0';
arraylrhls_data_tracksLRHLS_data_cot_s_din1 <= (others => '0');
arraylrhls_data_tracksLRHLS_data_cot_s_ready <=	ready;
arraylrhls_data_tracksLRHLS_data_cot_s_done <= '0';

gen_assign_lrhls_numLayers_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_numLayers_s <= AESL_REG_lrhls_numLayers_s;
end process;
read_file_process_lrhls_numLayers_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_numLayers_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_numLayers_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_numLayers_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_minLayers_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_minLayers_s <= AESL_REG_lrhls_minLayers_s;
end process;
read_file_process_lrhls_minLayers_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_minLayers_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_minLayers_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_minLayers_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_minLayersPS_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_minLayersPS_s <= AESL_REG_lrhls_minLayersPS_s;
end process;
read_file_process_lrhls_minLayersPS_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_minLayersPS_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_minLayersPS_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_minLayersPS_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_residPhi_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_residPhi_s <= AESL_REG_lrhls_residPhi_s;
end process;
read_file_process_lrhls_residPhi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_residPhi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_residPhi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_residPhi_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_residZ2S_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_residZ2S_s <= AESL_REG_lrhls_residZ2S_s;
end process;
read_file_process_lrhls_residZ2S_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_residZ2S_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_residZ2S_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_residZ2S_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_residZPS_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_residZPS_s <= AESL_REG_lrhls_residZPS_s;
end process;
read_file_process_lrhls_residZPS_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_residZPS_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_residZPS_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_residZPS_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_maxIteartions_s_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  lrhls_maxIteartions_s <= AESL_REG_lrhls_maxIteartions_s;
end process;
read_file_process_lrhls_maxIteartions_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_maxIteartions_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_maxIteartions_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_maxIteartions_s := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_lrNumIterations_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_lrNumIterations_s_i <= AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_lrNumIterations_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_i := lrhls_track_settingsHLS_lrNumIterations_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_lrNumIterations_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_lrNumIterations_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_lrNumIterations_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_lrNumIterations_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o := lrhls_track_settingsHLS_lrNumIterations_s_o;
        AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_lrNumIterations_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_lrNumIterations_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_lrNumIterations_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_lrMinLayers_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_lrMinLayers_s_i <= AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_lrMinLayers_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_i := lrhls_track_settingsHLS_lrMinLayers_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_lrMinLayers_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayers_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayers_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_lrMinLayers_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o := lrhls_track_settingsHLS_lrMinLayers_s_o;
        AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_lrMinLayers_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_lrMinLayers_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_lrMinLayers_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_lrMinLayersPS_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_lrMinLayersPS_s_i <= AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_lrMinLayersPS_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_i := lrhls_track_settingsHLS_lrMinLayersPS_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_lrMinLayersPS_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayersPS_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_lrMinLayersPS_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_lrMinLayersPS_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o := lrhls_track_settingsHLS_lrMinLayersPS_s_o;
        AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_lrMinLayersPS_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_lrMinLayersPS_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_lrMinLayersPS_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_lrResidPhi_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_lrResidPhi_s_i <= AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_lrResidPhi_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_i := lrhls_track_settingsHLS_lrResidPhi_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_lrResidPhi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidPhi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidPhi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_lrResidPhi_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o := lrhls_track_settingsHLS_lrResidPhi_s_o;
        AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_lrResidPhi_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_lrResidPhi_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_lrResidPhi_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_lrResidZ2S_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_lrResidZ2S_s_i <= AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_lrResidZ2S_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_i := lrhls_track_settingsHLS_lrResidZ2S_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_lrResidZ2S_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZ2S_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZ2S_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_lrResidZ2S_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o := lrhls_track_settingsHLS_lrResidZ2S_s_o;
        AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_lrResidZ2S_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_lrResidZ2S_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_lrResidZ2S_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_lrResidZPS_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_lrResidZPS_s_i <= AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_lrResidZPS_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_i := lrhls_track_settingsHLS_lrResidZPS_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_lrResidZPS_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZPS_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_lrResidZPS_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_lrResidZPS_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o := lrhls_track_settingsHLS_lrResidZPS_s_o;
        AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_lrResidZPS_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_lrResidZPS_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_lrResidZPS_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_chosenRofPhi_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_chosenRofPhi_s_i <= AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_chosenRofPhi_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_i := lrhls_track_settingsHLS_chosenRofPhi_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_chosenRofPhi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofPhi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofPhi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_chosenRofPhi_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o := lrhls_track_settingsHLS_chosenRofPhi_s_o;
        AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_chosenRofPhi_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_chosenRofPhi_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_chosenRofPhi_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_chosenRofZ_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_chosenRofZ_s_i <= AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_chosenRofZ_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_i := lrhls_track_settingsHLS_chosenRofZ_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_chosenRofZ_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofZ_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_chosenRofZ_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_chosenRofZ_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o := lrhls_track_settingsHLS_chosenRofZ_s_o;
        AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_chosenRofZ_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_chosenRofZ_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_chosenRofZ_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_invPtToDphi_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_invPtToDphi_s_i <= AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_invPtToDphi_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_i := lrhls_track_settingsHLS_invPtToDphi_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_invPtToDphi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_invPtToDphi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_invPtToDphi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_invPtToDphi_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o := lrhls_track_settingsHLS_invPtToDphi_s_o;
        AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_invPtToDphi_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_invPtToDphi_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_invPtToDphi_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_settingsHLS_trackerNumLayers_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_settingsHLS_trackerNumLayers_s_i <= AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_i;
end process;

gen_out2in_lrhls_track_settingsHLS_trackerNumLayers_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_i := lrhls_track_settingsHLS_trackerNumLayers_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_settingsHLS_trackerNumLayers_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_settingsHLS_trackerNumLayers_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_settingsHLS_trackerNumLayers_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_settingsHLS_trackerNumLayers_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o := (others => '0'); 
    elsif(lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o := lrhls_track_settingsHLS_trackerNumLayers_s_o;
        AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_settingsHLS_trackerNumLayers_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_settingsHLS_trackerNumLayers_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_settingsHLS_trackerNumLayers_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_stubsHLS_size_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_stubsHLS_size_s_i <= AESL_REG_lrhls_track_stubsHLS_size_s_i;
end process;

gen_out2in_lrhls_track_stubsHLS_size_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_stubsHLS_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_stubsHLS_size_s_i := lrhls_track_stubsHLS_size_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_stubsHLS_size_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_stubsHLS_size_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_stubsHLS_size_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_stubsHLS_size_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_stubsHLS_size_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_stubsHLS_size_s_o := (others => '0'); 
    elsif(lrhls_track_stubsHLS_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_stubsHLS_size_s_o := lrhls_track_stubsHLS_size_s_o;
        AESL_REG_lrhls_track_stubsHLS_size_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_stubsHLS_size_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_stubsHLS_size_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_stubsHLS_size_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_stubsHLS_size_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_stubsHLS_size_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we0;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_din0 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d0;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ce1;
lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_we1;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_din1 <= lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_d1;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_ready <= ready;
arraylrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_barrel_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_barrel_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_barrel_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_barrel_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_barrel_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_psModule_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_psModule_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_psModule_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_psModule_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_psModule_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_moduleHLS_layerId_s : AESL_automem_lrhls_track_stubsHLS_data_moduleHLS_layerId_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address0;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce0;
lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q0 <= arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_dout0;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we0;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_din0 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d0;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_address1;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_ce1;
lrhls_track_stubsHLS_data_moduleHLS_layerId_s_q1 <= arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_dout1;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_we1;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_din1 <= lrhls_track_stubsHLS_data_moduleHLS_layerId_s_d1;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_ready <= ready;
arraylrhls_track_stubsHLS_data_moduleHLS_layerId_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_r_s : AESL_automem_lrhls_track_stubsHLS_data_r_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_r_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_r_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_r_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_r_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_r_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_r_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_r_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_r_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_r_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_r_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_r_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_r_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_r_s
arraylrhls_track_stubsHLS_data_r_s_address0 <= lrhls_track_stubsHLS_data_r_s_address0;
arraylrhls_track_stubsHLS_data_r_s_ce0 <= lrhls_track_stubsHLS_data_r_s_ce0;
lrhls_track_stubsHLS_data_r_s_q0 <= arraylrhls_track_stubsHLS_data_r_s_dout0;
arraylrhls_track_stubsHLS_data_r_s_we0 <= lrhls_track_stubsHLS_data_r_s_we0;
arraylrhls_track_stubsHLS_data_r_s_din0 <= lrhls_track_stubsHLS_data_r_s_d0;
arraylrhls_track_stubsHLS_data_r_s_address1 <= lrhls_track_stubsHLS_data_r_s_address1;
arraylrhls_track_stubsHLS_data_r_s_ce1 <= lrhls_track_stubsHLS_data_r_s_ce1;
lrhls_track_stubsHLS_data_r_s_q1 <= arraylrhls_track_stubsHLS_data_r_s_dout1;
arraylrhls_track_stubsHLS_data_r_s_we1 <= lrhls_track_stubsHLS_data_r_s_we1;
arraylrhls_track_stubsHLS_data_r_s_din1 <= lrhls_track_stubsHLS_data_r_s_d1;
arraylrhls_track_stubsHLS_data_r_s_ready <= ready;
arraylrhls_track_stubsHLS_data_r_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_phi_s : AESL_automem_lrhls_track_stubsHLS_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_phi_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_phi_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_phi_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_phi_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_phi_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_phi_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_phi_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_phi_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_phi_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_phi_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_phi_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_phi_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_phi_s
arraylrhls_track_stubsHLS_data_phi_s_address0 <= lrhls_track_stubsHLS_data_phi_s_address0;
arraylrhls_track_stubsHLS_data_phi_s_ce0 <= lrhls_track_stubsHLS_data_phi_s_ce0;
lrhls_track_stubsHLS_data_phi_s_q0 <= arraylrhls_track_stubsHLS_data_phi_s_dout0;
arraylrhls_track_stubsHLS_data_phi_s_we0 <= lrhls_track_stubsHLS_data_phi_s_we0;
arraylrhls_track_stubsHLS_data_phi_s_din0 <= lrhls_track_stubsHLS_data_phi_s_d0;
arraylrhls_track_stubsHLS_data_phi_s_address1 <= lrhls_track_stubsHLS_data_phi_s_address1;
arraylrhls_track_stubsHLS_data_phi_s_ce1 <= lrhls_track_stubsHLS_data_phi_s_ce1;
lrhls_track_stubsHLS_data_phi_s_q1 <= arraylrhls_track_stubsHLS_data_phi_s_dout1;
arraylrhls_track_stubsHLS_data_phi_s_we1 <= lrhls_track_stubsHLS_data_phi_s_we1;
arraylrhls_track_stubsHLS_data_phi_s_din1 <= lrhls_track_stubsHLS_data_phi_s_d1;
arraylrhls_track_stubsHLS_data_phi_s_ready <= ready;
arraylrhls_track_stubsHLS_data_phi_s_done <= interface_done;

AESL_inst_lrhls_track_stubsHLS_data_z_s : AESL_automem_lrhls_track_stubsHLS_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_track_stubsHLS_data_z_s_ce0,
    we0       =>  arraylrhls_track_stubsHLS_data_z_s_we0,
    address0  =>  arraylrhls_track_stubsHLS_data_z_s_address0,
    din0      =>  arraylrhls_track_stubsHLS_data_z_s_din0,
    dout0     =>  arraylrhls_track_stubsHLS_data_z_s_dout0,
    ce1       =>  arraylrhls_track_stubsHLS_data_z_s_ce1,
    we1       =>  arraylrhls_track_stubsHLS_data_z_s_we1,
    address1  =>  arraylrhls_track_stubsHLS_data_z_s_address1,
    din1      =>  arraylrhls_track_stubsHLS_data_z_s_din1,
    dout1     =>  arraylrhls_track_stubsHLS_data_z_s_dout1,
    ready	    =>  arraylrhls_track_stubsHLS_data_z_s_ready,
    done	    =>  arraylrhls_track_stubsHLS_data_z_s_done
);

-- Assignment between dut and arraylrhls_track_stubsHLS_data_z_s
arraylrhls_track_stubsHLS_data_z_s_address0 <= lrhls_track_stubsHLS_data_z_s_address0;
arraylrhls_track_stubsHLS_data_z_s_ce0 <= lrhls_track_stubsHLS_data_z_s_ce0;
lrhls_track_stubsHLS_data_z_s_q0 <= arraylrhls_track_stubsHLS_data_z_s_dout0;
arraylrhls_track_stubsHLS_data_z_s_we0 <= lrhls_track_stubsHLS_data_z_s_we0;
arraylrhls_track_stubsHLS_data_z_s_din0 <= lrhls_track_stubsHLS_data_z_s_d0;
arraylrhls_track_stubsHLS_data_z_s_address1 <= lrhls_track_stubsHLS_data_z_s_address1;
arraylrhls_track_stubsHLS_data_z_s_ce1 <= lrhls_track_stubsHLS_data_z_s_ce1;
lrhls_track_stubsHLS_data_z_s_q1 <= arraylrhls_track_stubsHLS_data_z_s_dout1;
arraylrhls_track_stubsHLS_data_z_s_we1 <= lrhls_track_stubsHLS_data_z_s_we1;
arraylrhls_track_stubsHLS_data_z_s_din1 <= lrhls_track_stubsHLS_data_z_s_d1;
arraylrhls_track_stubsHLS_data_z_s_ready <= ready;
arraylrhls_track_stubsHLS_data_z_s_done <= interface_done;

gen_assign_lrhls_track_secEta_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_secEta_s_i <= AESL_REG_lrhls_track_secEta_s_i;
end process;

gen_out2in_lrhls_track_secEta_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_secEta_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_secEta_s_i := lrhls_track_secEta_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_secEta_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_secEta_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_secEta_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_secEta_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_secEta_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_secEta_s_o := (others => '0'); 
    elsif(lrhls_track_secEta_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_secEta_s_o := lrhls_track_secEta_s_o;
        AESL_REG_lrhls_track_secEta_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_secEta_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_secEta_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_secEta_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_secEta_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_secEta_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_secEta_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_secEta_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_secPhi_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_secPhi_s_i <= AESL_REG_lrhls_track_secPhi_s_i;
end process;

gen_out2in_lrhls_track_secPhi_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_secPhi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_secPhi_s_i := lrhls_track_secPhi_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_secPhi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_secPhi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_secPhi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_secPhi_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_secPhi_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_secPhi_s_o := (others => '0'); 
    elsif(lrhls_track_secPhi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_secPhi_s_o := lrhls_track_secPhi_s_o;
        AESL_REG_lrhls_track_secPhi_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_secPhi_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_secPhi_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_secPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_secPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_secPhi_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_secPhi_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_secPhi_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_qOverPt_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_qOverPt_s_i <= AESL_REG_lrhls_track_qOverPt_s_i;
end process;

gen_out2in_lrhls_track_qOverPt_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_qOverPt_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_qOverPt_s_i := lrhls_track_qOverPt_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_qOverPt_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_qOverPt_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_qOverPt_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_qOverPt_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_qOverPt_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_qOverPt_s_o := (others => '0'); 
    elsif(lrhls_track_qOverPt_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_qOverPt_s_o := lrhls_track_qOverPt_s_o;
        AESL_REG_lrhls_track_qOverPt_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_qOverPt_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_qOverPt_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_qOverPt_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_qOverPt_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_qOverPt_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_qOverPt_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_qOverPt_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_phi_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_phi_s_i <= AESL_REG_lrhls_track_phi_s_i;
end process;

gen_out2in_lrhls_track_phi_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_phi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_phi_s_i := lrhls_track_phi_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_phi_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_phi_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_phi_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_phi_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_phi_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_phi_s_o := (others => '0'); 
    elsif(lrhls_track_phi_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_phi_s_o := lrhls_track_phi_s_o;
        AESL_REG_lrhls_track_phi_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_phi_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_phi_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_phi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_phi_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_phi_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_phi_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_z_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_z_s_i <= AESL_REG_lrhls_track_z_s_i;
end process;

gen_out2in_lrhls_track_z_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_z_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_z_s_i := lrhls_track_z_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_z_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_z_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_z_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_z_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_z_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_z_s_o := (others => '0'); 
    elsif(lrhls_track_z_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_z_s_o := lrhls_track_z_s_o;
        AESL_REG_lrhls_track_z_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_z_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_z_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_z_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_z_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_z_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_z_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_track_cot_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_track_cot_s_i <= AESL_REG_lrhls_track_cot_s_i;
end process;

gen_out2in_lrhls_track_cot_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_track_cot_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_cot_s_i := lrhls_track_cot_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_track_cot_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_track_cot_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_track_cot_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_track_cot_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_track_cot_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_track_cot_s_o := (others => '0'); 
    elsif(lrhls_track_cot_s_o_ap_vld = '1') then
        AESL_REG_lrhls_track_cot_s_o := lrhls_track_cot_s_o;
        AESL_REG_lrhls_track_cot_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_track_cot_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_track_cot_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_cot_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_cot_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_track_cot_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_track_cot_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_track_cot_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_lrhls_secPhi_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_secPhi_s := (others => '0'); 
    elsif(lrhls_secPhi_s_ap_vld = '1') then
        AESL_REG_lrhls_secPhi_s := lrhls_secPhi_s;
        AESL_REG_lrhls_secPhi_s_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_secPhi_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_secPhi_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_secPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_secPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_secPhi_s_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_secPhi_s));
            writeline(fp, token_line);
            AESL_REG_lrhls_secPhi_s_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_lrhls_secEta_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_secEta_s := (others => '0'); 
    elsif(lrhls_secEta_s_ap_vld = '1') then
        AESL_REG_lrhls_secEta_s := lrhls_secEta_s;
        AESL_REG_lrhls_secEta_s_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_secEta_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_secEta_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_secEta_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_secEta_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_secEta_s_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_secEta_s));
            writeline(fp, token_line);
            AESL_REG_lrhls_secEta_s_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_HTParameter_qOverPt_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_HTParameter_qOverPt_i <= AESL_REG_lrhls_HTParameter_qOverPt_i;
end process;

gen_out2in_lrhls_HTParameter_qOverPt_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_HTParameter_qOverPt_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_qOverPt_i := lrhls_HTParameter_qOverPt_o;
    end if;
  end if;
end process;

read_file_process_lrhls_HTParameter_qOverPt : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_HTParameter_qOverPt, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_HTParameter_qOverPt & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_HTParameter_qOverPt_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_HTParameter_qOverPt_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_HTParameter_qOverPt_o := (others => '0'); 
    elsif(lrhls_HTParameter_qOverPt_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_qOverPt_o := lrhls_HTParameter_qOverPt_o;
        AESL_REG_lrhls_HTParameter_qOverPt_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_HTParameter_qOverPt : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_HTParameter_qOverPt_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_HTParameter_qOverPt_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_HTParameter_qOverPt_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_HTParameter_qOverPt_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_HTParameter_qOverPt_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_HTParameter_qOverPt_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_HTParameter_phiT_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_HTParameter_phiT_i <= AESL_REG_lrhls_HTParameter_phiT_i;
end process;

gen_out2in_lrhls_HTParameter_phiT_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_HTParameter_phiT_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_phiT_i := lrhls_HTParameter_phiT_o;
    end if;
  end if;
end process;

read_file_process_lrhls_HTParameter_phiT : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_HTParameter_phiT, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_HTParameter_phiT & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_HTParameter_phiT_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_HTParameter_phiT_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_HTParameter_phiT_o := (others => '0'); 
    elsif(lrhls_HTParameter_phiT_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_phiT_o := lrhls_HTParameter_phiT_o;
        AESL_REG_lrhls_HTParameter_phiT_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_HTParameter_phiT : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_HTParameter_phiT_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_HTParameter_phiT_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_HTParameter_phiT_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_HTParameter_phiT_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_HTParameter_phiT_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_HTParameter_phiT_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_HTParameter_cotTheta_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_HTParameter_cotTheta_i <= AESL_REG_lrhls_HTParameter_cotTheta_i;
end process;

gen_out2in_lrhls_HTParameter_cotTheta_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_HTParameter_cotTheta_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_cotTheta_i := lrhls_HTParameter_cotTheta_o;
    end if;
  end if;
end process;

read_file_process_lrhls_HTParameter_cotTheta : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_HTParameter_cotTheta, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_HTParameter_cotTheta & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_HTParameter_cotTheta_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_HTParameter_cotTheta_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_HTParameter_cotTheta_o := (others => '0'); 
    elsif(lrhls_HTParameter_cotTheta_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_cotTheta_o := lrhls_HTParameter_cotTheta_o;
        AESL_REG_lrhls_HTParameter_cotTheta_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_HTParameter_cotTheta : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_HTParameter_cotTheta_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_HTParameter_cotTheta_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_HTParameter_cotTheta_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_HTParameter_cotTheta_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_HTParameter_cotTheta_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_HTParameter_cotTheta_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_HTParameter_zT_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_HTParameter_zT_i <= AESL_REG_lrhls_HTParameter_zT_i;
end process;

gen_out2in_lrhls_HTParameter_zT_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_HTParameter_zT_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_zT_i := lrhls_HTParameter_zT_o;
    end if;
  end if;
end process;

read_file_process_lrhls_HTParameter_zT : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_HTParameter_zT, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_HTParameter_zT & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_HTParameter_zT_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_HTParameter_zT_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_HTParameter_zT_o := (others => '0'); 
    elsif(lrhls_HTParameter_zT_o_ap_vld = '1') then
        AESL_REG_lrhls_HTParameter_zT_o := lrhls_HTParameter_zT_o;
        AESL_REG_lrhls_HTParameter_zT_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_HTParameter_zT : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_HTParameter_zT_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_HTParameter_zT_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_HTParameter_zT_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_HTParameter_zT_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_HTParameter_zT_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_HTParameter_zT_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_LRParameter_qOverPt_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_LRParameter_qOverPt_i <= AESL_REG_lrhls_LRParameter_qOverPt_i;
end process;

gen_out2in_lrhls_LRParameter_qOverPt_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_LRParameter_qOverPt_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_qOverPt_i := lrhls_LRParameter_qOverPt_o;
    end if;
  end if;
end process;

read_file_process_lrhls_LRParameter_qOverPt : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_LRParameter_qOverPt, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_LRParameter_qOverPt & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_LRParameter_qOverPt_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_LRParameter_qOverPt_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_LRParameter_qOverPt_o := (others => '0'); 
    elsif(lrhls_LRParameter_qOverPt_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_qOverPt_o := lrhls_LRParameter_qOverPt_o;
        AESL_REG_lrhls_LRParameter_qOverPt_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_LRParameter_qOverPt : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_LRParameter_qOverPt_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_LRParameter_qOverPt_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_LRParameter_qOverPt_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_LRParameter_qOverPt_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_LRParameter_qOverPt_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_LRParameter_qOverPt_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_LRParameter_phiT_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_LRParameter_phiT_i <= AESL_REG_lrhls_LRParameter_phiT_i;
end process;

gen_out2in_lrhls_LRParameter_phiT_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_LRParameter_phiT_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_phiT_i := lrhls_LRParameter_phiT_o;
    end if;
  end if;
end process;

read_file_process_lrhls_LRParameter_phiT : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_LRParameter_phiT, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_LRParameter_phiT & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_LRParameter_phiT_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_LRParameter_phiT_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_LRParameter_phiT_o := (others => '0'); 
    elsif(lrhls_LRParameter_phiT_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_phiT_o := lrhls_LRParameter_phiT_o;
        AESL_REG_lrhls_LRParameter_phiT_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_LRParameter_phiT : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_LRParameter_phiT_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_LRParameter_phiT_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_LRParameter_phiT_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_LRParameter_phiT_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_LRParameter_phiT_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_LRParameter_phiT_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_LRParameter_cotTheta_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_LRParameter_cotTheta_i <= AESL_REG_lrhls_LRParameter_cotTheta_i;
end process;

gen_out2in_lrhls_LRParameter_cotTheta_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_LRParameter_cotTheta_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_cotTheta_i := lrhls_LRParameter_cotTheta_o;
    end if;
  end if;
end process;

read_file_process_lrhls_LRParameter_cotTheta : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_LRParameter_cotTheta, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_LRParameter_cotTheta & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_LRParameter_cotTheta_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_LRParameter_cotTheta_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_LRParameter_cotTheta_o := (others => '0'); 
    elsif(lrhls_LRParameter_cotTheta_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_cotTheta_o := lrhls_LRParameter_cotTheta_o;
        AESL_REG_lrhls_LRParameter_cotTheta_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_LRParameter_cotTheta : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_LRParameter_cotTheta_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_LRParameter_cotTheta_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_LRParameter_cotTheta_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_LRParameter_cotTheta_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_LRParameter_cotTheta_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_LRParameter_cotTheta_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_LRParameter_zT_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_LRParameter_zT_i <= AESL_REG_lrhls_LRParameter_zT_i;
end process;

gen_out2in_lrhls_LRParameter_zT_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_LRParameter_zT_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_zT_i := lrhls_LRParameter_zT_o;
    end if;
  end if;
end process;

read_file_process_lrhls_LRParameter_zT : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_LRParameter_zT, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_LRParameter_zT & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_LRParameter_zT_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_LRParameter_zT_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_LRParameter_zT_o := (others => '0'); 
    elsif(lrhls_LRParameter_zT_o_ap_vld = '1') then
        AESL_REG_lrhls_LRParameter_zT_o := lrhls_LRParameter_zT_o;
        AESL_REG_lrhls_LRParameter_zT_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_LRParameter_zT : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_LRParameter_zT_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_LRParameter_zT_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_LRParameter_zT_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_LRParameter_zT_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_LRParameter_zT_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_LRParameter_zT_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_stubs_size_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_stubs_size_s_i <= AESL_REG_lrhls_stubs_size_s_i;
end process;

gen_out2in_lrhls_stubs_size_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_stubs_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_stubs_size_s_i := lrhls_stubs_size_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_stubs_size_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_stubs_size_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_stubs_size_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_stubs_size_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_stubs_size_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_stubs_size_s_o := (others => '0'); 
    elsif(lrhls_stubs_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_stubs_size_s_o := lrhls_stubs_size_s_o;
        AESL_REG_lrhls_stubs_size_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_stubs_size_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_stubs_size_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_stubs_size_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_stubs_size_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_stubs_size_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_stubs_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_stubs_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_lrNumIterations_s
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_stubs_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_we0 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_we0;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_din0 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_d0;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_ce1;
lrhls_stubs_data_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_we1 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_we1;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_din1 <= lrhls_stubs_data_settingsHLS_lrNumIterations_s_d1;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_lrNumIterations_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_stubs_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_lrMinLayers_s
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_stubs_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_we0 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_we0;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_din0 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_d0;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_ce1;
lrhls_stubs_data_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_we1 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_we1;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_din1 <= lrhls_stubs_data_settingsHLS_lrMinLayers_s_d1;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_lrMinLayers_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we0;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_din0 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d0;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_we1;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_din1 <= lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_d1;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_lrMinLayersPS_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_stubs_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_lrResidPhi_s
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_stubs_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_we0 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_we0;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_din0 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_d0;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_ce1;
lrhls_stubs_data_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_we1 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_we1;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_din1 <= lrhls_stubs_data_settingsHLS_lrResidPhi_s_d1;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_lrResidPhi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_stubs_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we0;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_din0 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d0;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_ce1;
lrhls_stubs_data_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_we1;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_din1 <= lrhls_stubs_data_settingsHLS_lrResidZ2S_s_d1;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_lrResidZ2S_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_stubs_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_lrResidZPS_s
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_stubs_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_we0 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_we0;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_din0 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_d0;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_ce1;
lrhls_stubs_data_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_we1 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_we1;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_din1 <= lrhls_stubs_data_settingsHLS_lrResidZPS_s_d1;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_lrResidZPS_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_stubs_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we0;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_din0 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d0;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_ce1;
lrhls_stubs_data_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_we1;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_din1 <= lrhls_stubs_data_settingsHLS_chosenRofPhi_s_d1;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_chosenRofPhi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_stubs_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_chosenRofZ_s
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_stubs_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_we0 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_we0;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_din0 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_d0;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_ce1;
lrhls_stubs_data_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_we1 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_we1;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_din1 <= lrhls_stubs_data_settingsHLS_chosenRofZ_s_d1;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_chosenRofZ_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_stubs_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_invPtToDphi_s
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_stubs_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_we0 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_we0;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_din0 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_d0;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_ce1;
lrhls_stubs_data_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_we1 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_we1;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_din1 <= lrhls_stubs_data_settingsHLS_invPtToDphi_s_d1;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_invPtToDphi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_stubs_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we0;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_din0 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d0;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_ce1;
lrhls_stubs_data_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_we1;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_din1 <= lrhls_stubs_data_settingsHLS_trackerNumLayers_s_d1;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_ready <= ready;
arraylrhls_stubs_data_settingsHLS_trackerNumLayers_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0;
lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1;
lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_q1 <= arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 <= lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_barrel_s : AESL_automem_lrhls_stubs_data_moduleHLS_barrel_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_barrel_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_barrel_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_barrel_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_barrel_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_barrel_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_barrel_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_barrel_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_barrel_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_barrel_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_barrel_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_barrel_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_barrel_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_barrel_s
arraylrhls_stubs_data_moduleHLS_barrel_s_address0 <= lrhls_stubs_data_moduleHLS_barrel_s_address0;
arraylrhls_stubs_data_moduleHLS_barrel_s_ce0 <= lrhls_stubs_data_moduleHLS_barrel_s_ce0;
lrhls_stubs_data_moduleHLS_barrel_s_q0 <= arraylrhls_stubs_data_moduleHLS_barrel_s_dout0;
arraylrhls_stubs_data_moduleHLS_barrel_s_we0 <= lrhls_stubs_data_moduleHLS_barrel_s_we0;
arraylrhls_stubs_data_moduleHLS_barrel_s_din0 <= lrhls_stubs_data_moduleHLS_barrel_s_d0;
arraylrhls_stubs_data_moduleHLS_barrel_s_address1 <= lrhls_stubs_data_moduleHLS_barrel_s_address1;
arraylrhls_stubs_data_moduleHLS_barrel_s_ce1 <= lrhls_stubs_data_moduleHLS_barrel_s_ce1;
lrhls_stubs_data_moduleHLS_barrel_s_q1 <= arraylrhls_stubs_data_moduleHLS_barrel_s_dout1;
arraylrhls_stubs_data_moduleHLS_barrel_s_we1 <= lrhls_stubs_data_moduleHLS_barrel_s_we1;
arraylrhls_stubs_data_moduleHLS_barrel_s_din1 <= lrhls_stubs_data_moduleHLS_barrel_s_d1;
arraylrhls_stubs_data_moduleHLS_barrel_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_barrel_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_psModule_s : AESL_automem_lrhls_stubs_data_moduleHLS_psModule_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_psModule_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_psModule_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_psModule_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_psModule_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_psModule_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_psModule_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_psModule_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_psModule_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_psModule_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_psModule_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_psModule_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_psModule_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_psModule_s
arraylrhls_stubs_data_moduleHLS_psModule_s_address0 <= lrhls_stubs_data_moduleHLS_psModule_s_address0;
arraylrhls_stubs_data_moduleHLS_psModule_s_ce0 <= lrhls_stubs_data_moduleHLS_psModule_s_ce0;
lrhls_stubs_data_moduleHLS_psModule_s_q0 <= arraylrhls_stubs_data_moduleHLS_psModule_s_dout0;
arraylrhls_stubs_data_moduleHLS_psModule_s_we0 <= lrhls_stubs_data_moduleHLS_psModule_s_we0;
arraylrhls_stubs_data_moduleHLS_psModule_s_din0 <= lrhls_stubs_data_moduleHLS_psModule_s_d0;
arraylrhls_stubs_data_moduleHLS_psModule_s_address1 <= lrhls_stubs_data_moduleHLS_psModule_s_address1;
arraylrhls_stubs_data_moduleHLS_psModule_s_ce1 <= lrhls_stubs_data_moduleHLS_psModule_s_ce1;
lrhls_stubs_data_moduleHLS_psModule_s_q1 <= arraylrhls_stubs_data_moduleHLS_psModule_s_dout1;
arraylrhls_stubs_data_moduleHLS_psModule_s_we1 <= lrhls_stubs_data_moduleHLS_psModule_s_we1;
arraylrhls_stubs_data_moduleHLS_psModule_s_din1 <= lrhls_stubs_data_moduleHLS_psModule_s_d1;
arraylrhls_stubs_data_moduleHLS_psModule_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_psModule_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_moduleHLS_layerId_s : AESL_automem_lrhls_stubs_data_moduleHLS_layerId_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_moduleHLS_layerId_s_ce0,
    we0       =>  arraylrhls_stubs_data_moduleHLS_layerId_s_we0,
    address0  =>  arraylrhls_stubs_data_moduleHLS_layerId_s_address0,
    din0      =>  arraylrhls_stubs_data_moduleHLS_layerId_s_din0,
    dout0     =>  arraylrhls_stubs_data_moduleHLS_layerId_s_dout0,
    ce1       =>  arraylrhls_stubs_data_moduleHLS_layerId_s_ce1,
    we1       =>  arraylrhls_stubs_data_moduleHLS_layerId_s_we1,
    address1  =>  arraylrhls_stubs_data_moduleHLS_layerId_s_address1,
    din1      =>  arraylrhls_stubs_data_moduleHLS_layerId_s_din1,
    dout1     =>  arraylrhls_stubs_data_moduleHLS_layerId_s_dout1,
    ready	    =>  arraylrhls_stubs_data_moduleHLS_layerId_s_ready,
    done	    =>  arraylrhls_stubs_data_moduleHLS_layerId_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_moduleHLS_layerId_s
arraylrhls_stubs_data_moduleHLS_layerId_s_address0 <= lrhls_stubs_data_moduleHLS_layerId_s_address0;
arraylrhls_stubs_data_moduleHLS_layerId_s_ce0 <= lrhls_stubs_data_moduleHLS_layerId_s_ce0;
lrhls_stubs_data_moduleHLS_layerId_s_q0 <= arraylrhls_stubs_data_moduleHLS_layerId_s_dout0;
arraylrhls_stubs_data_moduleHLS_layerId_s_we0 <= lrhls_stubs_data_moduleHLS_layerId_s_we0;
arraylrhls_stubs_data_moduleHLS_layerId_s_din0 <= lrhls_stubs_data_moduleHLS_layerId_s_d0;
arraylrhls_stubs_data_moduleHLS_layerId_s_address1 <= lrhls_stubs_data_moduleHLS_layerId_s_address1;
arraylrhls_stubs_data_moduleHLS_layerId_s_ce1 <= lrhls_stubs_data_moduleHLS_layerId_s_ce1;
lrhls_stubs_data_moduleHLS_layerId_s_q1 <= arraylrhls_stubs_data_moduleHLS_layerId_s_dout1;
arraylrhls_stubs_data_moduleHLS_layerId_s_we1 <= lrhls_stubs_data_moduleHLS_layerId_s_we1;
arraylrhls_stubs_data_moduleHLS_layerId_s_din1 <= lrhls_stubs_data_moduleHLS_layerId_s_d1;
arraylrhls_stubs_data_moduleHLS_layerId_s_ready <= ready;
arraylrhls_stubs_data_moduleHLS_layerId_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_r_s : AESL_automem_lrhls_stubs_data_r_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_r_s_ce0,
    we0       =>  arraylrhls_stubs_data_r_s_we0,
    address0  =>  arraylrhls_stubs_data_r_s_address0,
    din0      =>  arraylrhls_stubs_data_r_s_din0,
    dout0     =>  arraylrhls_stubs_data_r_s_dout0,
    ce1       =>  arraylrhls_stubs_data_r_s_ce1,
    we1       =>  arraylrhls_stubs_data_r_s_we1,
    address1  =>  arraylrhls_stubs_data_r_s_address1,
    din1      =>  arraylrhls_stubs_data_r_s_din1,
    dout1     =>  arraylrhls_stubs_data_r_s_dout1,
    ready	    =>  arraylrhls_stubs_data_r_s_ready,
    done	    =>  arraylrhls_stubs_data_r_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_r_s
arraylrhls_stubs_data_r_s_address0 <= lrhls_stubs_data_r_s_address0;
arraylrhls_stubs_data_r_s_ce0 <= lrhls_stubs_data_r_s_ce0;
lrhls_stubs_data_r_s_q0 <= arraylrhls_stubs_data_r_s_dout0;
arraylrhls_stubs_data_r_s_we0 <= lrhls_stubs_data_r_s_we0;
arraylrhls_stubs_data_r_s_din0 <= lrhls_stubs_data_r_s_d0;
arraylrhls_stubs_data_r_s_address1 <= lrhls_stubs_data_r_s_address1;
arraylrhls_stubs_data_r_s_ce1 <= lrhls_stubs_data_r_s_ce1;
lrhls_stubs_data_r_s_q1 <= arraylrhls_stubs_data_r_s_dout1;
arraylrhls_stubs_data_r_s_we1 <= lrhls_stubs_data_r_s_we1;
arraylrhls_stubs_data_r_s_din1 <= lrhls_stubs_data_r_s_d1;
arraylrhls_stubs_data_r_s_ready <= ready;
arraylrhls_stubs_data_r_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_phi_s : AESL_automem_lrhls_stubs_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_phi_s_ce0,
    we0       =>  arraylrhls_stubs_data_phi_s_we0,
    address0  =>  arraylrhls_stubs_data_phi_s_address0,
    din0      =>  arraylrhls_stubs_data_phi_s_din0,
    dout0     =>  arraylrhls_stubs_data_phi_s_dout0,
    ce1       =>  arraylrhls_stubs_data_phi_s_ce1,
    we1       =>  arraylrhls_stubs_data_phi_s_we1,
    address1  =>  arraylrhls_stubs_data_phi_s_address1,
    din1      =>  arraylrhls_stubs_data_phi_s_din1,
    dout1     =>  arraylrhls_stubs_data_phi_s_dout1,
    ready	    =>  arraylrhls_stubs_data_phi_s_ready,
    done	    =>  arraylrhls_stubs_data_phi_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_phi_s
arraylrhls_stubs_data_phi_s_address0 <= lrhls_stubs_data_phi_s_address0;
arraylrhls_stubs_data_phi_s_ce0 <= lrhls_stubs_data_phi_s_ce0;
lrhls_stubs_data_phi_s_q0 <= arraylrhls_stubs_data_phi_s_dout0;
arraylrhls_stubs_data_phi_s_we0 <= lrhls_stubs_data_phi_s_we0;
arraylrhls_stubs_data_phi_s_din0 <= lrhls_stubs_data_phi_s_d0;
arraylrhls_stubs_data_phi_s_address1 <= lrhls_stubs_data_phi_s_address1;
arraylrhls_stubs_data_phi_s_ce1 <= lrhls_stubs_data_phi_s_ce1;
lrhls_stubs_data_phi_s_q1 <= arraylrhls_stubs_data_phi_s_dout1;
arraylrhls_stubs_data_phi_s_we1 <= lrhls_stubs_data_phi_s_we1;
arraylrhls_stubs_data_phi_s_din1 <= lrhls_stubs_data_phi_s_d1;
arraylrhls_stubs_data_phi_s_ready <= ready;
arraylrhls_stubs_data_phi_s_done <= interface_done;

AESL_inst_lrhls_stubs_data_z_s : AESL_automem_lrhls_stubs_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubs_data_z_s_ce0,
    we0       =>  arraylrhls_stubs_data_z_s_we0,
    address0  =>  arraylrhls_stubs_data_z_s_address0,
    din0      =>  arraylrhls_stubs_data_z_s_din0,
    dout0     =>  arraylrhls_stubs_data_z_s_dout0,
    ce1       =>  arraylrhls_stubs_data_z_s_ce1,
    we1       =>  arraylrhls_stubs_data_z_s_we1,
    address1  =>  arraylrhls_stubs_data_z_s_address1,
    din1      =>  arraylrhls_stubs_data_z_s_din1,
    dout1     =>  arraylrhls_stubs_data_z_s_dout1,
    ready	    =>  arraylrhls_stubs_data_z_s_ready,
    done	    =>  arraylrhls_stubs_data_z_s_done
);

-- Assignment between dut and arraylrhls_stubs_data_z_s
arraylrhls_stubs_data_z_s_address0 <= lrhls_stubs_data_z_s_address0;
arraylrhls_stubs_data_z_s_ce0 <= lrhls_stubs_data_z_s_ce0;
lrhls_stubs_data_z_s_q0 <= arraylrhls_stubs_data_z_s_dout0;
arraylrhls_stubs_data_z_s_we0 <= lrhls_stubs_data_z_s_we0;
arraylrhls_stubs_data_z_s_din0 <= lrhls_stubs_data_z_s_d0;
arraylrhls_stubs_data_z_s_address1 <= lrhls_stubs_data_z_s_address1;
arraylrhls_stubs_data_z_s_ce1 <= lrhls_stubs_data_z_s_ce1;
lrhls_stubs_data_z_s_q1 <= arraylrhls_stubs_data_z_s_dout1;
arraylrhls_stubs_data_z_s_we1 <= lrhls_stubs_data_z_s_we1;
arraylrhls_stubs_data_z_s_din1 <= lrhls_stubs_data_z_s_d1;
arraylrhls_stubs_data_z_s_ready <= ready;
arraylrhls_stubs_data_z_s_done <= interface_done;

gen_assign_lrhls_valid_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_valid_s_i <= AESL_REG_lrhls_valid_s_i(0);
end process;

gen_out2in_lrhls_valid_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_valid_s_o_ap_vld = '1') then
        AESL_REG_lrhls_valid_s_i(0) := lrhls_valid_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_valid_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_valid_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_valid_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_valid_s_i := esl_str2lv_hex(token, 1 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_valid_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_valid_s_o := (others => '0'); 
    elsif(lrhls_valid_s_o_ap_vld = '1') then
        AESL_REG_lrhls_valid_s_o(0) := lrhls_valid_s_o;
        AESL_REG_lrhls_valid_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_valid_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_valid_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_valid_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_valid_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_valid_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_valid_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_valid_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_stubMap_size_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_stubMap_size_s_i <= AESL_REG_lrhls_stubMap_size_s_i;
end process;

gen_out2in_lrhls_stubMap_size_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_stubMap_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_stubMap_size_s_i := lrhls_stubMap_size_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_stubMap_size_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_stubMap_size_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_stubMap_size_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_stubMap_size_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_stubMap_size_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_stubMap_size_s_o := (others => '0'); 
    elsif(lrhls_stubMap_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_stubMap_size_s_o := lrhls_stubMap_size_s_o;
        AESL_REG_lrhls_stubMap_size_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_stubMap_size_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_stubMap_size_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_stubMap_size_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_stubMap_size_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_stubMap_size_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_stubMap_data_first : AESL_automem_lrhls_stubMap_data_first port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_first_ce0,
    we0       =>  arraylrhls_stubMap_data_first_we0,
    address0  =>  arraylrhls_stubMap_data_first_address0,
    din0      =>  arraylrhls_stubMap_data_first_din0,
    dout0     =>  arraylrhls_stubMap_data_first_dout0,
    ce1       =>  arraylrhls_stubMap_data_first_ce1,
    we1       =>  arraylrhls_stubMap_data_first_we1,
    address1  =>  arraylrhls_stubMap_data_first_address1,
    din1      =>  arraylrhls_stubMap_data_first_din1,
    dout1     =>  arraylrhls_stubMap_data_first_dout1,
    ready	    =>  arraylrhls_stubMap_data_first_ready,
    done	    =>  arraylrhls_stubMap_data_first_done
);

-- Assignment between dut and arraylrhls_stubMap_data_first
arraylrhls_stubMap_data_first_address0 <= lrhls_stubMap_data_first_address0;
arraylrhls_stubMap_data_first_ce0 <= lrhls_stubMap_data_first_ce0;
lrhls_stubMap_data_first_q0 <= arraylrhls_stubMap_data_first_dout0;
arraylrhls_stubMap_data_first_we0 <= lrhls_stubMap_data_first_we0;
arraylrhls_stubMap_data_first_din0 <= lrhls_stubMap_data_first_d0;
arraylrhls_stubMap_data_first_we1 <= '0';
arraylrhls_stubMap_data_first_din1 <= (others => '0');
arraylrhls_stubMap_data_first_ready <= ready;
arraylrhls_stubMap_data_first_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_size_s : AESL_automem_lrhls_stubMap_data_second_size_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_size_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_size_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_size_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_size_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_size_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_size_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_size_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_size_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_size_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_size_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_size_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_size_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_size_s
arraylrhls_stubMap_data_second_size_s_address0 <= lrhls_stubMap_data_second_size_s_address0;
arraylrhls_stubMap_data_second_size_s_ce0 <= lrhls_stubMap_data_second_size_s_ce0;
lrhls_stubMap_data_second_size_s_q0 <= arraylrhls_stubMap_data_second_size_s_dout0;
arraylrhls_stubMap_data_second_size_s_we0 <= lrhls_stubMap_data_second_size_s_we0;
arraylrhls_stubMap_data_second_size_s_din0 <= lrhls_stubMap_data_second_size_s_d0;
arraylrhls_stubMap_data_second_size_s_we1 <= '0';
arraylrhls_stubMap_data_second_size_s_din1 <= (others => '0');
arraylrhls_stubMap_data_second_size_s_ready <= ready;
arraylrhls_stubMap_data_second_size_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce0;
lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we0;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_din0 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d0;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ce1;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_we1;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_din1 <= lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_d1;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_ready <= ready;
arraylrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_barrel_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_barrel_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_barrel_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_barrel_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_barrel_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_psModule_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_psModule_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_psModule_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_psModule_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_psModule_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_moduleHLS_layerId_s : AESL_automem_lrhls_stubMap_data_second_data_moduleHLS_layerId_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address0;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce0;
lrhls_stubMap_data_second_data_moduleHLS_layerId_s_q0 <= arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_dout0;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we0;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_din0 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d0;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_address1;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_ce1;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_we1;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_din1 <= lrhls_stubMap_data_second_data_moduleHLS_layerId_s_d1;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_ready <= ready;
arraylrhls_stubMap_data_second_data_moduleHLS_layerId_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_r_s : AESL_automem_lrhls_stubMap_data_second_data_r_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_r_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_r_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_r_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_r_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_r_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_r_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_r_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_r_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_r_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_r_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_r_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_r_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_r_s
arraylrhls_stubMap_data_second_data_r_s_address0 <= lrhls_stubMap_data_second_data_r_s_address0;
arraylrhls_stubMap_data_second_data_r_s_ce0 <= lrhls_stubMap_data_second_data_r_s_ce0;
lrhls_stubMap_data_second_data_r_s_q0 <= arraylrhls_stubMap_data_second_data_r_s_dout0;
arraylrhls_stubMap_data_second_data_r_s_we0 <= lrhls_stubMap_data_second_data_r_s_we0;
arraylrhls_stubMap_data_second_data_r_s_din0 <= lrhls_stubMap_data_second_data_r_s_d0;
arraylrhls_stubMap_data_second_data_r_s_address1 <= lrhls_stubMap_data_second_data_r_s_address1;
arraylrhls_stubMap_data_second_data_r_s_ce1 <= lrhls_stubMap_data_second_data_r_s_ce1;
lrhls_stubMap_data_second_data_r_s_q1 <= arraylrhls_stubMap_data_second_data_r_s_dout1;
arraylrhls_stubMap_data_second_data_r_s_we1 <= lrhls_stubMap_data_second_data_r_s_we1;
arraylrhls_stubMap_data_second_data_r_s_din1 <= lrhls_stubMap_data_second_data_r_s_d1;
arraylrhls_stubMap_data_second_data_r_s_ready <= ready;
arraylrhls_stubMap_data_second_data_r_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_phi_s : AESL_automem_lrhls_stubMap_data_second_data_phi_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_phi_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_phi_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_phi_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_phi_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_phi_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_phi_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_phi_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_phi_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_phi_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_phi_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_phi_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_phi_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_phi_s
arraylrhls_stubMap_data_second_data_phi_s_address0 <= lrhls_stubMap_data_second_data_phi_s_address0;
arraylrhls_stubMap_data_second_data_phi_s_ce0 <= lrhls_stubMap_data_second_data_phi_s_ce0;
lrhls_stubMap_data_second_data_phi_s_q0 <= arraylrhls_stubMap_data_second_data_phi_s_dout0;
arraylrhls_stubMap_data_second_data_phi_s_we0 <= lrhls_stubMap_data_second_data_phi_s_we0;
arraylrhls_stubMap_data_second_data_phi_s_din0 <= lrhls_stubMap_data_second_data_phi_s_d0;
arraylrhls_stubMap_data_second_data_phi_s_address1 <= lrhls_stubMap_data_second_data_phi_s_address1;
arraylrhls_stubMap_data_second_data_phi_s_ce1 <= lrhls_stubMap_data_second_data_phi_s_ce1;
arraylrhls_stubMap_data_second_data_phi_s_we1 <= lrhls_stubMap_data_second_data_phi_s_we1;
arraylrhls_stubMap_data_second_data_phi_s_din1 <= lrhls_stubMap_data_second_data_phi_s_d1;
arraylrhls_stubMap_data_second_data_phi_s_ready <= ready;
arraylrhls_stubMap_data_second_data_phi_s_done <= interface_done;

AESL_inst_lrhls_stubMap_data_second_data_z_s : AESL_automem_lrhls_stubMap_data_second_data_z_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_stubMap_data_second_data_z_s_ce0,
    we0       =>  arraylrhls_stubMap_data_second_data_z_s_we0,
    address0  =>  arraylrhls_stubMap_data_second_data_z_s_address0,
    din0      =>  arraylrhls_stubMap_data_second_data_z_s_din0,
    dout0     =>  arraylrhls_stubMap_data_second_data_z_s_dout0,
    ce1       =>  arraylrhls_stubMap_data_second_data_z_s_ce1,
    we1       =>  arraylrhls_stubMap_data_second_data_z_s_we1,
    address1  =>  arraylrhls_stubMap_data_second_data_z_s_address1,
    din1      =>  arraylrhls_stubMap_data_second_data_z_s_din1,
    dout1     =>  arraylrhls_stubMap_data_second_data_z_s_dout1,
    ready	    =>  arraylrhls_stubMap_data_second_data_z_s_ready,
    done	    =>  arraylrhls_stubMap_data_second_data_z_s_done
);

-- Assignment between dut and arraylrhls_stubMap_data_second_data_z_s
arraylrhls_stubMap_data_second_data_z_s_address0 <= lrhls_stubMap_data_second_data_z_s_address0;
arraylrhls_stubMap_data_second_data_z_s_ce0 <= lrhls_stubMap_data_second_data_z_s_ce0;
lrhls_stubMap_data_second_data_z_s_q0 <= arraylrhls_stubMap_data_second_data_z_s_dout0;
arraylrhls_stubMap_data_second_data_z_s_we0 <= lrhls_stubMap_data_second_data_z_s_we0;
arraylrhls_stubMap_data_second_data_z_s_din0 <= lrhls_stubMap_data_second_data_z_s_d0;
arraylrhls_stubMap_data_second_data_z_s_address1 <= lrhls_stubMap_data_second_data_z_s_address1;
arraylrhls_stubMap_data_second_data_z_s_ce1 <= lrhls_stubMap_data_second_data_z_s_ce1;
arraylrhls_stubMap_data_second_data_z_s_we1 <= lrhls_stubMap_data_second_data_z_s_we1;
arraylrhls_stubMap_data_second_data_z_s_din1 <= lrhls_stubMap_data_second_data_z_s_d1;
arraylrhls_stubMap_data_second_data_z_s_ready <= ready;
arraylrhls_stubMap_data_second_data_z_s_done <= interface_done;

gen_assign_lrhls_layerPopulation_size_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_layerPopulation_size_s_i <= AESL_REG_lrhls_layerPopulation_size_s_i;
end process;

gen_out2in_lrhls_layerPopulation_size_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_layerPopulation_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_layerPopulation_size_s_i := lrhls_layerPopulation_size_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_layerPopulation_size_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_layerPopulation_size_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_layerPopulation_size_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_layerPopulation_size_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_layerPopulation_size_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_layerPopulation_size_s_o := (others => '0'); 
    elsif(lrhls_layerPopulation_size_s_o_ap_vld = '1') then
        AESL_REG_lrhls_layerPopulation_size_s_o := lrhls_layerPopulation_size_s_o;
        AESL_REG_lrhls_layerPopulation_size_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_layerPopulation_size_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_layerPopulation_size_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_layerPopulation_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_layerPopulation_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_layerPopulation_size_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_layerPopulation_size_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_layerPopulation_size_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_layerPopulation_data_first : AESL_automem_lrhls_layerPopulation_data_first port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_layerPopulation_data_first_ce0,
    we0       =>  arraylrhls_layerPopulation_data_first_we0,
    address0  =>  arraylrhls_layerPopulation_data_first_address0,
    din0      =>  arraylrhls_layerPopulation_data_first_din0,
    dout0     =>  arraylrhls_layerPopulation_data_first_dout0,
    ce1       =>  arraylrhls_layerPopulation_data_first_ce1,
    we1       =>  arraylrhls_layerPopulation_data_first_we1,
    address1  =>  arraylrhls_layerPopulation_data_first_address1,
    din1      =>  arraylrhls_layerPopulation_data_first_din1,
    dout1     =>  arraylrhls_layerPopulation_data_first_dout1,
    ready	    =>  arraylrhls_layerPopulation_data_first_ready,
    done	    =>  arraylrhls_layerPopulation_data_first_done
);

-- Assignment between dut and arraylrhls_layerPopulation_data_first
arraylrhls_layerPopulation_data_first_address0 <= lrhls_layerPopulation_data_first_address0;
arraylrhls_layerPopulation_data_first_ce0 <= lrhls_layerPopulation_data_first_ce0;
lrhls_layerPopulation_data_first_q0 <= arraylrhls_layerPopulation_data_first_dout0;
arraylrhls_layerPopulation_data_first_we0 <= lrhls_layerPopulation_data_first_we0;
arraylrhls_layerPopulation_data_first_din0 <= lrhls_layerPopulation_data_first_d0;
arraylrhls_layerPopulation_data_first_we1 <= '0';
arraylrhls_layerPopulation_data_first_din1 <= (others => '0');
arraylrhls_layerPopulation_data_first_ready <= ready;
arraylrhls_layerPopulation_data_first_done <= interface_done;

AESL_inst_lrhls_layerPopulation_data_second : AESL_automem_lrhls_layerPopulation_data_second port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_layerPopulation_data_second_ce0,
    we0       =>  arraylrhls_layerPopulation_data_second_we0,
    address0  =>  arraylrhls_layerPopulation_data_second_address0,
    din0      =>  arraylrhls_layerPopulation_data_second_din0,
    dout0     =>  arraylrhls_layerPopulation_data_second_dout0,
    ce1       =>  arraylrhls_layerPopulation_data_second_ce1,
    we1       =>  arraylrhls_layerPopulation_data_second_we1,
    address1  =>  arraylrhls_layerPopulation_data_second_address1,
    din1      =>  arraylrhls_layerPopulation_data_second_din1,
    dout1     =>  arraylrhls_layerPopulation_data_second_dout1,
    ready	    =>  arraylrhls_layerPopulation_data_second_ready,
    done	    =>  arraylrhls_layerPopulation_data_second_done
);

-- Assignment between dut and arraylrhls_layerPopulation_data_second
arraylrhls_layerPopulation_data_second_address0 <= lrhls_layerPopulation_data_second_address0;
arraylrhls_layerPopulation_data_second_ce0 <= lrhls_layerPopulation_data_second_ce0;
lrhls_layerPopulation_data_second_q0 <= arraylrhls_layerPopulation_data_second_dout0;
arraylrhls_layerPopulation_data_second_we0 <= lrhls_layerPopulation_data_second_we0;
arraylrhls_layerPopulation_data_second_din0 <= lrhls_layerPopulation_data_second_d0;
arraylrhls_layerPopulation_data_second_we1 <= '0';
arraylrhls_layerPopulation_data_second_din1 <= (others => '0');
arraylrhls_layerPopulation_data_second_ready <= ready;
arraylrhls_layerPopulation_data_second_done <= interface_done;

gen_out_lrhls_residuals_size_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_residuals_size_s := (others => '0'); 
    elsif(lrhls_residuals_size_s_ap_vld = '1') then
        AESL_REG_lrhls_residuals_size_s := lrhls_residuals_size_s;
        AESL_REG_lrhls_residuals_size_s_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_residuals_size_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_residuals_size_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_residuals_size_s_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_residuals_size_s));
            writeline(fp, token_line);
            AESL_REG_lrhls_residuals_size_s_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

AESL_inst_lrhls_residuals_data_first : AESL_automem_lrhls_residuals_data_first port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_first_ce0,
    we0       =>  arraylrhls_residuals_data_first_we0,
    address0  =>  arraylrhls_residuals_data_first_address0,
    din0      =>  arraylrhls_residuals_data_first_din0,
    dout0     =>  arraylrhls_residuals_data_first_dout0,
    ce1       =>  arraylrhls_residuals_data_first_ce1,
    we1       =>  arraylrhls_residuals_data_first_we1,
    address1  =>  arraylrhls_residuals_data_first_address1,
    din1      =>  arraylrhls_residuals_data_first_din1,
    dout1     =>  arraylrhls_residuals_data_first_dout1,
    ready	    =>  arraylrhls_residuals_data_first_ready,
    done	    =>  arraylrhls_residuals_data_first_done
);

-- Assignment between dut and arraylrhls_residuals_data_first
arraylrhls_residuals_data_first_address0 <= lrhls_residuals_data_first_address0;
arraylrhls_residuals_data_first_ce0 <= lrhls_residuals_data_first_ce0;
lrhls_residuals_data_first_q0 <= arraylrhls_residuals_data_first_dout0;
arraylrhls_residuals_data_first_we0 <= lrhls_residuals_data_first_we0;
arraylrhls_residuals_data_first_din0 <= lrhls_residuals_data_first_d0;
arraylrhls_residuals_data_first_we1 <= '0';
arraylrhls_residuals_data_first_din1 <= (others => '0');
arraylrhls_residuals_data_first_ready <= ready;
arraylrhls_residuals_data_first_done <= interface_done;

AESL_inst_lrhls_residuals_data_second_size_s : AESL_automem_lrhls_residuals_data_second_size_s port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_second_size_s_ce0,
    we0       =>  arraylrhls_residuals_data_second_size_s_we0,
    address0  =>  arraylrhls_residuals_data_second_size_s_address0,
    din0      =>  arraylrhls_residuals_data_second_size_s_din0,
    dout0     =>  arraylrhls_residuals_data_second_size_s_dout0,
    ce1       =>  arraylrhls_residuals_data_second_size_s_ce1,
    we1       =>  arraylrhls_residuals_data_second_size_s_we1,
    address1  =>  arraylrhls_residuals_data_second_size_s_address1,
    din1      =>  arraylrhls_residuals_data_second_size_s_din1,
    dout1     =>  arraylrhls_residuals_data_second_size_s_dout1,
    ready	    =>  arraylrhls_residuals_data_second_size_s_ready,
    done	    =>  arraylrhls_residuals_data_second_size_s_done
);

-- Assignment between dut and arraylrhls_residuals_data_second_size_s
arraylrhls_residuals_data_second_size_s_address0 <= lrhls_residuals_data_second_size_s_address0;
arraylrhls_residuals_data_second_size_s_ce0 <= lrhls_residuals_data_second_size_s_ce0;
lrhls_residuals_data_second_size_s_q0 <= arraylrhls_residuals_data_second_size_s_dout0;
arraylrhls_residuals_data_second_size_s_we0 <= lrhls_residuals_data_second_size_s_we0;
arraylrhls_residuals_data_second_size_s_din0 <= lrhls_residuals_data_second_size_s_d0;
arraylrhls_residuals_data_second_size_s_we1 <= '0';
arraylrhls_residuals_data_second_size_s_din1 <= (others => '0');
arraylrhls_residuals_data_second_size_s_ready <= ready;
arraylrhls_residuals_data_second_size_s_done <= interface_done;

AESL_inst_lrhls_residuals_data_second_data_phi : AESL_automem_lrhls_residuals_data_second_data_phi port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_second_data_phi_ce0,
    we0       =>  arraylrhls_residuals_data_second_data_phi_we0,
    address0  =>  arraylrhls_residuals_data_second_data_phi_address0,
    din0      =>  arraylrhls_residuals_data_second_data_phi_din0,
    dout0     =>  arraylrhls_residuals_data_second_data_phi_dout0,
    ce1       =>  arraylrhls_residuals_data_second_data_phi_ce1,
    we1       =>  arraylrhls_residuals_data_second_data_phi_we1,
    address1  =>  arraylrhls_residuals_data_second_data_phi_address1,
    din1      =>  arraylrhls_residuals_data_second_data_phi_din1,
    dout1     =>  arraylrhls_residuals_data_second_data_phi_dout1,
    ready	    =>  arraylrhls_residuals_data_second_data_phi_ready,
    done	    =>  arraylrhls_residuals_data_second_data_phi_done
);

-- Assignment between dut and arraylrhls_residuals_data_second_data_phi
arraylrhls_residuals_data_second_data_phi_address0 <= lrhls_residuals_data_second_data_phi_address0;
arraylrhls_residuals_data_second_data_phi_ce0 <= lrhls_residuals_data_second_data_phi_ce0;
lrhls_residuals_data_second_data_phi_q0 <= arraylrhls_residuals_data_second_data_phi_dout0;
arraylrhls_residuals_data_second_data_phi_we0 <= lrhls_residuals_data_second_data_phi_we0;
arraylrhls_residuals_data_second_data_phi_din0 <= lrhls_residuals_data_second_data_phi_d0;
arraylrhls_residuals_data_second_data_phi_address1 <= lrhls_residuals_data_second_data_phi_address1;
arraylrhls_residuals_data_second_data_phi_ce1 <= lrhls_residuals_data_second_data_phi_ce1;
arraylrhls_residuals_data_second_data_phi_we1 <= lrhls_residuals_data_second_data_phi_we1;
arraylrhls_residuals_data_second_data_phi_din1 <= lrhls_residuals_data_second_data_phi_d1;
arraylrhls_residuals_data_second_data_phi_ready <= ready;
arraylrhls_residuals_data_second_data_phi_done <= interface_done;

AESL_inst_lrhls_residuals_data_second_data_z : AESL_automem_lrhls_residuals_data_second_data_z port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_second_data_z_ce0,
    we0       =>  arraylrhls_residuals_data_second_data_z_we0,
    address0  =>  arraylrhls_residuals_data_second_data_z_address0,
    din0      =>  arraylrhls_residuals_data_second_data_z_din0,
    dout0     =>  arraylrhls_residuals_data_second_data_z_dout0,
    ce1       =>  arraylrhls_residuals_data_second_data_z_ce1,
    we1       =>  arraylrhls_residuals_data_second_data_z_we1,
    address1  =>  arraylrhls_residuals_data_second_data_z_address1,
    din1      =>  arraylrhls_residuals_data_second_data_z_din1,
    dout1     =>  arraylrhls_residuals_data_second_data_z_dout1,
    ready	    =>  arraylrhls_residuals_data_second_data_z_ready,
    done	    =>  arraylrhls_residuals_data_second_data_z_done
);

-- Assignment between dut and arraylrhls_residuals_data_second_data_z
arraylrhls_residuals_data_second_data_z_address0 <= lrhls_residuals_data_second_data_z_address0;
arraylrhls_residuals_data_second_data_z_ce0 <= lrhls_residuals_data_second_data_z_ce0;
lrhls_residuals_data_second_data_z_q0 <= arraylrhls_residuals_data_second_data_z_dout0;
arraylrhls_residuals_data_second_data_z_we0 <= lrhls_residuals_data_second_data_z_we0;
arraylrhls_residuals_data_second_data_z_din0 <= lrhls_residuals_data_second_data_z_d0;
arraylrhls_residuals_data_second_data_z_address1 <= lrhls_residuals_data_second_data_z_address1;
arraylrhls_residuals_data_second_data_z_ce1 <= lrhls_residuals_data_second_data_z_ce1;
arraylrhls_residuals_data_second_data_z_we1 <= lrhls_residuals_data_second_data_z_we1;
arraylrhls_residuals_data_second_data_z_din1 <= lrhls_residuals_data_second_data_z_d1;
arraylrhls_residuals_data_second_data_z_ready <= ready;
arraylrhls_residuals_data_second_data_z_done <= interface_done;

AESL_inst_lrhls_residuals_data_second_data_layerId : AESL_automem_lrhls_residuals_data_second_data_layerId port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_second_data_layerId_ce0,
    we0       =>  arraylrhls_residuals_data_second_data_layerId_we0,
    address0  =>  arraylrhls_residuals_data_second_data_layerId_address0,
    din0      =>  arraylrhls_residuals_data_second_data_layerId_din0,
    dout0     =>  arraylrhls_residuals_data_second_data_layerId_dout0,
    ce1       =>  arraylrhls_residuals_data_second_data_layerId_ce1,
    we1       =>  arraylrhls_residuals_data_second_data_layerId_we1,
    address1  =>  arraylrhls_residuals_data_second_data_layerId_address1,
    din1      =>  arraylrhls_residuals_data_second_data_layerId_din1,
    dout1     =>  arraylrhls_residuals_data_second_data_layerId_dout1,
    ready	    =>  arraylrhls_residuals_data_second_data_layerId_ready,
    done	    =>  arraylrhls_residuals_data_second_data_layerId_done
);

-- Assignment between dut and arraylrhls_residuals_data_second_data_layerId
arraylrhls_residuals_data_second_data_layerId_address0 <= lrhls_residuals_data_second_data_layerId_address0;
arraylrhls_residuals_data_second_data_layerId_ce0 <= lrhls_residuals_data_second_data_layerId_ce0;
lrhls_residuals_data_second_data_layerId_q0 <= arraylrhls_residuals_data_second_data_layerId_dout0;
arraylrhls_residuals_data_second_data_layerId_we0 <= lrhls_residuals_data_second_data_layerId_we0;
arraylrhls_residuals_data_second_data_layerId_din0 <= lrhls_residuals_data_second_data_layerId_d0;
arraylrhls_residuals_data_second_data_layerId_address1 <= lrhls_residuals_data_second_data_layerId_address1;
arraylrhls_residuals_data_second_data_layerId_ce1 <= lrhls_residuals_data_second_data_layerId_ce1;
arraylrhls_residuals_data_second_data_layerId_we1 <= lrhls_residuals_data_second_data_layerId_we1;
arraylrhls_residuals_data_second_data_layerId_din1 <= lrhls_residuals_data_second_data_layerId_d1;
arraylrhls_residuals_data_second_data_layerId_ready <= ready;
arraylrhls_residuals_data_second_data_layerId_done <= interface_done;

AESL_inst_lrhls_residuals_data_second_data_stubId : AESL_automem_lrhls_residuals_data_second_data_stubId port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_second_data_stubId_ce0,
    we0       =>  arraylrhls_residuals_data_second_data_stubId_we0,
    address0  =>  arraylrhls_residuals_data_second_data_stubId_address0,
    din0      =>  arraylrhls_residuals_data_second_data_stubId_din0,
    dout0     =>  arraylrhls_residuals_data_second_data_stubId_dout0,
    ce1       =>  arraylrhls_residuals_data_second_data_stubId_ce1,
    we1       =>  arraylrhls_residuals_data_second_data_stubId_we1,
    address1  =>  arraylrhls_residuals_data_second_data_stubId_address1,
    din1      =>  arraylrhls_residuals_data_second_data_stubId_din1,
    dout1     =>  arraylrhls_residuals_data_second_data_stubId_dout1,
    ready	    =>  arraylrhls_residuals_data_second_data_stubId_ready,
    done	    =>  arraylrhls_residuals_data_second_data_stubId_done
);

-- Assignment between dut and arraylrhls_residuals_data_second_data_stubId
arraylrhls_residuals_data_second_data_stubId_address0 <= lrhls_residuals_data_second_data_stubId_address0;
arraylrhls_residuals_data_second_data_stubId_ce0 <= lrhls_residuals_data_second_data_stubId_ce0;
lrhls_residuals_data_second_data_stubId_q0 <= arraylrhls_residuals_data_second_data_stubId_dout0;
arraylrhls_residuals_data_second_data_stubId_we0 <= lrhls_residuals_data_second_data_stubId_we0;
arraylrhls_residuals_data_second_data_stubId_din0 <= lrhls_residuals_data_second_data_stubId_d0;
arraylrhls_residuals_data_second_data_stubId_address1 <= lrhls_residuals_data_second_data_stubId_address1;
arraylrhls_residuals_data_second_data_stubId_ce1 <= lrhls_residuals_data_second_data_stubId_ce1;
arraylrhls_residuals_data_second_data_stubId_we1 <= lrhls_residuals_data_second_data_stubId_we1;
arraylrhls_residuals_data_second_data_stubId_din1 <= lrhls_residuals_data_second_data_stubId_d1;
arraylrhls_residuals_data_second_data_stubId_ready <= ready;
arraylrhls_residuals_data_second_data_stubId_done <= interface_done;

AESL_inst_lrhls_residuals_data_second_data_ps : AESL_automem_lrhls_residuals_data_second_data_ps port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylrhls_residuals_data_second_data_ps_ce0,
    we0       =>  arraylrhls_residuals_data_second_data_ps_we0,
    address0  =>  arraylrhls_residuals_data_second_data_ps_address0,
    din0      =>  arraylrhls_residuals_data_second_data_ps_din0,
    dout0     =>  arraylrhls_residuals_data_second_data_ps_dout0,
    ce1       =>  arraylrhls_residuals_data_second_data_ps_ce1,
    we1       =>  arraylrhls_residuals_data_second_data_ps_we1,
    address1  =>  arraylrhls_residuals_data_second_data_ps_address1,
    din1      =>  arraylrhls_residuals_data_second_data_ps_din1,
    dout1     =>  arraylrhls_residuals_data_second_data_ps_dout1,
    ready	    =>  arraylrhls_residuals_data_second_data_ps_ready,
    done	    =>  arraylrhls_residuals_data_second_data_ps_done
);

-- Assignment between dut and arraylrhls_residuals_data_second_data_ps
arraylrhls_residuals_data_second_data_ps_address0 <= lrhls_residuals_data_second_data_ps_address0;
arraylrhls_residuals_data_second_data_ps_ce0 <= lrhls_residuals_data_second_data_ps_ce0;
lrhls_residuals_data_second_data_ps_q0 <= arraylrhls_residuals_data_second_data_ps_dout0;
arraylrhls_residuals_data_second_data_ps_we0 <= lrhls_residuals_data_second_data_ps_we0;
arraylrhls_residuals_data_second_data_ps_din0 <= lrhls_residuals_data_second_data_ps_d0;
arraylrhls_residuals_data_second_data_ps_address1 <= lrhls_residuals_data_second_data_ps_address1;
arraylrhls_residuals_data_second_data_ps_ce1 <= lrhls_residuals_data_second_data_ps_ce1;
arraylrhls_residuals_data_second_data_ps_we1 <= lrhls_residuals_data_second_data_ps_we1;
arraylrhls_residuals_data_second_data_ps_din1 <= lrhls_residuals_data_second_data_ps_d1;
arraylrhls_residuals_data_second_data_ps_ready <= ready;
arraylrhls_residuals_data_second_data_ps_done <= interface_done;

gen_out_lrhls_largestResid_phi_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_largestResid_phi := (others => '0'); 
    elsif(lrhls_largestResid_phi_ap_vld = '1') then
        AESL_REG_lrhls_largestResid_phi := lrhls_largestResid_phi;
        AESL_REG_lrhls_largestResid_phi_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_largestResid_phi : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_largestResid_phi_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_largestResid_phi_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_largestResid_phi_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_largestResid_phi_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_largestResid_phi));
            writeline(fp, token_line);
            AESL_REG_lrhls_largestResid_phi_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_lrhls_largestResid_z_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_largestResid_z := (others => '0'); 
    elsif(lrhls_largestResid_z_ap_vld = '1') then
        AESL_REG_lrhls_largestResid_z := lrhls_largestResid_z;
        AESL_REG_lrhls_largestResid_z_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_largestResid_z : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_largestResid_z_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_largestResid_z_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_largestResid_z_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_largestResid_z_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_largestResid_z));
            writeline(fp, token_line);
            AESL_REG_lrhls_largestResid_z_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_lrhls_largestResid_layerId_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_largestResid_layerId := (others => '0'); 
    elsif(lrhls_largestResid_layerId_ap_vld = '1') then
        AESL_REG_lrhls_largestResid_layerId := lrhls_largestResid_layerId;
        AESL_REG_lrhls_largestResid_layerId_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_largestResid_layerId : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_largestResid_layerId_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_largestResid_layerId_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_largestResid_layerId_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_largestResid_layerId_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_largestResid_layerId));
            writeline(fp, token_line);
            AESL_REG_lrhls_largestResid_layerId_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_lrhls_largestResid_stubId_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_largestResid_stubId := (others => '0'); 
    elsif(lrhls_largestResid_stubId_ap_vld = '1') then
        AESL_REG_lrhls_largestResid_stubId := lrhls_largestResid_stubId;
        AESL_REG_lrhls_largestResid_stubId_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_largestResid_stubId : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_largestResid_stubId_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_largestResid_stubId_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_largestResid_stubId_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_largestResid_stubId_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_largestResid_stubId));
            writeline(fp, token_line);
            AESL_REG_lrhls_largestResid_stubId_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_lrhls_largestResid_ps_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_largestResid_ps := (others => '0'); 
    elsif(lrhls_largestResid_ps_ap_vld = '1') then
        AESL_REG_lrhls_largestResid_ps(0) := lrhls_largestResid_ps;
        AESL_REG_lrhls_largestResid_ps_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_largestResid_ps : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_largestResid_ps_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_largestResid_ps_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_largestResid_ps_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_largestResid_ps_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_largestResid_ps));
            writeline(fp, token_line);
            AESL_REG_lrhls_largestResid_ps_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_assign_lrhls_nIterations_s_i_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.4 ns;
  lrhls_nIterations_s_i <= AESL_REG_lrhls_nIterations_s_i;
end process;

gen_out2in_lrhls_nIterations_s_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(lrhls_nIterations_s_o_ap_vld = '1') then
        AESL_REG_lrhls_nIterations_s_i := lrhls_nIterations_s_o;
    end if;
  end if;
end process;

read_file_process_lrhls_nIterations_s : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 760);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_lrhls_nIterations_s, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_lrhls_nIterations_s & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_lrhls_nIterations_s_i := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_lrhls_nIterations_s_o_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_lrhls_nIterations_s_o := (others => '0'); 
    elsif(lrhls_nIterations_s_o_ap_vld = '1') then
        AESL_REG_lrhls_nIterations_s_o := lrhls_nIterations_s_o;
        AESL_REG_lrhls_nIterations_s_o_ap_vld := '1';
    end if;
  end if;
end process;

write_file_process_lrhls_nIterations_s : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 760);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  lrhls_nIterations_s_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_nIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_nIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        if(AESL_REG_lrhls_nIterations_s_o_ap_vld = '1')  then
            write(token_line, "0x" & esl_conv_string_hex(AESL_REG_lrhls_nIterations_s_o));
            writeline(fp, token_line);
            AESL_REG_lrhls_nIterations_s_o_ap_vld := '0';
        end if;
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

generate_ready_cnt_proc : process(ready_initial, AESL_clock)
begin
    if(AESL_clock'event and AESL_clock = '0') then
        if(ready_initial = '1') then
            ready_cnt <= conv_std_logic_vector(1, 32);
        end if;
    elsif(AESL_clock'event and AESL_clock = '1') then
        if(ready_cnt /= AUTOTB_TRANSACTION_NUM) then
            if(AESL_ready = '1') then
                ready_cnt <= ready_cnt + 1;
            end if;
        end if;
    end if;
end process;

generate_done_cnt_proc : process(AESL_reset, AESL_clock)
begin
    if(AESL_reset = '1') then
        done_cnt <= (others => '0');
    elsif(AESL_clock'event and AESL_clock = '1') then
        if(done_cnt /= AUTOTB_TRANSACTION_NUM) then
            if(AESL_done = '1') then
                done_cnt <= done_cnt + 1;
            end if;
        end if;
    end if;
end process;

generate_sim_done_proc    :   process
begin
    while(done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
        wait until AESL_clock'event and AESL_clock = '1';
        wait until AESL_clock'event and AESL_clock = '1';
        wait until AESL_clock'event and AESL_clock = '1';
    assert false report "simulation done!" severity note;
    assert false report "NORMAL EXIT (note: failure is to force the simulator to stop)" severity failure;
    wait;
end process;

gen_clock_proc :   process
begin
    AESL_clock <= '0';
    while(true) loop
        wait for AUTOTB_CLOCK_PERIOD_DIV2;
        AESL_clock <= not AESL_clock;
    end loop;
    wait;
end process;

gen_reset_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    rst <= '1';
    wait for 100 ns;
    for i in 1 to 3 loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    rst <= '0';
    wait;
end process;

gen_start_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
  start <= '0';
  ce <= '1';
    wait until AESL_reset = '0';
  wait until (AESL_clock'event and AESL_clock = '1');
  start <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM + 1) loop
      wait until (AESL_clock'event and AESL_clock = '1');
      if(AESL_ready = '1') then
          start <= '0';
          start <= '1';
      end if;
  end loop;
  start <= '0';
  wait;
end process;


gen_continue_proc : process(AESL_done)
begin
    continue <= AESL_done;
end process;

gen_AESL_ready_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_ready_delay <= '0';
      else
          AESL_ready_delay <= AESL_ready;
      end if;
  end if;
end process;

gen_ready_initial_proc : process
begin
    ready_initial <= '0';
    wait until AESL_start = '1';
    ready_initial <= '1';
    wait until AESL_clock'event and AESL_clock = '1';
    ready_initial <= '0';
    wait;
end process;

ready_last_n_proc : process
begin
  ready_last_n <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
    wait until AESL_clock'event and AESL_clock = '1';
  end loop;
  ready_last_n <= '0';
  wait;
end process;

gen_ready_delay_n_last_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          ready_delay_last_n <= '0';
      else
          ready_delay_last_n <= ready_last_n;
      end if;
  end if;
end process;

ready <= (ready_initial or AESL_ready_delay);
ready_wire <= ready_initial or AESL_ready_delay;
done_delay_last_n <= '0' when done_cnt = AUTOTB_TRANSACTION_NUM else '1';

gen_done_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_done_delay <= '0';
          AESL_done_delay2 <= '0';
      else
          AESL_done_delay <= AESL_done and done_delay_last_n;
          AESL_done_delay2 <= AESL_done_delay;
      end if;
  end if;
end process;

gen_interface_done : process(ready, AESL_ready_delay, AESL_done_delay)
begin
    if(ready_cnt > 0 and ready_cnt < AUTOTB_TRANSACTION_NUM) then
        interface_done <= AESL_ready_delay;
    elsif(ready_cnt = AUTOTB_TRANSACTION_NUM) then
        interface_done <= AESL_done_delay;
    else
        interface_done <= '0';
    end if;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_barrel_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_psModule_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_moduleHLS_layerId_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_r_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_r_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_r_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_r_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_r_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_phi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_phi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_phi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_track_stubsHLS_data_z_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_z_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_track_stubsHLS_data_z_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_track_stubsHLS_data_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_lrNumIterations_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrNumIterations_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_lrMinLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_lrResidPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_lrResidZPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_chosenRofZ_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofZ_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_invPtToDphi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_invPtToDphi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_barrel_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_barrel_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_barrel_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_barrel_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_barrel_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_psModule_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_psModule_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_psModule_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_psModule_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_psModule_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_moduleHLS_layerId_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_layerId_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_layerId_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_layerId_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_moduleHLS_layerId_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_r_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_r_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_r_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_r_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_r_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_phi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_phi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_phi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubs_data_z_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_z_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubs_data_z_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubs_data_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_first_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_first_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_first_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_first_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_first_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_size_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_size_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrNumIterations_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrMinLayersPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZ2S_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_lrResidZPS_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofPhi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_chosenRofZ_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_invPtToDphi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_settingsHLS_trackerNumLayers_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_barrel_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_psModule_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_moduleHLS_layerId_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_r_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_r_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_r_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_r_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_r_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_phi_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_phi_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_phi_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_phi_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_stubMap_data_second_data_z_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_z_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_stubMap_data_second_data_z_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_stubMap_data_second_data_z_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_layerPopulation_data_first_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_layerPopulation_data_first_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_layerPopulation_data_first_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_layerPopulation_data_first_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_layerPopulation_data_first_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_layerPopulation_data_second_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_layerPopulation_data_second_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_layerPopulation_data_second_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_layerPopulation_data_second_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_layerPopulation_data_second_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_first_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_first_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_first_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_first_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_first_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_second_size_s_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_size_s_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_size_s_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_size_s_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_second_data_phi_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_phi_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_phi_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_phi_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_phi_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_second_data_z_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_z_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_z_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_z_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_z_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_second_data_layerId_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_layerId_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_layerId_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_layerId_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_layerId_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_second_data_stubId_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_stubId_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_stubId_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_stubId_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_stubId_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_lrhls_residuals_data_second_data_ps_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_ps_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_ps_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait until AESL_clock'event and AESL_clock = '1';
    file_open(fstatus, fp, AUTOTB_TVOUT_lrhls_residuals_data_second_data_ps_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_lrhls_residuals_data_second_data_ps_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_clock_counter_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '0') then
    if(AESL_reset = '1') then
        AESL_clk_counter := 0;
    else
        AESL_clk_counter := AESL_clk_counter + 1;
    end if;
  end if;
end process;

gen_mLatcnterout_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_mLatCnterOut_addr := 0;
          AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter + 1 ;
          reported_stuck_cnt := 0;
      else
          if (AESL_done = '1' and AESL_mLatCnterOut_addr < AUTOTB_TRANSACTION_NUM + 1) then
              AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter;
              AESL_mLatCnterOut_addr := AESL_mLatCnterOut_addr + 1;
              reported_stuck <= '0';
          end if;
      end if;
  end if;
end process;

gen_mLatcnterin_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_mLatCnterIn_addr := 0;
      else
    if (AESL_start = '1' and AESL_mLatCnterIn_addr = 0) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    elsif (AESL_ready = '1' and AESL_mLatCnterIn_addr < AUTOTB_TRANSACTION_NUM + 1 ) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    end if;
      end if;
  end if;
end process;

gen_performance_check_proc : process
    variable transaction_counter : INTEGER;
    variable i : INTEGER;
    file     fp :   TEXT;
    variable    fstatus         :   FILE_OPEN_STATUS;
    variable    token_line      :   LINE;
    variable    token           :   STRING(1 to 1024);

    variable latthistime : INTEGER;
    variable lattotal : INTEGER;
    variable latmax : INTEGER;
    variable latmin : INTEGER;


    variable thrthistime : INTEGER;
    variable thrtotal : INTEGER;
    variable thrmax : INTEGER;
    variable thrmin : INTEGER;

    variable lataver : INTEGER;
    variable thraver : INTEGER;
    type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
    variable lat_array : latency_record;
    variable thr_array : latency_record;

begin
    i := 0;
    lattotal  := 0;
    latmax    := 0;
    latmin    := 16#7fffffff#;
    lataver   := 0;

    thrtotal  := 0;
    thrmax    := 0;
    thrmin    := 16#7fffffff#;
    thraver   := 0;

    wait until (AESL_clock'event and AESL_clock = '1');
    wait until (AESL_reset = '0'); 
    while (done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        wait until (AESL_clock'event and AESL_clock = '1');
    end loop;
  wait for 0.001 ns;

    for i in 0 to AUTOTB_TRANSACTION_NUM - 1 loop
        latthistime := AESL_mLatCnterOut(i) - AESL_mLatCnterIn(i);
        lat_array(i) := latthistime;
        if (latthistime > latmax) then
            latmax := latthistime; 
        end if;
        if (latthistime < latmin) then
            latmin := latthistime;
        end if;
		lattotal := lattotal + latthistime;
		if (AUTOTB_TRANSACTION_NUM = 1) then
			thrthistime := latthistime;
		else
			thrthistime := AESL_mLatCnterIn(i + 1) - AESL_mLatCnterIn(i);
		end if;
     thr_array(i) := thrthistime;
		if (thrthistime > thrmax) then
		    thrmax := thrthistime;
      end if;
		if (thrthistime < thrmin) then
	        thrmin := thrthistime;
      end if;
		thrtotal := thrtotal + thrthistime;
	end loop;
	lataver := lattotal / AUTOTB_TRANSACTION_NUM;
	thraver := thrtotal / AUTOTB_TRANSACTION_NUM;

    file_open(fstatus, fp, AUTOTB_LAT_RESULT_FILE, WRITE_MODE);
    if (fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_LAT_RESULT_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;

    if (AUTOTB_TRANSACTION_NUM = 1) then
        thrmax  := 0;
        thrmin  := 0;
        thraver := 0;
        write(token_line, "$MAX_LATENCY = " & '"' & integer'image(latmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_LATENCY = " & '"' & integer'image(latmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_LATENCY = " & '"' & integer'image(lataver) & '"');
        writeline(fp, token_line);
        write(token_line, "$MAX_THROUGHPUT = " & '"' & integer'image(thrmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_THROUGHPUT = " & '"' & integer'image(thrmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_THROUGHPUT = " & '"' & integer'image(thraver) & '"');
        writeline(fp, token_line);
    else
        write(token_line, "$MAX_LATENCY = " & '"' & integer'image(latmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_LATENCY = " & '"' & integer'image(latmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_LATENCY = " & '"' & integer'image(lataver) & '"');
        writeline(fp, token_line);
        write(token_line, "$MAX_THROUGHPUT = " & '"' & integer'image(thrmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_THROUGHPUT = " & '"' & integer'image(thrmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_THROUGHPUT = " & '"' & integer'image(thraver) & '"');
        writeline(fp, token_line);
    end if;

    file_close(fp);

    file_open(fstatus, fp, AUTOTB_PER_RESULT_TRANS_FILE, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_PER_RESULT_TRANS_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;

    write(token_line,string'("                            latency            interval"));
    writeline(fp, token_line);
    if (AUTOTB_TRANSACTION_NUM = 1) then
        i := 0;
        thr_array(i) := 0;
        write(token_line,"transaction        " & integer'image(i) & "            " & integer'image(lat_array(i) ) & "            " & integer'image(thr_array(i) ) );
        writeline(fp, token_line);
    else
        for i in 0 to AESL_mLatCnterOut_addr - 1 loop
            write(token_line,"transaction        " & integer'image(i) & "            " & integer'image(lat_array(i) ) & "            " & integer'image(thr_array(i) ) );
            writeline(fp, token_line);
        end loop;
    end if;
    file_close(fp);
    wait;
end process;

end behav;
