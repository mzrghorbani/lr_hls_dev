-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity deltaPhiHLS_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    phi1 : IN STD_LOGIC_VECTOR (31 downto 0);
    guard_variable_for_f_i : IN STD_LOGIC_VECTOR (0 downto 0);
    guard_variable_for_f_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    guard_variable_for_f_o_ap_vld : OUT STD_LOGIC;
    n_i : IN STD_LOGIC_VECTOR (31 downto 0);
    n_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of deltaPhiHLS_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3E22F983 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001000101111100110000011";
    constant ap_const_lv32_40C90FDB : STD_LOGIC_VECTOR (31 downto 0) := "01000000110010010000111111011011";
    constant ap_const_lv32_40490FDB : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phi1_read_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_read_reg_187_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_59_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_120_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_208_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_reg_213_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_218_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_f_1_reg_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_f_1_reg_222_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_f_1_reg_222_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_f_1_reg_222_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_f_1_reg_222_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_45_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_p_0_i_phi_fu_39_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter28_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter20_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter21_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter22_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter23_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter24_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter25_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter26_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter27_p_0_i_reg_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_49_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_70_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_73_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_83_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln32_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln33_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_130_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_fu_140_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln40_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_65_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_45_ce : STD_LOGIC;
    signal grp_fu_49_ce : STD_LOGIC;
    signal grp_fu_54_ce : STD_LOGIC;
    signal grp_fu_59_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_65_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to27 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_336 : BOOLEAN;

    component LR_top_fsub_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LR_top_fmul_32ns_32ns_32_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LR_top_fcmp_32ns_32ns_1_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1148 : component LR_top_fsub_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => phi1_read_reg_187_pp0_iter17_reg,
        din1 => tmp_3_i_reg_231,
        ce => grp_fu_45_ce,
        dout => grp_fu_45_p2);

    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1149 : component LR_top_fmul_32ns_32ns_32_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => phi1_read_reg_187_pp0_iter5_reg,
        din1 => ap_const_lv32_3E22F983,
        ce => grp_fu_49_ce,
        dout => grp_fu_49_p2);

    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1150 : component LR_top_fmul_32ns_32ns_32_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => n_i,
        din1 => ap_const_lv32_40C90FDB,
        ce => grp_fu_54_ce,
        dout => grp_fu_54_p2);

    LR_top_fcmp_32ns_32ns_1_3_1_U1151 : component LR_top_fcmp_32ns_32ns_1_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => phi1,
        din1 => ap_const_lv32_0,
        ce => grp_fu_59_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_59_p2);

    LR_top_fcmp_32ns_32ns_1_3_1_U1152 : component LR_top_fcmp_32ns_32ns_1_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln32_reg_202,
        din1 => ap_const_lv32_40490FDB,
        ce => grp_fu_65_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_65_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter8_p_0_i_reg_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_336)) then
                if ((ap_const_lv1_1 = and_ln40_reg_218)) then 
                    ap_phi_reg_pp0_iter8_p_0_i_reg_36 <= phi1_read_reg_187_pp0_iter6_reg;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter8_p_0_i_reg_36 <= ap_phi_reg_pp0_iter7_p_0_i_reg_36;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln40_reg_218 <= and_ln40_fu_160_p2;
                and_ln40_reg_218_pp0_iter10_reg <= and_ln40_reg_218_pp0_iter9_reg;
                and_ln40_reg_218_pp0_iter11_reg <= and_ln40_reg_218_pp0_iter10_reg;
                and_ln40_reg_218_pp0_iter12_reg <= and_ln40_reg_218_pp0_iter11_reg;
                and_ln40_reg_218_pp0_iter13_reg <= and_ln40_reg_218_pp0_iter12_reg;
                and_ln40_reg_218_pp0_iter14_reg <= and_ln40_reg_218_pp0_iter13_reg;
                and_ln40_reg_218_pp0_iter15_reg <= and_ln40_reg_218_pp0_iter14_reg;
                and_ln40_reg_218_pp0_iter16_reg <= and_ln40_reg_218_pp0_iter15_reg;
                and_ln40_reg_218_pp0_iter17_reg <= and_ln40_reg_218_pp0_iter16_reg;
                and_ln40_reg_218_pp0_iter18_reg <= and_ln40_reg_218_pp0_iter17_reg;
                and_ln40_reg_218_pp0_iter19_reg <= and_ln40_reg_218_pp0_iter18_reg;
                and_ln40_reg_218_pp0_iter20_reg <= and_ln40_reg_218_pp0_iter19_reg;
                and_ln40_reg_218_pp0_iter21_reg <= and_ln40_reg_218_pp0_iter20_reg;
                and_ln40_reg_218_pp0_iter22_reg <= and_ln40_reg_218_pp0_iter21_reg;
                and_ln40_reg_218_pp0_iter23_reg <= and_ln40_reg_218_pp0_iter22_reg;
                and_ln40_reg_218_pp0_iter24_reg <= and_ln40_reg_218_pp0_iter23_reg;
                and_ln40_reg_218_pp0_iter25_reg <= and_ln40_reg_218_pp0_iter24_reg;
                and_ln40_reg_218_pp0_iter26_reg <= and_ln40_reg_218_pp0_iter25_reg;
                and_ln40_reg_218_pp0_iter27_reg <= and_ln40_reg_218_pp0_iter26_reg;
                and_ln40_reg_218_pp0_iter7_reg <= and_ln40_reg_218;
                and_ln40_reg_218_pp0_iter8_reg <= and_ln40_reg_218_pp0_iter7_reg;
                and_ln40_reg_218_pp0_iter9_reg <= and_ln40_reg_218_pp0_iter8_reg;
                guard_variable_for_f_1_reg_222_pp0_iter10_reg <= guard_variable_for_f_1_reg_222_pp0_iter9_reg;
                guard_variable_for_f_1_reg_222_pp0_iter7_reg <= guard_variable_for_f_1_reg_222;
                guard_variable_for_f_1_reg_222_pp0_iter8_reg <= guard_variable_for_f_1_reg_222_pp0_iter7_reg;
                guard_variable_for_f_1_reg_222_pp0_iter9_reg <= guard_variable_for_f_1_reg_222_pp0_iter8_reg;
                icmp_ln40_1_reg_213 <= icmp_ln40_1_fu_150_p2;
                icmp_ln40_1_reg_213_pp0_iter5_reg <= icmp_ln40_1_reg_213;
                icmp_ln40_reg_208 <= icmp_ln40_fu_144_p2;
                icmp_ln40_reg_208_pp0_iter5_reg <= icmp_ln40_reg_208;
                phi1_read_reg_187_pp0_iter10_reg <= phi1_read_reg_187_pp0_iter9_reg;
                phi1_read_reg_187_pp0_iter11_reg <= phi1_read_reg_187_pp0_iter10_reg;
                phi1_read_reg_187_pp0_iter12_reg <= phi1_read_reg_187_pp0_iter11_reg;
                phi1_read_reg_187_pp0_iter13_reg <= phi1_read_reg_187_pp0_iter12_reg;
                phi1_read_reg_187_pp0_iter14_reg <= phi1_read_reg_187_pp0_iter13_reg;
                phi1_read_reg_187_pp0_iter15_reg <= phi1_read_reg_187_pp0_iter14_reg;
                phi1_read_reg_187_pp0_iter16_reg <= phi1_read_reg_187_pp0_iter15_reg;
                phi1_read_reg_187_pp0_iter17_reg <= phi1_read_reg_187_pp0_iter16_reg;
                phi1_read_reg_187_pp0_iter2_reg <= phi1_read_reg_187_pp0_iter1_reg;
                phi1_read_reg_187_pp0_iter3_reg <= phi1_read_reg_187_pp0_iter2_reg;
                phi1_read_reg_187_pp0_iter4_reg <= phi1_read_reg_187_pp0_iter3_reg;
                phi1_read_reg_187_pp0_iter5_reg <= phi1_read_reg_187_pp0_iter4_reg;
                phi1_read_reg_187_pp0_iter6_reg <= phi1_read_reg_187_pp0_iter5_reg;
                phi1_read_reg_187_pp0_iter7_reg <= phi1_read_reg_187_pp0_iter6_reg;
                phi1_read_reg_187_pp0_iter8_reg <= phi1_read_reg_187_pp0_iter7_reg;
                phi1_read_reg_187_pp0_iter9_reg <= phi1_read_reg_187_pp0_iter8_reg;
                select_ln32_reg_202 <= select_ln32_fu_120_p3;
                tmp_1_reg_197 <= grp_fu_59_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_p_0_i_reg_36 <= ap_phi_reg_pp0_iter9_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_p_0_i_reg_36 <= ap_phi_reg_pp0_iter10_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_p_0_i_reg_36 <= ap_phi_reg_pp0_iter11_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_p_0_i_reg_36 <= ap_phi_reg_pp0_iter12_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_p_0_i_reg_36 <= ap_phi_reg_pp0_iter13_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_p_0_i_reg_36 <= ap_phi_reg_pp0_iter14_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_p_0_i_reg_36 <= ap_phi_reg_pp0_iter15_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_p_0_i_reg_36 <= ap_phi_reg_pp0_iter16_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_p_0_i_reg_36 <= ap_phi_reg_pp0_iter17_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_p_0_i_reg_36 <= ap_phi_reg_pp0_iter18_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_p_0_i_reg_36 <= ap_phi_reg_pp0_iter0_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_p_0_i_reg_36 <= ap_phi_reg_pp0_iter19_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_p_0_i_reg_36 <= ap_phi_reg_pp0_iter20_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_p_0_i_reg_36 <= ap_phi_reg_pp0_iter21_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_p_0_i_reg_36 <= ap_phi_reg_pp0_iter22_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_p_0_i_reg_36 <= ap_phi_reg_pp0_iter23_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_p_0_i_reg_36 <= ap_phi_reg_pp0_iter24_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_p_0_i_reg_36 <= ap_phi_reg_pp0_iter25_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_p_0_i_reg_36 <= ap_phi_reg_pp0_iter26_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter28_p_0_i_reg_36 <= ap_phi_reg_pp0_iter27_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_p_0_i_reg_36 <= ap_phi_reg_pp0_iter1_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_p_0_i_reg_36 <= ap_phi_reg_pp0_iter2_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_p_0_i_reg_36 <= ap_phi_reg_pp0_iter3_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_p_0_i_reg_36 <= ap_phi_reg_pp0_iter4_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_p_0_i_reg_36 <= ap_phi_reg_pp0_iter5_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_p_0_i_reg_36 <= ap_phi_reg_pp0_iter6_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_p_0_i_reg_36 <= ap_phi_reg_pp0_iter8_p_0_i_reg_36;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln40_fu_160_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                guard_variable_for_f_1_reg_222 <= guard_variable_for_f_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                phi1_read_reg_187 <= phi1;
                phi1_read_reg_187_pp0_iter1_reg <= phi1_read_reg_187;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln40_reg_218_pp0_iter16_reg) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_i_reg_231 <= grp_fu_54_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln40_reg_218_pp0_iter26_reg) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_i_reg_236 <= grp_fu_45_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln32_fu_105_p2 <= (tmp_1_reg_197 and or_ln32_fu_99_p2);
    and_ln40_fu_160_p2 <= (or_ln40_fu_156_p2 and grp_fu_65_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_336_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_ce)
    begin
                ap_condition_336 <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter28, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to27_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0_0to27 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_i_phi_fu_39_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter28, and_ln40_reg_218_pp0_iter27_reg, tmp_4_i_reg_236, ap_phi_reg_pp0_iter28_p_0_i_reg_36)
    begin
        if (((ap_const_lv1_0 = and_ln40_reg_218_pp0_iter27_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then 
            ap_phi_mux_p_0_i_phi_fu_39_p4 <= tmp_4_i_reg_236;
        else 
            ap_phi_mux_p_0_i_phi_fu_39_p4 <= ap_phi_reg_pp0_iter28_p_0_i_reg_36;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_0_i_reg_36 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to27)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to27 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_p_0_i_phi_fu_39_p4;
    bitcast_ln32_fu_70_p1 <= phi1_read_reg_187_pp0_iter2_reg;
    bitcast_ln33_fu_116_p1 <= xor_ln33_fu_110_p2;
    bitcast_ln40_fu_127_p1 <= select_ln32_reg_202;

    grp_fu_45_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_45_ce <= ap_const_logic_1;
        else 
            grp_fu_45_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_49_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_49_ce <= ap_const_logic_1;
        else 
            grp_fu_49_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_54_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_54_ce <= ap_const_logic_1;
        else 
            grp_fu_54_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_59_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_59_ce <= ap_const_logic_1;
        else 
            grp_fu_59_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_65_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_65_ce <= ap_const_logic_1;
        else 
            grp_fu_65_ce <= ap_const_logic_0;
        end if; 
    end process;


    guard_variable_for_f_o_assign_proc : process(ap_enable_reg_pp0_iter6, ap_ce, guard_variable_for_f_i, and_ln40_fu_160_p2, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (guard_variable_for_f_i = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_fu_160_p2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            guard_variable_for_f_o <= ap_const_lv1_1;
        else 
            guard_variable_for_f_o <= guard_variable_for_f_i;
        end if; 
    end process;


    guard_variable_for_f_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, ap_ce, guard_variable_for_f_i, and_ln40_fu_160_p2)
    begin
        if (((guard_variable_for_f_i = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_fu_160_p2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            guard_variable_for_f_o_ap_vld <= ap_const_logic_1;
        else 
            guard_variable_for_f_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln32_1_fu_93_p2 <= "1" when (trunc_ln32_fu_83_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_87_p2 <= "0" when (tmp_fu_73_p4 = ap_const_lv8_FF) else "1";
    icmp_ln40_1_fu_150_p2 <= "1" when (trunc_ln40_fu_140_p1 = ap_const_lv23_0) else "0";
    icmp_ln40_fu_144_p2 <= "0" when (tmp_2_fu_130_p4 = ap_const_lv8_FF) else "1";

    n_o_assign_proc : process(ap_enable_reg_pp0_iter11, ap_ce, n_i, and_ln40_reg_218_pp0_iter10_reg, guard_variable_for_f_1_reg_222_pp0_iter10_reg, ap_block_pp0_stage0_01001, grp_fu_49_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (guard_variable_for_f_1_reg_222_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_reg_218_pp0_iter10_reg) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            n_o <= grp_fu_49_p2;
        else 
            n_o <= n_i;
        end if; 
    end process;


    n_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, ap_ce, and_ln40_reg_218_pp0_iter10_reg, guard_variable_for_f_1_reg_222_pp0_iter10_reg)
    begin
        if (((guard_variable_for_f_1_reg_222_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln40_reg_218_pp0_iter10_reg) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            n_o_ap_vld <= ap_const_logic_1;
        else 
            n_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln32_fu_99_p2 <= (icmp_ln32_fu_87_p2 or icmp_ln32_1_fu_93_p2);
    or_ln40_fu_156_p2 <= (icmp_ln40_reg_208_pp0_iter5_reg or icmp_ln40_1_reg_213_pp0_iter5_reg);
    select_ln32_fu_120_p3 <= 
        bitcast_ln33_fu_116_p1 when (and_ln32_fu_105_p2(0) = '1') else 
        phi1_read_reg_187_pp0_iter2_reg;
    tmp_2_fu_130_p4 <= bitcast_ln40_fu_127_p1(30 downto 23);
    tmp_fu_73_p4 <= bitcast_ln32_fu_70_p1(30 downto 23);
    trunc_ln32_fu_83_p1 <= bitcast_ln32_fu_70_p1(23 - 1 downto 0);
    trunc_ln40_fu_140_p1 <= bitcast_ln40_fu_127_p1(23 - 1 downto 0);
    xor_ln33_fu_110_p2 <= (bitcast_ln32_fu_70_p1 xor ap_const_lv32_80000000);
end behav;
