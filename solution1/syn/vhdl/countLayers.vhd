-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity countLayers is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LRHLS_numLayers_read : IN STD_LOGIC_VECTOR (31 downto 0);
    stubs_size_read : IN STD_LOGIC_VECTOR (31 downto 0);
    stubs_data_moduleHLS_psModule_s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    stubs_data_moduleHLS_psModule_s_ce0 : OUT STD_LOGIC;
    stubs_data_moduleHLS_psModule_s_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    stubs_data_moduleHLS_layerId_s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    stubs_data_moduleHLS_layerId_s_ce0 : OUT STD_LOGIC;
    stubs_data_moduleHLS_layerId_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    onlySeed_read : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of countLayers is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal onlySeed_read_1_read_fu_30_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal stubs_data_moduleHL_1_reg_242 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln96_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln96_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubs_data_moduleHL_2_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_18_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_18_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln75_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal foundLayers_data_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal foundLayers_data_s_ce0 : STD_LOGIC;
    signal foundLayers_data_s_we0 : STD_LOGIC;
    signal foundLayers_data_s_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal foundLayers_data_s_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_begin_0_rec_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_i_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln96_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_0_i_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_begin_0_rec_cast_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component countLayers_foundLayers_data_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    foundLayers_data_s_U : component countLayers_foundLayers_data_s
    generic map (
        DataWidth => 1,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => foundLayers_data_s_address0,
        ce0 => foundLayers_data_s_ce0,
        we0 => foundLayers_data_s_we0,
        d0 => foundLayers_data_s_d0,
        q0 => foundLayers_data_s_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln75_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_return_preg <= count_0_i_reg_134;
                end if; 
            end if;
        end if;
    end process;


    count_0_i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_0_i_reg_134 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                count_0_i_reg_134 <= select_ln76_fu_206_p3;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_101 <= i_fu_151_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_i_reg_101 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_123 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_reg_123 <= i_18_reg_262;
            end if; 
        end if;
    end process;

    p_begin_0_rec_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_begin_0_rec_reg_112 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_begin_0_rec_reg_112 <= add_ln96_reg_250;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln96_reg_250 <= add_ln96_fu_173_p2;
                stubs_data_moduleHL_1_reg_242 <= p_begin_0_rec_cast_fu_162_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_18_reg_262 <= i_18_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((onlySeed_read_1_read_fu_30_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                stubs_data_moduleHL_2_reg_255 <= stubs_data_moduleHLS_psModule_s_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln75_fu_184_p2, icmp_ln63_fu_146_p2, icmp_ln96_fu_168_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln63_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln96_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln75_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln96_fu_173_p2 <= std_logic_vector(unsigned(p_begin_0_rec_reg_112) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln75_fu_184_p2)
    begin
        if ((((icmp_ln75_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln75_fu_184_p2)
    begin
        if (((icmp_ln75_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state6, icmp_ln75_fu_184_p2, count_0_i_reg_134, ap_return_preg)
    begin
        if (((icmp_ln75_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_return <= count_0_i_reg_134;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    count_fu_200_p2 <= std_logic_vector(unsigned(count_0_i_reg_134) + unsigned(ap_const_lv32_1));

    foundLayers_data_s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln64_fu_157_p1, zext_ln69_fu_179_p1, zext_ln76_fu_195_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            foundLayers_data_s_address0 <= zext_ln76_fu_195_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            foundLayers_data_s_address0 <= zext_ln69_fu_179_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            foundLayers_data_s_address0 <= zext_ln64_fu_157_p1(5 - 1 downto 0);
        else 
            foundLayers_data_s_address0 <= "XXXXX";
        end if; 
    end process;


    foundLayers_data_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            foundLayers_data_s_ce0 <= ap_const_logic_1;
        else 
            foundLayers_data_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    foundLayers_data_s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            foundLayers_data_s_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            foundLayers_data_s_d0 <= ap_const_lv1_0;
        else 
            foundLayers_data_s_d0 <= "X";
        end if; 
    end process;


    foundLayers_data_s_we0_assign_proc : process(onlySeed_read_1_read_fu_30_p2, ap_CS_fsm_state2, stubs_data_moduleHL_2_reg_255, icmp_ln63_fu_146_p2, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln63_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and ((stubs_data_moduleHL_2_reg_255 = ap_const_lv1_1) or (onlySeed_read_1_read_fu_30_p2 = ap_const_lv1_0))))) then 
            foundLayers_data_s_we0 <= ap_const_logic_1;
        else 
            foundLayers_data_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_18_fu_189_p2 <= std_logic_vector(unsigned(i_0_i_reg_123) + unsigned(ap_const_lv32_1));
    i_fu_151_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_101) + unsigned(ap_const_lv32_1));
    icmp_ln63_fu_146_p2 <= "1" when (i_0_i_i_reg_101 = LRHLS_numLayers_read) else "0";
    icmp_ln75_fu_184_p2 <= "1" when (i_0_i_reg_123 = LRHLS_numLayers_read) else "0";
    icmp_ln96_fu_168_p2 <= "1" when (p_begin_0_rec_reg_112 = stubs_size_read) else "0";
    onlySeed_read_1_read_fu_30_p2 <= (0=>onlySeed_read, others=>'-');
    p_begin_0_rec_cast_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_begin_0_rec_reg_112),64));
    select_ln76_fu_206_p3 <= 
        count_fu_200_p2 when (foundLayers_data_s_q0(0) = '1') else 
        count_0_i_reg_134;
    stubs_data_moduleHLS_layerId_s_address0 <= stubs_data_moduleHL_1_reg_242;

    stubs_data_moduleHLS_layerId_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stubs_data_moduleHLS_layerId_s_ce0 <= ap_const_logic_1;
        else 
            stubs_data_moduleHLS_layerId_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stubs_data_moduleHLS_psModule_s_address0 <= p_begin_0_rec_cast_fu_162_p1(4 - 1 downto 0);

    stubs_data_moduleHLS_psModule_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            stubs_data_moduleHLS_psModule_s_ce0 <= ap_const_logic_1;
        else 
            stubs_data_moduleHLS_psModule_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln64_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_101),64));
    zext_ln69_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stubs_data_moduleHLS_layerId_s_q0),64));
    zext_ln76_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_123),64));
end behav;
