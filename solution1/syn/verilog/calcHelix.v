// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calcHelix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        LRHLS_settings_chosenRofPhi_read,
        LRHLS_HTParameter_qOverPt_read,
        LRHLS_HTParameter_phiT_read,
        LRHLS_stubMap_size_read,
        LRHLS_stubMap_data_second_size_s_address0,
        LRHLS_stubMap_data_second_size_s_ce0,
        LRHLS_stubMap_data_second_size_s_q0,
        LRHLS_stubMap_data_second_data_r_s_address0,
        LRHLS_stubMap_data_second_data_r_s_ce0,
        LRHLS_stubMap_data_second_data_r_s_q0,
        LRHLS_stubMap_data_second_data_phi_s_address0,
        LRHLS_stubMap_data_second_data_phi_s_ce0,
        LRHLS_stubMap_data_second_data_phi_s_q0,
        guard_variable_for_f_i,
        guard_variable_for_f_o,
        guard_variable_for_f_o_ap_vld,
        n,
        n_ap_vld
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] LRHLS_settings_chosenRofPhi_read;
input  [31:0] LRHLS_HTParameter_qOverPt_read;
input  [31:0] LRHLS_HTParameter_phiT_read;
input  [31:0] LRHLS_stubMap_size_read;
output  [4:0] LRHLS_stubMap_data_second_size_s_address0;
output   LRHLS_stubMap_data_second_size_s_ce0;
input  [31:0] LRHLS_stubMap_data_second_size_s_q0;
output  [8:0] LRHLS_stubMap_data_second_data_r_s_address0;
output   LRHLS_stubMap_data_second_data_r_s_ce0;
input  [31:0] LRHLS_stubMap_data_second_data_r_s_q0;
output  [8:0] LRHLS_stubMap_data_second_data_phi_s_address0;
output   LRHLS_stubMap_data_second_data_phi_s_ce0;
input  [31:0] LRHLS_stubMap_data_second_data_phi_s_q0;
input  [0:0] guard_variable_for_f_i;
output  [0:0] guard_variable_for_f_o;
output   guard_variable_for_f_o_ap_vld;
output  [31:0] n;
output   n_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg LRHLS_stubMap_data_second_size_s_ce0;
reg LRHLS_stubMap_data_second_data_r_s_ce0;
reg LRHLS_stubMap_data_second_data_phi_s_ce0;
reg[0:0] guard_variable_for_f_o;
reg guard_variable_for_f_o_ap_vld;
reg n_ap_vld;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] reg_154;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state32;
wire   [9:0] p_cast3_fu_169_p3;
reg   [9:0] p_cast3_reg_354;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln106_fu_182_p2;
reg   [31:0] add_ln106_reg_362;
wire   [0:0] icmp_ln106_fu_177_p2;
reg   [31:0] LRHLS_stubMap_data_57_reg_372;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln162_fu_188_p2;
reg   [0:0] icmp_ln162_reg_377;
reg   [8:0] LRHLS_stubMap_data_58_reg_381;
wire    ap_CS_fsm_state4;
reg   [8:0] LRHLS_stubMap_data_59_reg_386;
wire   [31:0] add_ln111_fu_214_p2;
reg   [31:0] add_ln111_reg_394;
reg   [31:0] LRHLS_stubMap_data_60_reg_399;
wire    ap_CS_fsm_state6;
reg   [31:0] LRHLS_stubMap_data_61_reg_404;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] tmp_s_reg_409;
wire   [31:0] grp_fu_143_p2;
reg   [31:0] tmp_14_reg_414;
wire    ap_CS_fsm_state22;
wire   [0:0] grp_fu_148_p2;
reg   [0:0] tmp_19_reg_419;
wire    ap_CS_fsm_state35;
wire   [31:0] select_ln32_fu_271_p3;
reg   [31:0] select_ln32_reg_424;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln40_fu_296_p2;
reg   [0:0] icmp_ln40_reg_430;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln40_3_fu_302_p2;
reg   [0:0] icmp_ln40_3_reg_435;
wire   [0:0] and_ln40_fu_312_p2;
reg   [0:0] and_ln40_reg_440;
wire    ap_CS_fsm_state39;
wire   [0:0] guard_variable_for_f_3_load_fu_318_p1;
reg   [0:0] guard_variable_for_f_3_reg_444;
reg   [31:0] p_begin_0_rec_reg_113;
wire   [0:0] icmp_ln111_fu_209_p2;
reg   [31:0] p_begin2_0_rec_reg_124;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln106_fu_160_p1;
wire   [63:0] p_cast_fu_203_p1;
wire    ap_CS_fsm_state5;
reg   [31:0] grp_fu_135_p0;
reg   [31:0] grp_fu_135_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_143_p1;
wire    ap_CS_fsm_state17;
reg   [31:0] grp_fu_148_p0;
reg   [31:0] grp_fu_148_p1;
wire    ap_CS_fsm_state33;
wire   [5:0] trunc_ln106_fu_165_p1;
wire   [9:0] empty_fu_194_p1;
wire   [9:0] empty_20_fu_198_p2;
wire   [31:0] bitcast_ln32_fu_220_p1;
wire   [7:0] tmp_fu_224_p4;
wire   [22:0] trunc_ln32_fu_234_p1;
wire   [0:0] icmp_ln32_8_fu_244_p2;
wire   [0:0] icmp_ln32_fu_238_p2;
wire   [0:0] or_ln32_fu_250_p2;
wire   [31:0] xor_ln33_fu_261_p2;
wire   [0:0] and_ln32_fu_256_p2;
wire   [31:0] bitcast_ln33_fu_267_p1;
wire   [31:0] bitcast_ln40_fu_279_p1;
wire   [7:0] tmp_20_fu_282_p4;
wire   [22:0] trunc_ln40_fu_292_p1;
wire   [0:0] or_ln40_fu_308_p2;
reg   [4:0] grp_fu_148_opcode;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
end

LR_top_fsub_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0),
    .din1(grp_fu_135_p1),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

LR_top_fsub_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(LRHLS_stubMap_data_61_reg_404),
    .din1(LRHLS_HTParameter_phiT_read),
    .ce(1'b1),
    .dout(grp_fu_139_p2)
);

LR_top_fmul_32ns_32ns_32_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_154),
    .din1(grp_fu_143_p1),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

LR_top_fcmp_32ns_32ns_1_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
LR_top_fcmp_32ns_32ns_1_3_1_U1137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .din1(grp_fu_148_p1),
    .ce(1'b1),
    .opcode(grp_fu_148_opcode),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln162_fu_188_p2 == 1'd0))) begin
        p_begin2_0_rec_reg_124 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        p_begin2_0_rec_reg_124 <= add_ln111_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln111_fu_209_p2 == 1'd1) | (icmp_ln162_reg_377 == 1'd1)))) begin
        p_begin_0_rec_reg_113 <= add_ln106_reg_362;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_begin_0_rec_reg_113 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LRHLS_stubMap_data_57_reg_372 <= LRHLS_stubMap_data_second_size_s_q0;
        icmp_ln162_reg_377 <= icmp_ln162_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln162_reg_377 == 1'd0))) begin
        LRHLS_stubMap_data_58_reg_381 <= p_cast_fu_203_p1;
        LRHLS_stubMap_data_59_reg_386 <= p_cast_fu_203_p1;
        add_ln111_reg_394 <= add_ln111_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        LRHLS_stubMap_data_60_reg_399 <= LRHLS_stubMap_data_second_data_r_s_q0;
        LRHLS_stubMap_data_61_reg_404 <= LRHLS_stubMap_data_second_data_phi_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln106_reg_362 <= add_ln106_fu_182_p2;
        p_cast3_reg_354[9 : 4] <= p_cast3_fu_169_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        and_ln40_reg_440 <= and_ln40_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (1'd0 == and_ln40_fu_312_p2))) begin
        guard_variable_for_f_3_reg_444 <= guard_variable_for_f_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        icmp_ln40_3_reg_435 <= icmp_ln40_3_fu_302_p2;
        icmp_ln40_reg_430 <= icmp_ln40_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_154 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        select_ln32_reg_424 <= select_ln32_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_14_reg_414 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tmp_19_reg_419 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_s_reg_409 <= grp_fu_139_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        LRHLS_stubMap_data_second_data_phi_s_ce0 = 1'b1;
    end else begin
        LRHLS_stubMap_data_second_data_phi_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        LRHLS_stubMap_data_second_data_r_s_ce0 = 1'b1;
    end else begin
        LRHLS_stubMap_data_second_data_r_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        LRHLS_stubMap_data_second_size_s_ce0 = 1'b1;
    end else begin
        LRHLS_stubMap_data_second_size_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln106_fu_177_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln106_fu_177_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_135_p0 = tmp_s_reg_409;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_135_p0 = LRHLS_stubMap_data_60_reg_399;
    end else begin
        grp_fu_135_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_135_p1 = tmp_14_reg_414;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_135_p1 = LRHLS_settings_chosenRofPhi_read;
    end else begin
        grp_fu_135_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_143_p1 = 32'd1042479491;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_143_p1 = LRHLS_HTParameter_qOverPt_read;
    end else begin
        grp_fu_143_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_148_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_148_opcode = 5'd4;
    end else begin
        grp_fu_148_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_148_p0 = select_ln32_reg_424;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_148_p0 = reg_154;
    end else begin
        grp_fu_148_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_148_p1 = 32'd1078530011;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_148_p1 = 32'd0;
    end else begin
        grp_fu_148_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) & (guard_variable_for_f_3_load_fu_318_p1 == 1'd0) & (1'd0 == and_ln40_fu_312_p2))) begin
        guard_variable_for_f_o = 1'd1;
    end else begin
        guard_variable_for_f_o = guard_variable_for_f_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) & (guard_variable_for_f_3_load_fu_318_p1 == 1'd0) & (1'd0 == and_ln40_fu_312_p2))) begin
        guard_variable_for_f_o_ap_vld = 1'b1;
    end else begin
        guard_variable_for_f_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (guard_variable_for_f_3_reg_444 == 1'd0) & (1'd0 == and_ln40_reg_440))) begin
        n_ap_vld = 1'b1;
    end else begin
        n_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln106_fu_177_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln111_fu_209_p2 == 1'd1) | (icmp_ln162_reg_377 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (guard_variable_for_f_3_load_fu_318_p1 == 1'd0) & (1'd0 == and_ln40_fu_312_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LRHLS_stubMap_data_second_data_phi_s_address0 = LRHLS_stubMap_data_59_reg_386;

assign LRHLS_stubMap_data_second_data_r_s_address0 = LRHLS_stubMap_data_58_reg_381;

assign LRHLS_stubMap_data_second_size_s_address0 = zext_ln106_fu_160_p1;

assign add_ln106_fu_182_p2 = (32'd1 + p_begin_0_rec_reg_113);

assign add_ln111_fu_214_p2 = (32'd1 + p_begin2_0_rec_reg_124);

assign and_ln32_fu_256_p2 = (tmp_19_reg_419 & or_ln32_fu_250_p2);

assign and_ln40_fu_312_p2 = (or_ln40_fu_308_p2 & grp_fu_148_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln32_fu_220_p1 = reg_154;

assign bitcast_ln33_fu_267_p1 = xor_ln33_fu_261_p2;

assign bitcast_ln40_fu_279_p1 = select_ln32_reg_424;

assign empty_20_fu_198_p2 = (p_cast3_reg_354 + empty_fu_194_p1);

assign empty_fu_194_p1 = p_begin2_0_rec_reg_124[9:0];

assign guard_variable_for_f_3_load_fu_318_p1 = guard_variable_for_f_i;

assign icmp_ln106_fu_177_p2 = ((p_begin_0_rec_reg_113 == LRHLS_stubMap_size_read) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_209_p2 = ((p_begin2_0_rec_reg_124 == LRHLS_stubMap_data_57_reg_372) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_188_p2 = ((LRHLS_stubMap_data_second_size_s_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_8_fu_244_p2 = ((trunc_ln32_fu_234_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_238_p2 = ((tmp_fu_224_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln40_3_fu_302_p2 = ((trunc_ln40_fu_292_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_296_p2 = ((tmp_20_fu_282_p4 != 8'd255) ? 1'b1 : 1'b0);

assign n = grp_fu_143_p2;

assign or_ln32_fu_250_p2 = (icmp_ln32_fu_238_p2 | icmp_ln32_8_fu_244_p2);

assign or_ln40_fu_308_p2 = (icmp_ln40_reg_430 | icmp_ln40_3_reg_435);

assign p_cast3_fu_169_p3 = {{trunc_ln106_fu_165_p1}, {4'd0}};

assign p_cast_fu_203_p1 = empty_20_fu_198_p2;

assign select_ln32_fu_271_p3 = ((and_ln32_fu_256_p2[0:0] === 1'b1) ? bitcast_ln33_fu_267_p1 : reg_154);

assign tmp_20_fu_282_p4 = {{bitcast_ln40_fu_279_p1[30:23]}};

assign tmp_fu_224_p4 = {{bitcast_ln32_fu_220_p1[30:23]}};

assign trunc_ln106_fu_165_p1 = p_begin_0_rec_reg_113[5:0];

assign trunc_ln32_fu_234_p1 = bitcast_ln32_fu_220_p1[22:0];

assign trunc_ln40_fu_292_p1 = bitcast_ln40_fu_279_p1[22:0];

assign xor_ln33_fu_261_p2 = (bitcast_ln32_fu_220_p1 ^ 32'd2147483648);

assign zext_ln106_fu_160_p1 = p_begin_0_rec_reg_113;

always @ (posedge ap_clk) begin
    p_cast3_reg_354[3:0] <= 4'b0000;
end

endmodule //calcHelix
