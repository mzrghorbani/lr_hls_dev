// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module countLayers (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        LRHLS_numLayers_read,
        stubs_size_read,
        stubs_data_moduleHLS_psModule_s_address0,
        stubs_data_moduleHLS_psModule_s_ce0,
        stubs_data_moduleHLS_psModule_s_q0,
        stubs_data_moduleHLS_layerId_s_address0,
        stubs_data_moduleHLS_layerId_s_ce0,
        stubs_data_moduleHLS_layerId_s_q0,
        onlySeed_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] LRHLS_numLayers_read;
input  [31:0] stubs_size_read;
output  [3:0] stubs_data_moduleHLS_psModule_s_address0;
output   stubs_data_moduleHLS_psModule_s_ce0;
input  [0:0] stubs_data_moduleHLS_psModule_s_q0;
output  [3:0] stubs_data_moduleHLS_layerId_s_address0;
output   stubs_data_moduleHLS_layerId_s_ce0;
input  [31:0] stubs_data_moduleHLS_layerId_s_q0;
input   onlySeed_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stubs_data_moduleHLS_psModule_s_ce0;
reg stubs_data_moduleHLS_layerId_s_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] onlySeed_read_1_read_fu_30_p2;
wire   [31:0] i_fu_151_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [3:0] stubs_data_moduleHL_1_reg_242;
wire   [31:0] add_ln96_fu_173_p2;
reg   [31:0] add_ln96_reg_250;
reg   [0:0] stubs_data_moduleHL_2_reg_255;
wire    ap_CS_fsm_state4;
wire   [31:0] i_18_fu_189_p2;
reg   [31:0] i_18_reg_262;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln75_fu_184_p2;
wire   [31:0] select_ln76_fu_206_p3;
wire    ap_CS_fsm_state7;
reg   [4:0] foundLayers_data_s_address0;
reg    foundLayers_data_s_ce0;
reg    foundLayers_data_s_we0;
reg   [0:0] foundLayers_data_s_d0;
wire   [0:0] foundLayers_data_s_q0;
reg   [31:0] i_0_i_i_reg_101;
wire   [0:0] icmp_ln63_fu_146_p2;
reg   [31:0] p_begin_0_rec_reg_112;
wire    ap_CS_fsm_state5;
reg   [31:0] i_0_i_reg_123;
wire   [0:0] icmp_ln96_fu_168_p2;
reg   [31:0] count_0_i_reg_134;
wire   [63:0] zext_ln64_fu_157_p1;
wire   [63:0] p_begin_0_rec_cast_fu_162_p1;
wire   [63:0] zext_ln69_fu_179_p1;
wire   [63:0] zext_ln76_fu_195_p1;
wire   [31:0] count_fu_200_p2;
reg   [31:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_preg = 32'd0;
end

countLayers_foundLayers_data_s #(
    .DataWidth( 1 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
foundLayers_data_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(foundLayers_data_s_address0),
    .ce0(foundLayers_data_s_ce0),
    .we0(foundLayers_data_s_we0),
    .d0(foundLayers_data_s_d0),
    .q0(foundLayers_data_s_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((icmp_ln75_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_return_preg <= count_0_i_reg_134;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        count_0_i_reg_134 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        count_0_i_reg_134 <= select_ln76_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_i_reg_101 <= i_fu_151_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_i_reg_101 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_123 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_reg_123 <= i_18_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_begin_0_rec_reg_112 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_begin_0_rec_reg_112 <= add_ln96_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln96_reg_250 <= add_ln96_fu_173_p2;
        stubs_data_moduleHL_1_reg_242 <= p_begin_0_rec_cast_fu_162_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_18_reg_262 <= i_18_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((onlySeed_read_1_read_fu_30_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        stubs_data_moduleHL_2_reg_255 <= stubs_data_moduleHLS_psModule_s_q0;
    end
end

always @ (*) begin
    if ((((icmp_ln75_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_return = count_0_i_reg_134;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        foundLayers_data_s_address0 = zext_ln76_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        foundLayers_data_s_address0 = zext_ln69_fu_179_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        foundLayers_data_s_address0 = zext_ln64_fu_157_p1;
    end else begin
        foundLayers_data_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        foundLayers_data_s_ce0 = 1'b1;
    end else begin
        foundLayers_data_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        foundLayers_data_s_d0 = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        foundLayers_data_s_d0 = 1'd0;
    end else begin
        foundLayers_data_s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln63_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state5) & ((stubs_data_moduleHL_2_reg_255 == 1'd1) | (onlySeed_read_1_read_fu_30_p2 == 1'd0))))) begin
        foundLayers_data_s_we0 = 1'b1;
    end else begin
        foundLayers_data_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stubs_data_moduleHLS_layerId_s_ce0 = 1'b1;
    end else begin
        stubs_data_moduleHLS_layerId_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stubs_data_moduleHLS_psModule_s_ce0 = 1'b1;
    end else begin
        stubs_data_moduleHLS_psModule_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln63_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln96_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln75_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln96_fu_173_p2 = (p_begin_0_rec_reg_112 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign count_fu_200_p2 = (count_0_i_reg_134 + 32'd1);

assign i_18_fu_189_p2 = (i_0_i_reg_123 + 32'd1);

assign i_fu_151_p2 = (i_0_i_i_reg_101 + 32'd1);

assign icmp_ln63_fu_146_p2 = ((i_0_i_i_reg_101 == LRHLS_numLayers_read) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_184_p2 = ((i_0_i_reg_123 == LRHLS_numLayers_read) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_168_p2 = ((p_begin_0_rec_reg_112 == stubs_size_read) ? 1'b1 : 1'b0);

assign onlySeed_read_1_read_fu_30_p2 = onlySeed_read;

assign p_begin_0_rec_cast_fu_162_p1 = p_begin_0_rec_reg_112;

assign select_ln76_fu_206_p3 = ((foundLayers_data_s_q0[0:0] === 1'b1) ? count_fu_200_p2 : count_0_i_reg_134);

assign stubs_data_moduleHLS_layerId_s_address0 = stubs_data_moduleHL_1_reg_242;

assign stubs_data_moduleHLS_psModule_s_address0 = p_begin_0_rec_cast_fu_162_p1;

assign zext_ln64_fu_157_p1 = i_0_i_i_reg_101;

assign zext_ln69_fu_179_p1 = stubs_data_moduleHLS_layerId_s_q0;

assign zext_ln76_fu_195_p1 = i_0_i_reg_123;

endmodule //countLayers
