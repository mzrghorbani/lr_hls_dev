// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "calcHelix.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic calcHelix::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic calcHelix::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<44> calcHelix::ap_ST_fsm_state1 = "1";
const sc_lv<44> calcHelix::ap_ST_fsm_state2 = "10";
const sc_lv<44> calcHelix::ap_ST_fsm_state3 = "100";
const sc_lv<44> calcHelix::ap_ST_fsm_state4 = "1000";
const sc_lv<44> calcHelix::ap_ST_fsm_state5 = "10000";
const sc_lv<44> calcHelix::ap_ST_fsm_state6 = "100000";
const sc_lv<44> calcHelix::ap_ST_fsm_state7 = "1000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state8 = "10000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state9 = "100000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state10 = "1000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state11 = "10000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state12 = "100000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<44> calcHelix::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<32> calcHelix::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> calcHelix::ap_const_lv32_F = "1111";
const sc_lv<32> calcHelix::ap_const_lv32_1F = "11111";
const sc_lv<32> calcHelix::ap_const_lv32_1 = "1";
const sc_lv<1> calcHelix::ap_const_lv1_0 = "0";
const sc_lv<32> calcHelix::ap_const_lv32_2 = "10";
const sc_lv<32> calcHelix::ap_const_lv32_3 = "11";
const sc_lv<32> calcHelix::ap_const_lv32_5 = "101";
const sc_lv<32> calcHelix::ap_const_lv32_15 = "10101";
const sc_lv<32> calcHelix::ap_const_lv32_22 = "100010";
const sc_lv<32> calcHelix::ap_const_lv32_23 = "100011";
const sc_lv<32> calcHelix::ap_const_lv32_24 = "100100";
const sc_lv<32> calcHelix::ap_const_lv32_26 = "100110";
const sc_lv<1> calcHelix::ap_const_lv1_1 = "1";
const sc_lv<32> calcHelix::ap_const_lv32_2B = "101011";
const sc_lv<32> calcHelix::ap_const_lv32_4 = "100";
const sc_lv<32> calcHelix::ap_const_lv32_6 = "110";
const sc_lv<32> calcHelix::ap_const_lv32_16 = "10110";
const sc_lv<32> calcHelix::ap_const_lv32_3E22F983 = "111110001000101111100110000011";
const sc_lv<32> calcHelix::ap_const_lv32_10 = "10000";
const sc_lv<32> calcHelix::ap_const_lv32_40490FDB = "1000000010010010000111111011011";
const sc_lv<32> calcHelix::ap_const_lv32_20 = "100000";
const sc_lv<4> calcHelix::ap_const_lv4_0 = "0000";
const sc_lv<32> calcHelix::ap_const_lv32_17 = "10111";
const sc_lv<32> calcHelix::ap_const_lv32_1E = "11110";
const sc_lv<8> calcHelix::ap_const_lv8_FF = "11111111";
const sc_lv<23> calcHelix::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> calcHelix::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<5> calcHelix::ap_const_lv5_4 = "100";
const sc_lv<5> calcHelix::ap_const_lv5_5 = "101";
const bool calcHelix::ap_const_boolean_1 = true;

calcHelix::calcHelix(sc_module_name name) : sc_module(name), mVcdFile(0) {
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134 = new LR_top_fsub_32ns_32ns_32_10_full_dsp_1<1,10,32,32,32>("LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134");
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134->clk(ap_clk);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134->reset(ap_rst);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134->din0(grp_fu_135_p0);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134->din1(grp_fu_135_p1);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134->ce(ap_var_for_const0);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134->dout(grp_fu_135_p2);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135 = new LR_top_fsub_32ns_32ns_32_10_full_dsp_1<1,10,32,32,32>("LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135");
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135->clk(ap_clk);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135->reset(ap_rst);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135->din0(LRHLS_stubMap_data_61_reg_404);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135->din1(LRHLS_HTParameter_phiT_read);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135->ce(ap_var_for_const0);
    LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135->dout(grp_fu_139_p2);
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136 = new LR_top_fmul_32ns_32ns_32_6_max_dsp_1<1,6,32,32,32>("LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136");
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136->clk(ap_clk);
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136->reset(ap_rst);
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136->din0(reg_154);
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136->din1(grp_fu_143_p1);
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136->ce(ap_var_for_const0);
    LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136->dout(grp_fu_143_p2);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137 = new LR_top_fcmp_32ns_32ns_1_3_1<1,3,32,32,1>("LR_top_fcmp_32ns_32ns_1_3_1_U1137");
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->clk(ap_clk);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->reset(ap_rst);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->din0(grp_fu_148_p0);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->din1(grp_fu_148_p1);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->ce(ap_var_for_const0);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->opcode(grp_fu_148_opcode);
    LR_top_fcmp_32ns_32ns_1_3_1_U1137->dout(grp_fu_148_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_LRHLS_stubMap_data_second_data_phi_s_address0);
    sensitive << ( LRHLS_stubMap_data_59_reg_386 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_LRHLS_stubMap_data_second_data_phi_s_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_LRHLS_stubMap_data_second_data_r_s_address0);
    sensitive << ( LRHLS_stubMap_data_58_reg_381 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_LRHLS_stubMap_data_second_data_r_s_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_LRHLS_stubMap_data_second_size_s_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln106_fu_160_p1 );

    SC_METHOD(thread_LRHLS_stubMap_data_second_size_s_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_add_ln106_fu_182_p2);
    sensitive << ( p_begin_0_rec_reg_113 );

    SC_METHOD(thread_add_ln111_fu_214_p2);
    sensitive << ( p_begin2_0_rec_reg_124 );

    SC_METHOD(thread_and_ln32_fu_256_p2);
    sensitive << ( tmp_19_reg_419 );
    sensitive << ( or_ln32_fu_250_p2 );

    SC_METHOD(thread_and_ln40_fu_312_p2);
    sensitive << ( grp_fu_148_p2 );
    sensitive << ( or_ln40_fu_308_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln106_fu_177_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln106_fu_177_p2 );

    SC_METHOD(thread_bitcast_ln32_fu_220_p1);
    sensitive << ( reg_154 );

    SC_METHOD(thread_bitcast_ln33_fu_267_p1);
    sensitive << ( xor_ln33_fu_261_p2 );

    SC_METHOD(thread_bitcast_ln40_fu_279_p1);
    sensitive << ( select_ln32_reg_424 );

    SC_METHOD(thread_empty_20_fu_198_p2);
    sensitive << ( p_cast3_reg_354 );
    sensitive << ( empty_fu_194_p1 );

    SC_METHOD(thread_empty_fu_194_p1);
    sensitive << ( p_begin2_0_rec_reg_124 );

    SC_METHOD(thread_grp_fu_135_p0);
    sensitive << ( LRHLS_stubMap_data_60_reg_399 );
    sensitive << ( tmp_s_reg_409 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_135_p1);
    sensitive << ( LRHLS_settings_chosenRofPhi_read );
    sensitive << ( tmp_14_reg_414 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_143_p1);
    sensitive << ( LRHLS_HTParameter_qOverPt_read );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_grp_fu_148_opcode);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_grp_fu_148_p0);
    sensitive << ( reg_154 );
    sensitive << ( select_ln32_reg_424 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_grp_fu_148_p1);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_guard_variable_for_f_3_load_fu_318_p1);
    sensitive << ( guard_variable_for_f_i );
    sensitive << ( and_ln40_fu_312_p2 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_guard_variable_for_f_o);
    sensitive << ( guard_variable_for_f_i );
    sensitive << ( and_ln40_fu_312_p2 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( guard_variable_for_f_3_load_fu_318_p1 );

    SC_METHOD(thread_guard_variable_for_f_o_ap_vld);
    sensitive << ( and_ln40_fu_312_p2 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( guard_variable_for_f_3_load_fu_318_p1 );

    SC_METHOD(thread_icmp_ln106_fu_177_p2);
    sensitive << ( LRHLS_stubMap_size_read );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_begin_0_rec_reg_113 );

    SC_METHOD(thread_icmp_ln111_fu_209_p2);
    sensitive << ( LRHLS_stubMap_data_57_reg_372 );
    sensitive << ( icmp_ln162_reg_377 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_begin2_0_rec_reg_124 );

    SC_METHOD(thread_icmp_ln162_fu_188_p2);
    sensitive << ( LRHLS_stubMap_data_second_size_s_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln32_8_fu_244_p2);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( trunc_ln32_fu_234_p1 );

    SC_METHOD(thread_icmp_ln32_fu_238_p2);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( tmp_fu_224_p4 );

    SC_METHOD(thread_icmp_ln40_3_fu_302_p2);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( trunc_ln40_fu_292_p1 );

    SC_METHOD(thread_icmp_ln40_fu_296_p2);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( tmp_20_fu_282_p4 );

    SC_METHOD(thread_n);
    sensitive << ( grp_fu_143_p2 );
    sensitive << ( and_ln40_reg_440 );
    sensitive << ( guard_variable_for_f_3_reg_444 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_n_ap_vld);
    sensitive << ( and_ln40_reg_440 );
    sensitive << ( guard_variable_for_f_3_reg_444 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_or_ln32_fu_250_p2);
    sensitive << ( icmp_ln32_8_fu_244_p2 );
    sensitive << ( icmp_ln32_fu_238_p2 );

    SC_METHOD(thread_or_ln40_fu_308_p2);
    sensitive << ( icmp_ln40_reg_430 );
    sensitive << ( icmp_ln40_3_reg_435 );

    SC_METHOD(thread_p_cast3_fu_169_p3);
    sensitive << ( trunc_ln106_fu_165_p1 );

    SC_METHOD(thread_p_cast_fu_203_p1);
    sensitive << ( empty_20_fu_198_p2 );

    SC_METHOD(thread_select_ln32_fu_271_p3);
    sensitive << ( reg_154 );
    sensitive << ( and_ln32_fu_256_p2 );
    sensitive << ( bitcast_ln33_fu_267_p1 );

    SC_METHOD(thread_tmp_20_fu_282_p4);
    sensitive << ( bitcast_ln40_fu_279_p1 );

    SC_METHOD(thread_tmp_fu_224_p4);
    sensitive << ( bitcast_ln32_fu_220_p1 );

    SC_METHOD(thread_trunc_ln106_fu_165_p1);
    sensitive << ( p_begin_0_rec_reg_113 );

    SC_METHOD(thread_trunc_ln32_fu_234_p1);
    sensitive << ( bitcast_ln32_fu_220_p1 );

    SC_METHOD(thread_trunc_ln40_fu_292_p1);
    sensitive << ( bitcast_ln40_fu_279_p1 );

    SC_METHOD(thread_xor_ln33_fu_261_p2);
    sensitive << ( bitcast_ln32_fu_220_p1 );

    SC_METHOD(thread_zext_ln106_fu_160_p1);
    sensitive << ( p_begin_0_rec_reg_113 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln106_fu_177_p2 );
    sensitive << ( icmp_ln162_reg_377 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( and_ln40_fu_312_p2 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( guard_variable_for_f_3_load_fu_318_p1 );
    sensitive << ( icmp_ln111_fu_209_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "calcHelix_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, LRHLS_settings_chosenRofPhi_read, "(port)LRHLS_settings_chosenRofPhi_read");
    sc_trace(mVcdFile, LRHLS_HTParameter_qOverPt_read, "(port)LRHLS_HTParameter_qOverPt_read");
    sc_trace(mVcdFile, LRHLS_HTParameter_phiT_read, "(port)LRHLS_HTParameter_phiT_read");
    sc_trace(mVcdFile, LRHLS_stubMap_size_read, "(port)LRHLS_stubMap_size_read");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_size_s_address0, "(port)LRHLS_stubMap_data_second_size_s_address0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_size_s_ce0, "(port)LRHLS_stubMap_data_second_size_s_ce0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_size_s_q0, "(port)LRHLS_stubMap_data_second_size_s_q0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_data_r_s_address0, "(port)LRHLS_stubMap_data_second_data_r_s_address0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_data_r_s_ce0, "(port)LRHLS_stubMap_data_second_data_r_s_ce0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_data_r_s_q0, "(port)LRHLS_stubMap_data_second_data_r_s_q0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_data_phi_s_address0, "(port)LRHLS_stubMap_data_second_data_phi_s_address0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_data_phi_s_ce0, "(port)LRHLS_stubMap_data_second_data_phi_s_ce0");
    sc_trace(mVcdFile, LRHLS_stubMap_data_second_data_phi_s_q0, "(port)LRHLS_stubMap_data_second_data_phi_s_q0");
    sc_trace(mVcdFile, guard_variable_for_f_i, "(port)guard_variable_for_f_i");
    sc_trace(mVcdFile, guard_variable_for_f_o, "(port)guard_variable_for_f_o");
    sc_trace(mVcdFile, guard_variable_for_f_o_ap_vld, "(port)guard_variable_for_f_o_ap_vld");
    sc_trace(mVcdFile, n, "(port)n");
    sc_trace(mVcdFile, n_ap_vld, "(port)n_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_135_p2, "grp_fu_135_p2");
    sc_trace(mVcdFile, reg_154, "reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, p_cast3_fu_169_p3, "p_cast3_fu_169_p3");
    sc_trace(mVcdFile, p_cast3_reg_354, "p_cast3_reg_354");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln106_fu_182_p2, "add_ln106_fu_182_p2");
    sc_trace(mVcdFile, add_ln106_reg_362, "add_ln106_reg_362");
    sc_trace(mVcdFile, icmp_ln106_fu_177_p2, "icmp_ln106_fu_177_p2");
    sc_trace(mVcdFile, LRHLS_stubMap_data_57_reg_372, "LRHLS_stubMap_data_57_reg_372");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln162_fu_188_p2, "icmp_ln162_fu_188_p2");
    sc_trace(mVcdFile, icmp_ln162_reg_377, "icmp_ln162_reg_377");
    sc_trace(mVcdFile, LRHLS_stubMap_data_58_reg_381, "LRHLS_stubMap_data_58_reg_381");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, LRHLS_stubMap_data_59_reg_386, "LRHLS_stubMap_data_59_reg_386");
    sc_trace(mVcdFile, add_ln111_fu_214_p2, "add_ln111_fu_214_p2");
    sc_trace(mVcdFile, add_ln111_reg_394, "add_ln111_reg_394");
    sc_trace(mVcdFile, LRHLS_stubMap_data_60_reg_399, "LRHLS_stubMap_data_60_reg_399");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, LRHLS_stubMap_data_61_reg_404, "LRHLS_stubMap_data_61_reg_404");
    sc_trace(mVcdFile, grp_fu_139_p2, "grp_fu_139_p2");
    sc_trace(mVcdFile, tmp_s_reg_409, "tmp_s_reg_409");
    sc_trace(mVcdFile, grp_fu_143_p2, "grp_fu_143_p2");
    sc_trace(mVcdFile, tmp_14_reg_414, "tmp_14_reg_414");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, tmp_19_reg_419, "tmp_19_reg_419");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, select_ln32_fu_271_p3, "select_ln32_fu_271_p3");
    sc_trace(mVcdFile, select_ln32_reg_424, "select_ln32_reg_424");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, icmp_ln40_fu_296_p2, "icmp_ln40_fu_296_p2");
    sc_trace(mVcdFile, icmp_ln40_reg_430, "icmp_ln40_reg_430");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, icmp_ln40_3_fu_302_p2, "icmp_ln40_3_fu_302_p2");
    sc_trace(mVcdFile, icmp_ln40_3_reg_435, "icmp_ln40_3_reg_435");
    sc_trace(mVcdFile, and_ln40_fu_312_p2, "and_ln40_fu_312_p2");
    sc_trace(mVcdFile, and_ln40_reg_440, "and_ln40_reg_440");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, guard_variable_for_f_3_load_fu_318_p1, "guard_variable_for_f_3_load_fu_318_p1");
    sc_trace(mVcdFile, guard_variable_for_f_3_reg_444, "guard_variable_for_f_3_reg_444");
    sc_trace(mVcdFile, p_begin_0_rec_reg_113, "p_begin_0_rec_reg_113");
    sc_trace(mVcdFile, icmp_ln111_fu_209_p2, "icmp_ln111_fu_209_p2");
    sc_trace(mVcdFile, p_begin2_0_rec_reg_124, "p_begin2_0_rec_reg_124");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, zext_ln106_fu_160_p1, "zext_ln106_fu_160_p1");
    sc_trace(mVcdFile, p_cast_fu_203_p1, "p_cast_fu_203_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_135_p0, "grp_fu_135_p0");
    sc_trace(mVcdFile, grp_fu_135_p1, "grp_fu_135_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_143_p1, "grp_fu_143_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_148_p0, "grp_fu_148_p0");
    sc_trace(mVcdFile, grp_fu_148_p1, "grp_fu_148_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, trunc_ln106_fu_165_p1, "trunc_ln106_fu_165_p1");
    sc_trace(mVcdFile, empty_fu_194_p1, "empty_fu_194_p1");
    sc_trace(mVcdFile, empty_20_fu_198_p2, "empty_20_fu_198_p2");
    sc_trace(mVcdFile, bitcast_ln32_fu_220_p1, "bitcast_ln32_fu_220_p1");
    sc_trace(mVcdFile, tmp_fu_224_p4, "tmp_fu_224_p4");
    sc_trace(mVcdFile, trunc_ln32_fu_234_p1, "trunc_ln32_fu_234_p1");
    sc_trace(mVcdFile, icmp_ln32_8_fu_244_p2, "icmp_ln32_8_fu_244_p2");
    sc_trace(mVcdFile, icmp_ln32_fu_238_p2, "icmp_ln32_fu_238_p2");
    sc_trace(mVcdFile, or_ln32_fu_250_p2, "or_ln32_fu_250_p2");
    sc_trace(mVcdFile, xor_ln33_fu_261_p2, "xor_ln33_fu_261_p2");
    sc_trace(mVcdFile, and_ln32_fu_256_p2, "and_ln32_fu_256_p2");
    sc_trace(mVcdFile, bitcast_ln33_fu_267_p1, "bitcast_ln33_fu_267_p1");
    sc_trace(mVcdFile, bitcast_ln40_fu_279_p1, "bitcast_ln40_fu_279_p1");
    sc_trace(mVcdFile, tmp_20_fu_282_p4, "tmp_20_fu_282_p4");
    sc_trace(mVcdFile, trunc_ln40_fu_292_p1, "trunc_ln40_fu_292_p1");
    sc_trace(mVcdFile, or_ln40_fu_308_p2, "or_ln40_fu_308_p2");
    sc_trace(mVcdFile, grp_fu_148_opcode, "grp_fu_148_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

calcHelix::~calcHelix() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1134;
    delete LR_top_fsub_32ns_32ns_32_10_full_dsp_1_U1135;
    delete LR_top_fmul_32ns_32ns_32_6_max_dsp_1_U1136;
    delete LR_top_fcmp_32ns_32ns_1_3_1_U1137;
}

void calcHelix::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void calcHelix::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln162_fu_188_p2.read()))) {
        p_begin2_0_rec_reg_124 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        p_begin2_0_rec_reg_124 = add_ln111_reg_394.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         (esl_seteq<1,1,1>(icmp_ln111_fu_209_p2.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(icmp_ln162_reg_377.read(), ap_const_lv1_1)))) {
        p_begin_0_rec_reg_113 = add_ln106_reg_362.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_begin_0_rec_reg_113 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        LRHLS_stubMap_data_57_reg_372 = LRHLS_stubMap_data_second_size_s_q0.read();
        icmp_ln162_reg_377 = icmp_ln162_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln162_reg_377.read()))) {
        LRHLS_stubMap_data_58_reg_381 =  (sc_lv<9>) (p_cast_fu_203_p1.read());
        LRHLS_stubMap_data_59_reg_386 =  (sc_lv<9>) (p_cast_fu_203_p1.read());
        add_ln111_reg_394 = add_ln111_fu_214_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        LRHLS_stubMap_data_60_reg_399 = LRHLS_stubMap_data_second_data_r_s_q0.read();
        LRHLS_stubMap_data_61_reg_404 = LRHLS_stubMap_data_second_data_phi_s_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln106_reg_362 = add_ln106_fu_182_p2.read();
        p_cast3_reg_354 = p_cast3_fu_169_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        and_ln40_reg_440 = and_ln40_fu_312_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln40_fu_312_p2.read()))) {
        guard_variable_for_f_3_reg_444 = guard_variable_for_f_i.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        icmp_ln40_3_reg_435 = icmp_ln40_3_fu_302_p2.read();
        icmp_ln40_reg_430 = icmp_ln40_fu_296_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        reg_154 = grp_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        select_ln32_reg_424 = select_ln32_fu_271_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_14_reg_414 = grp_fu_143_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        tmp_19_reg_419 = grp_fu_148_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_s_reg_409 = grp_fu_139_p2.read();
    }
}

void calcHelix::thread_LRHLS_stubMap_data_second_data_phi_s_address0() {
    LRHLS_stubMap_data_second_data_phi_s_address0 = LRHLS_stubMap_data_59_reg_386.read();
}

void calcHelix::thread_LRHLS_stubMap_data_second_data_phi_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        LRHLS_stubMap_data_second_data_phi_s_ce0 = ap_const_logic_1;
    } else {
        LRHLS_stubMap_data_second_data_phi_s_ce0 = ap_const_logic_0;
    }
}

void calcHelix::thread_LRHLS_stubMap_data_second_data_r_s_address0() {
    LRHLS_stubMap_data_second_data_r_s_address0 = LRHLS_stubMap_data_58_reg_381.read();
}

void calcHelix::thread_LRHLS_stubMap_data_second_data_r_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        LRHLS_stubMap_data_second_data_r_s_ce0 = ap_const_logic_1;
    } else {
        LRHLS_stubMap_data_second_data_r_s_ce0 = ap_const_logic_0;
    }
}

void calcHelix::thread_LRHLS_stubMap_data_second_size_s_address0() {
    LRHLS_stubMap_data_second_size_s_address0 =  (sc_lv<5>) (zext_ln106_fu_160_p1.read());
}

void calcHelix::thread_LRHLS_stubMap_data_second_size_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        LRHLS_stubMap_data_second_size_s_ce0 = ap_const_logic_1;
    } else {
        LRHLS_stubMap_data_second_size_s_ce0 = ap_const_logic_0;
    }
}

void calcHelix::thread_add_ln106_fu_182_p2() {
    add_ln106_fu_182_p2 = (!ap_const_lv32_1.is_01() || !p_begin_0_rec_reg_113.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(p_begin_0_rec_reg_113.read()));
}

void calcHelix::thread_add_ln111_fu_214_p2() {
    add_ln111_fu_214_p2 = (!ap_const_lv32_1.is_01() || !p_begin2_0_rec_reg_124.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(p_begin2_0_rec_reg_124.read()));
}

void calcHelix::thread_and_ln32_fu_256_p2() {
    and_ln32_fu_256_p2 = (or_ln32_fu_250_p2.read() & tmp_19_reg_419.read());
}

void calcHelix::thread_and_ln40_fu_312_p2() {
    and_ln40_fu_312_p2 = (or_ln40_fu_308_p2.read() & grp_fu_148_p2.read());
}

void calcHelix::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void calcHelix::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void calcHelix::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void calcHelix::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void calcHelix::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void calcHelix::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void calcHelix::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void calcHelix::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void calcHelix::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void calcHelix::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void calcHelix::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void calcHelix::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void calcHelix::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void calcHelix::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void calcHelix::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void calcHelix::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void calcHelix::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void calcHelix::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void calcHelix::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln106_fu_177_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void calcHelix::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void calcHelix::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln106_fu_177_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void calcHelix::thread_bitcast_ln32_fu_220_p1() {
    bitcast_ln32_fu_220_p1 = reg_154.read();
}

void calcHelix::thread_bitcast_ln33_fu_267_p1() {
    bitcast_ln33_fu_267_p1 = xor_ln33_fu_261_p2.read();
}

void calcHelix::thread_bitcast_ln40_fu_279_p1() {
    bitcast_ln40_fu_279_p1 = select_ln32_reg_424.read();
}

void calcHelix::thread_empty_20_fu_198_p2() {
    empty_20_fu_198_p2 = (!p_cast3_reg_354.read().is_01() || !empty_fu_194_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(p_cast3_reg_354.read()) + sc_biguint<10>(empty_fu_194_p1.read()));
}

void calcHelix::thread_empty_fu_194_p1() {
    empty_fu_194_p1 = p_begin2_0_rec_reg_124.read().range(10-1, 0);
}

void calcHelix::thread_grp_fu_135_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_135_p0 = tmp_s_reg_409.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_135_p0 = LRHLS_stubMap_data_60_reg_399.read();
    } else {
        grp_fu_135_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcHelix::thread_grp_fu_135_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_135_p1 = tmp_14_reg_414.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_135_p1 = LRHLS_settings_chosenRofPhi_read.read();
    } else {
        grp_fu_135_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcHelix::thread_grp_fu_143_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_fu_143_p1 = ap_const_lv32_3E22F983;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_143_p1 = LRHLS_HTParameter_qOverPt_read.read();
    } else {
        grp_fu_143_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcHelix::thread_grp_fu_148_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_fu_148_opcode = ap_const_lv5_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        grp_fu_148_opcode = ap_const_lv5_4;
    } else {
        grp_fu_148_opcode =  (sc_lv<5>) ("XXXXX");
    }
}

void calcHelix::thread_grp_fu_148_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_fu_148_p0 = select_ln32_reg_424.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        grp_fu_148_p0 = reg_154.read();
    } else {
        grp_fu_148_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcHelix::thread_grp_fu_148_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        grp_fu_148_p1 = ap_const_lv32_40490FDB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        grp_fu_148_p1 = ap_const_lv32_0;
    } else {
        grp_fu_148_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcHelix::thread_guard_variable_for_f_3_load_fu_318_p1() {
    guard_variable_for_f_3_load_fu_318_p1 = guard_variable_for_f_i.read();
}

void calcHelix::thread_guard_variable_for_f_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln40_fu_312_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_f_3_load_fu_318_p1.read()))) {
        guard_variable_for_f_o = ap_const_lv1_1;
    } else {
        guard_variable_for_f_o = guard_variable_for_f_i.read();
    }
}

void calcHelix::thread_guard_variable_for_f_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln40_fu_312_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_f_3_load_fu_318_p1.read()))) {
        guard_variable_for_f_o_ap_vld = ap_const_logic_1;
    } else {
        guard_variable_for_f_o_ap_vld = ap_const_logic_0;
    }
}

void calcHelix::thread_icmp_ln106_fu_177_p2() {
    icmp_ln106_fu_177_p2 = (!p_begin_0_rec_reg_113.read().is_01() || !LRHLS_stubMap_size_read.read().is_01())? sc_lv<1>(): sc_lv<1>(p_begin_0_rec_reg_113.read() == LRHLS_stubMap_size_read.read());
}

void calcHelix::thread_icmp_ln111_fu_209_p2() {
    icmp_ln111_fu_209_p2 = (!p_begin2_0_rec_reg_124.read().is_01() || !LRHLS_stubMap_data_57_reg_372.read().is_01())? sc_lv<1>(): sc_lv<1>(p_begin2_0_rec_reg_124.read() == LRHLS_stubMap_data_57_reg_372.read());
}

void calcHelix::thread_icmp_ln162_fu_188_p2() {
    icmp_ln162_fu_188_p2 = (!LRHLS_stubMap_data_second_size_s_q0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(LRHLS_stubMap_data_second_size_s_q0.read() == ap_const_lv32_0);
}

void calcHelix::thread_icmp_ln32_8_fu_244_p2() {
    icmp_ln32_8_fu_244_p2 = (!trunc_ln32_fu_234_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln32_fu_234_p1.read() == ap_const_lv23_0);
}

void calcHelix::thread_icmp_ln32_fu_238_p2() {
    icmp_ln32_fu_238_p2 = (!tmp_fu_224_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_224_p4.read() != ap_const_lv8_FF);
}

void calcHelix::thread_icmp_ln40_3_fu_302_p2() {
    icmp_ln40_3_fu_302_p2 = (!trunc_ln40_fu_292_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln40_fu_292_p1.read() == ap_const_lv23_0);
}

void calcHelix::thread_icmp_ln40_fu_296_p2() {
    icmp_ln40_fu_296_p2 = (!tmp_20_fu_282_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_20_fu_282_p4.read() != ap_const_lv8_FF);
}

void calcHelix::thread_n() {
    n = grp_fu_143_p2.read();
}

void calcHelix::thread_n_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln40_reg_440.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_f_3_reg_444.read()))) {
        n_ap_vld = ap_const_logic_1;
    } else {
        n_ap_vld = ap_const_logic_0;
    }
}

void calcHelix::thread_or_ln32_fu_250_p2() {
    or_ln32_fu_250_p2 = (icmp_ln32_8_fu_244_p2.read() | icmp_ln32_fu_238_p2.read());
}

void calcHelix::thread_or_ln40_fu_308_p2() {
    or_ln40_fu_308_p2 = (icmp_ln40_3_reg_435.read() | icmp_ln40_reg_430.read());
}

void calcHelix::thread_p_cast3_fu_169_p3() {
    p_cast3_fu_169_p3 = esl_concat<6,4>(trunc_ln106_fu_165_p1.read(), ap_const_lv4_0);
}

void calcHelix::thread_p_cast_fu_203_p1() {
    p_cast_fu_203_p1 = esl_zext<64,10>(empty_20_fu_198_p2.read());
}

void calcHelix::thread_select_ln32_fu_271_p3() {
    select_ln32_fu_271_p3 = (!and_ln32_fu_256_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln32_fu_256_p2.read()[0].to_bool())? bitcast_ln33_fu_267_p1.read(): reg_154.read());
}

void calcHelix::thread_tmp_20_fu_282_p4() {
    tmp_20_fu_282_p4 = bitcast_ln40_fu_279_p1.read().range(30, 23);
}

void calcHelix::thread_tmp_fu_224_p4() {
    tmp_fu_224_p4 = bitcast_ln32_fu_220_p1.read().range(30, 23);
}

void calcHelix::thread_trunc_ln106_fu_165_p1() {
    trunc_ln106_fu_165_p1 = p_begin_0_rec_reg_113.read().range(6-1, 0);
}

void calcHelix::thread_trunc_ln32_fu_234_p1() {
    trunc_ln32_fu_234_p1 = bitcast_ln32_fu_220_p1.read().range(23-1, 0);
}

void calcHelix::thread_trunc_ln40_fu_292_p1() {
    trunc_ln40_fu_292_p1 = bitcast_ln40_fu_279_p1.read().range(23-1, 0);
}

void calcHelix::thread_xor_ln33_fu_261_p2() {
    xor_ln33_fu_261_p2 = (bitcast_ln32_fu_220_p1.read() ^ ap_const_lv32_80000000);
}

void calcHelix::thread_zext_ln106_fu_160_p1() {
    zext_ln106_fu_160_p1 = esl_zext<64,32>(p_begin_0_rec_reg_113.read());
}

void calcHelix::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln106_fu_177_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(icmp_ln111_fu_209_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(icmp_ln162_reg_377.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln40_fu_312_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_f_3_load_fu_318_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state40;
            } else {
                ap_NS_fsm = ap_ST_fsm_state44;
            }
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<44>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

