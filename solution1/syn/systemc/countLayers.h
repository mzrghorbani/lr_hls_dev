// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _countLayers_HH_
#define _countLayers_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "countLayers_foundLayers_data_s.h"

namespace ap_rtl {

struct countLayers : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > LRHLS_numLayers_read;
    sc_in< sc_lv<32> > stubs_size_read;
    sc_out< sc_lv<4> > stubs_data_moduleHLS_psModule_s_address0;
    sc_out< sc_logic > stubs_data_moduleHLS_psModule_s_ce0;
    sc_in< sc_lv<1> > stubs_data_moduleHLS_psModule_s_q0;
    sc_out< sc_lv<4> > stubs_data_moduleHLS_layerId_s_address0;
    sc_out< sc_logic > stubs_data_moduleHLS_layerId_s_ce0;
    sc_in< sc_lv<32> > stubs_data_moduleHLS_layerId_s_q0;
    sc_in< sc_logic > onlySeed_read;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    countLayers(sc_module_name name);
    SC_HAS_PROCESS(countLayers);

    ~countLayers();

    sc_trace_file* mVcdFile;

    countLayers_foundLayers_data_s* foundLayers_data_s_U;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > onlySeed_read_1_read_fu_30_p2;
    sc_signal< sc_lv<32> > i_fu_151_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > stubs_data_moduleHL_1_reg_242;
    sc_signal< sc_lv<32> > add_ln96_fu_173_p2;
    sc_signal< sc_lv<32> > add_ln96_reg_250;
    sc_signal< sc_lv<1> > stubs_data_moduleHL_2_reg_255;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > i_18_fu_189_p2;
    sc_signal< sc_lv<32> > i_18_reg_262;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln75_fu_184_p2;
    sc_signal< sc_lv<32> > select_ln76_fu_206_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<5> > foundLayers_data_s_address0;
    sc_signal< sc_logic > foundLayers_data_s_ce0;
    sc_signal< sc_logic > foundLayers_data_s_we0;
    sc_signal< sc_lv<1> > foundLayers_data_s_d0;
    sc_signal< sc_lv<1> > foundLayers_data_s_q0;
    sc_signal< sc_lv<32> > i_0_i_i_reg_101;
    sc_signal< sc_lv<1> > icmp_ln63_fu_146_p2;
    sc_signal< sc_lv<32> > p_begin_0_rec_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > i_0_i_reg_123;
    sc_signal< sc_lv<1> > icmp_ln96_fu_168_p2;
    sc_signal< sc_lv<32> > count_0_i_reg_134;
    sc_signal< sc_lv<64> > zext_ln64_fu_157_p1;
    sc_signal< sc_lv<64> > p_begin_0_rec_cast_fu_162_p1;
    sc_signal< sc_lv<64> > zext_ln69_fu_179_p1;
    sc_signal< sc_lv<64> > zext_ln76_fu_195_p1;
    sc_signal< sc_lv<32> > count_fu_200_p2;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln96_fu_173_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_count_fu_200_p2();
    void thread_foundLayers_data_s_address0();
    void thread_foundLayers_data_s_ce0();
    void thread_foundLayers_data_s_d0();
    void thread_foundLayers_data_s_we0();
    void thread_i_18_fu_189_p2();
    void thread_i_fu_151_p2();
    void thread_icmp_ln63_fu_146_p2();
    void thread_icmp_ln75_fu_184_p2();
    void thread_icmp_ln96_fu_168_p2();
    void thread_onlySeed_read_1_read_fu_30_p2();
    void thread_p_begin_0_rec_cast_fu_162_p1();
    void thread_select_ln76_fu_206_p3();
    void thread_stubs_data_moduleHLS_layerId_s_address0();
    void thread_stubs_data_moduleHLS_layerId_s_ce0();
    void thread_stubs_data_moduleHLS_psModule_s_address0();
    void thread_stubs_data_moduleHLS_psModule_s_ce0();
    void thread_zext_ln64_fu_157_p1();
    void thread_zext_ln69_fu_179_p1();
    void thread_zext_ln76_fu_195_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
